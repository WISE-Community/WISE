{"version":3,"sources":["graphController.spec.es6"],"names":["describe","$controller","$rootScope","$scope","$httpBackend","graphController","component","createComponentState","componentStateId","nodeId","componentId","componentStateIdReplyingTo","response","id","studentData","beforeEach","angular","mock","module","mainModule","name","inject","_$controller_","_$rootScope_","_$httpBackend_","type","prompt","showSaveButton","showSubmitButton","graphType","xAxis","title","text","min","max","units","locked","yAxis","series","data","color","canEdit","$new","componentContent","JSON","parse","stringify","it","highX","makeSureXIsWithinXMinMaxLimits","expect","toEqual","lowX","highY","makeSureYIsWithinYMinMaxLimits","lowY","trials","show","getSeriesFromTrials","length","number","roundValuesTo","performRounding","setDefaultActiveSeries","activeSeries","getSeriesByIndex","rows","params","skipFirstRow","xColumn","yColumn","convertRowDataToSeriesData","params1","getXColumnValue","params2","getYColumnValue","series1","series2","isActiveSeries","newTrial","trialNumbersEmpty","getTrialNumbers","trialNumbers","deleteTrial","trialIdsToShow","activeTrial","makeHighestTrialActive","highestTrial","getHighestTrial","setTrialIdsToShow","deleteTrialsByTrialId","deleteTrialId","latestTrial","getLatestStudentDataTrial","hideAllTrials","trial","createNewTrial","allowPointSelect","newSeries","copySeries","latestStudentDataTrialId","removeDefaultTrialIfNecessary","trial1","isTrialHasEmptySeries","trial2","isSeriesEmpty","trialId","createNewTrialIfNecessary","oldTrial","copySeriesIntoTrial","copyTrialNameIntoTrial","trial3","getTrialById","hasEditableSeries","trial0","minMaxValues","getMinMaxValues","xMin","xMax","yMin","yMax","updateMinMaxAxisValues","clearSeriesIds","csvString","readCSVIntoActiveSeries","xAxisType","convertSeriesDataPoints","x","setVerticalPlotLine","plotLines","value","baseComponentState","connectedComponentState","mergeFields","when","action","firstTime","mergeComponentState","selectedCells","airTemp","bevTemp","material","dateAdded","selectedTrialIds","convertSelectedCellsToTrialIds","readConnectedComponentFieldFromStudentData","componentState","undoStack","undoClicked","previousComponentState","categories","getCategoryByIndex","dataPointObject","y","dataPointArray","getXValueFromDataPoint","getYValueFromDataPoint","mouseOverPoints","getLatestMouseOverPointX","getLatestMouseOverPointY","addPointToSeries","removePointFromSeries","getTrialIndex","deferred","subtitle","zoomType","chartConfig","createChartConfig","options","chart","multipleSeries","isSeriesEditable","multipleSeries0","getLatestEditableSeriesIndex","multipleSeries1","multipleSeries2","multipleSeries3","previousTrialIdsToShow","studentDataChangedSpy","spyOn","and","callFake","trialIdsToShowChanged","toHaveBeenCalled","showOrHideTrials","setActiveTrialAndSeriesByTrialIdsToShow"],"mappings":"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","sourcesContent":["import angular from 'angular';\nimport mainModule from 'vle/main';\nimport 'angular-mocks';\n\ndescribe('GraphController', () => {\n\n  let $controller;\n  let $rootScope;\n  let $scope;\n  let $httpBackend;\n  let graphController;\n  let component;\n  const createComponentState = (componentStateId, nodeId, componentId, componentStateIdReplyingTo, response) => {\n    return {\n      id: componentStateId,\n      nodeId: nodeId,\n      componentId: componentId,\n      studentData: {\n        response: response,\n        componentStateIdReplyingTo: componentStateIdReplyingTo\n      }\n    };\n  };\n\n  beforeEach(angular.mock.module(mainModule.name));\n\n  beforeEach(inject((_$controller_, _$rootScope_, _$httpBackend_) => {\n    $controller = _$controller_;\n    $rootScope = _$rootScope_;\n    $httpBackend = _$httpBackend_;\n    component = {\n      id: '1sc05cn75f',\n      type: 'Graph',\n      prompt: 'Plot points on the graph.',\n      showSaveButton: false,\n      showSubmitButton: false,\n      graphType: 'line',\n      xAxis: {\n        title: {\n          text: 'Time (seconds)'\n        },\n        min: 0,\n        max: 100,\n        units: 's',\n        locked: true,\n        type: 'limits'\n      },\n      yAxis: {\n        title: {\n          text: 'Position (meters)'\n        },\n        min: 0,\n        max: 100,\n        units: 'm',\n        locked: true\n      },\n      series: [\n        {\n          id: 'series-0',\n          name: 'Prediction',\n          data: [],\n          color: 'blue',\n          canEdit: true\n        }\n      ]\n    };\n    $scope = $rootScope.$new();\n    $scope.componentContent = JSON.parse(JSON.stringify(component));\n    graphController = $controller('GraphController', { $scope: $scope });\n    graphController.nodeId = 'node1';\n  }));\n\n  it('should make sure x is within limits', () => {\n    let highX = 120;\n    highX = graphController.makeSureXIsWithinXMinMaxLimits(highX);\n    expect(highX).toEqual(100);\n    let lowX = -10;\n    lowX = graphController.makeSureXIsWithinXMinMaxLimits(lowX);\n    expect(lowX).toEqual(0);\n  });\n\n  it('should make sure y is within limits', () => {\n    let highY = 120;\n    highY = graphController.makeSureYIsWithinYMinMaxLimits(highY);\n    expect(highY).toEqual(100);\n    let lowY = -10;\n    lowY = graphController.makeSureYIsWithinYMinMaxLimits(lowY);\n    expect(lowY).toEqual(0);\n  });\n\n  it('should get the series from the trials', () => {\n    const trials = [\n      {\n        name: 'Trial 1',\n        show: true,\n        series: [{\n          name: 'Prediction',\n          data: [\n            [0, 0],\n            [10, 20],\n            [20, 40]\n          ]\n        }, {\n          name: 'Actual',\n          data: [\n            [0, 0],\n            [10, 30],\n            [20, 60]\n          ]\n        }],\n        id: 'u3ijj5vfxd'\n      },\n      {\n        name: 'Trial 2',\n        show: true,\n        series: [{\n          name: 'Prediction',\n          data: [\n            [0, 0],\n            [30, 20],\n            [40, 40]\n          ]\n        }, {\n          name: 'Actual',\n          data: [\n            [0, 0],\n            [30, 30],\n            [40, 60]\n          ]\n        }],\n        id: 'u3ijj5vfxd'\n      }\n    ];\n    const series = graphController.getSeriesFromTrials(trials);\n    expect(series.length).toEqual(4);\n  });\n\n  it('should perform rounding', () => {\n    const number = 10.234;\n    graphController.componentContent.roundValuesTo = 'integer';\n    expect(graphController.performRounding(number)).toEqual(10);\n    graphController.componentContent.roundValuesTo = 'tenth';\n    expect(graphController.performRounding(number)).toEqual(10.2);\n    graphController.componentContent.roundValuesTo = 'hundredth';\n    expect(graphController.performRounding(number)).toEqual(10.23);\n  });\n\n  it('should set the default active series', () => {\n    graphController.series = [\n      {\n        name: 'Series 1',\n        canEdit: false,\n        data: []\n      },\n      {\n        name: 'Series 2',\n        canEdit: true,\n        data: []\n      }\n    ];\n    graphController.setDefaultActiveSeries();\n    expect(graphController.activeSeries.name).toEqual('Series 2');\n  });\n\n  it('should get series by index', () => {\n    graphController.series = [\n      {\n        name: 'Series 1',\n        canEdit: false,\n        data: []\n      },\n      {\n        name: 'Series 2',\n        canEdit: true,\n        data: []\n      }\n    ];\n    expect(graphController.getSeriesByIndex(1).name).toEqual('Series 2');\n  });\n\n  it('should convert row data to series data', () => {\n    const rows = [\n      [{ text: 'Time' },{ text: 'Distance'}],\n      [{ text: '0' },{ text: '10' }],\n      [{ text: '20' },{ text: '30' }]\n    ];\n    const params = {\n      skipFirstRow: true,\n      xColumn: 0,\n      yColumn: 1\n    };\n    const data = graphController.convertRowDataToSeriesData(rows, params);\n    expect(data[0][0]).toEqual(0);\n    expect(data[0][1]).toEqual(10);\n    expect(data[1][0]).toEqual(20);\n    expect(data[1][1]).toEqual(30);\n  });\n\n  it('should get the x column value from params', () => {\n    const params1 = {\n      skipFirstRow: true,\n      xColumn: 1,\n      yColumn: 2\n    };\n    expect(graphController.getXColumnValue(params1)).toEqual(1);\n    const params2 = {};\n    expect(graphController.getXColumnValue(params2)).toEqual(0);\n  });\n\n  it('should get the y column value from params', () => {\n    const params1 = {\n      skipFirstRow: true,\n      xColumn: 1,\n      yColumn: 2\n    };\n    expect(graphController.getYColumnValue(params1)).toEqual(2);\n    const params2 = {};\n    expect(graphController.getYColumnValue(params2)).toEqual(1);\n  });\n\n  it('should check if a series is the active series', () => {\n    const series1 = {};\n    const series2 = {};\n    graphController.series = [\n      series1,\n      series2\n    ];\n    graphController.activeSeries = series2;\n    expect(graphController.isActiveSeries(series2)).toEqual(true);\n  });\n\n  it('should create a new trial', () => {\n    const series1 = {};\n    const series2 = {};\n    graphController.series = [\n      series1,\n      series2\n    ];\n    graphController.activeSeries = series1;\n    expect(graphController.trials.length).toEqual(0);\n    graphController.newTrial();\n    expect(graphController.trials.length).toEqual(1);\n  });\n\n  it('should get the trial numbers', () => {\n    graphController.trials = [];\n    const trialNumbersEmpty = graphController.getTrialNumbers();\n    expect(trialNumbersEmpty.length).toEqual(0);\n    graphController.trials = [\n      { name: 'Trial 1' },\n      { name: 'Trial 2' },\n      { name: 'Trial 3' }\n    ];\n    const trialNumbers = graphController.getTrialNumbers();\n    expect(trialNumbers[0]).toEqual(1);\n    expect(trialNumbers[1]).toEqual(2);\n    expect(trialNumbers[2]).toEqual(3);\n  });\n\n  it('should delete a trial', () => {\n    graphController.trials = [\n      { name: 'Trial 1' },\n      { name: 'Trial 2' },\n      { name: 'Trial 3' }\n    ];\n    expect(graphController.trials.length).toEqual(3);\n    graphController.deleteTrial(1);\n    expect(graphController.trials.length).toEqual(2);\n    expect(graphController.trials[0].name).toEqual('Trial 1');\n    expect(graphController.trials[1].name).toEqual('Trial 3');\n  });\n\n  it('should make the highest trial active', () => {\n    graphController.trials = [\n      { name: 'Trial 1', id: 'aaaaaaaaaa', series: [] },\n      { name: 'Trial 2', id: 'bbbbbbbbbb', series: [] },\n      { name: 'Trial 3', id: 'cccccccccc', series: [] }\n    ];\n    graphController.trialIdsToShow = ['aaaaaaaaaa', 'bbbbbbbbbb'];\n    expect(graphController.activeTrial).toEqual(null);\n    graphController.makeHighestTrialActive();\n    expect(graphController.activeTrial).toEqual(graphController.trials[1]);\n  });\n\n  it('should get the highest shown trial', () => {\n    graphController.trials = [\n      { name: 'Trial 1', id: 'aaaaaaaaaa' },\n      { name: 'Trial 2', id: 'bbbbbbbbbb' },\n      { name: 'Trial 3', id: 'cccccccccc' }\n    ];\n    graphController.trialIdsToShow = ['aaaaaaaaaa', 'bbbbbbbbbb'];\n    expect(graphController.activeTrial).toEqual(null);\n    const highestTrial = graphController.getHighestTrial();\n    expect(highestTrial).toEqual(graphController.trials[1]);\n  });\n\n  it('should set the trial ids to show', () => {\n    expect(graphController.trialIdsToShow.length).toEqual(0);\n    graphController.trials = [\n      { name: 'Trial 1', id: 'aaaaaaaaaa', show: true },\n      { name: 'Trial 2', id: 'bbbbbbbbbb', show: false },\n      { name: 'Trial 3', id: 'cccccccccc', show: true }\n    ];\n    graphController.setTrialIdsToShow();\n    expect(graphController.trialIdsToShow.length).toEqual(2);\n    expect(graphController.trialIdsToShow[0]).toEqual('aaaaaaaaaa');\n    expect(graphController.trialIdsToShow[1]).toEqual('cccccccccc');\n  });\n\n  it('should delete trials by id', () => {\n    graphController.trials = [\n      { name: 'Trial 1', id: 'aaaaaaaaaa' },\n      { name: 'Trial 2', id: 'bbbbbbbbbb' },\n      { name: 'Trial 3', id: 'cccccccccc' }\n    ];\n    expect(graphController.trials.length).toEqual(3);\n    graphController.deleteTrialsByTrialId(['aaaaaaaaaa', 'bbbbbbbbbb']);\n    expect(graphController.trials.length).toEqual(1);\n  });\n\n  it('should delete trial by id', () => {\n    graphController.trials = [\n      { name: 'Trial 1', id: 'aaaaaaaaaa' },\n      { name: 'Trial 2', id: 'bbbbbbbbbb' },\n      { name: 'Trial 3', id: 'cccccccccc' }\n    ];\n    expect(graphController.trials.length).toEqual(3);\n    graphController.deleteTrialId('bbbbbbbbbb');\n    expect(graphController.trials.length).toEqual(2);\n  });\n\n  it('should get the latest student data trial', () => {\n    const studentData = {\n      trials: [\n        { name: 'Trial 1', id: 'aaaaaaaaaa' },\n        { name: 'Trial 2', id: 'bbbbbbbbbb' }\n      ]\n    };\n    const latestTrial = graphController.getLatestStudentDataTrial(studentData);\n    expect(latestTrial.id).toEqual('bbbbbbbbbb');\n  });\n\n  it('should hide all trials', () => {\n    graphController.trials = [\n      { name: 'Trial 1', id: 'aaaaaaaaaa', show: true },\n      { name: 'Trial 2', id: 'bbbbbbbbbb', show: true }\n    ];\n    expect(graphController.trials[0].show).toEqual(true);\n    expect(graphController.trials[1].show).toEqual(true);\n    graphController.hideAllTrials();\n    expect(graphController.trials[0].show).toEqual(false);\n    expect(graphController.trials[1].show).toEqual(false);\n  });\n\n  it('should create a new trial object', () => {\n    const trial = graphController.createNewTrial('aaaaaaaaaa');\n    expect(trial.id).toEqual('aaaaaaaaaa');\n    expect(trial.name).toEqual('');\n    expect(trial.series.length).toEqual(0);\n    expect(trial.show).toEqual(true);\n  });\n\n  it('should copy a series', () => {\n    const series = {\n      name: 'Series 1',\n      data: [],\n      color: 'blue',\n      canEdit: true,\n      allowPointSelect: true\n    };\n    const newSeries = graphController.copySeries(series);\n    expect(newSeries.name).toEqual('Series 1');\n    expect(newSeries.data.length).toEqual(0);\n    expect(newSeries.color).toEqual('blue');\n    expect(newSeries.canEdit).toEqual(false);\n    expect(newSeries.allowPointSelect).toEqual(false);\n  });\n\n  it('should remove default trial if necessary', () => {\n    graphController.trials = [\n      { name: 'Trial 1', id: 'aaaaaaaaaa', series: [] }\n    ];\n    expect(graphController.trials.length).toEqual(1);\n    const latestStudentDataTrialId = 2;\n    graphController.removeDefaultTrialIfNecessary(latestStudentDataTrialId);\n    expect(graphController.trials.length).toEqual(0);\n  });\n\n  it('should check if a trial has an empty series', () => {\n    const trial1 = { series: [] };\n    expect(graphController.isTrialHasEmptySeries(trial1)).toEqual(true);\n    const trial2 = { series: [ { id: 'series-0' }, { id: 'series-1' }] };\n    expect(graphController.isTrialHasEmptySeries(trial2)).toEqual(false);\n  });\n\n  it('should check if a series is empty', () => {\n    const series1 = [ { data: [] } ];\n    expect(graphController.isSeriesEmpty(series1)).toEqual(true);\n    const series2 = [\n      { id: 'series-0', data: [[0, 10]] }\n    ];\n    expect(graphController.isSeriesEmpty(series2)).toEqual(false);\n  });\n\n  it('should create new trial if necessary', () => {\n    graphController.trials = [\n      { name: 'Trial 1', id: 'aaaaaaaaaa', show: true }\n    ];\n    const trialId = 2;\n    graphController.createNewTrialIfNecessary(trialId);\n    expect(graphController.trials.length).toEqual(2);\n  });\n\n  it('should not create new trial when not necessary', () => {\n    graphController.trials = [\n      { name: 'Trial 1', id: 'aaaaaaaaaa', show: true }\n    ];\n    const trialId = 'aaaaaaaaaa';\n    graphController.createNewTrialIfNecessary(trialId);\n    expect(graphController.trials.length).toEqual(1);\n  });\n\n  it('should copy series into trial', () => {\n    const oldTrial = {\n      series: [ { id: 'series-0' } ]\n    };\n    const newTrial = {\n      series: []\n    };\n    const studentData = {};\n    const params = {};\n    expect(newTrial.series.length).toEqual(0);\n    graphController.copySeriesIntoTrial(oldTrial, newTrial, studentData, params);\n    expect(newTrial.series.length).toEqual(1);\n  });\n\n  it('should copy name into trial', () => {\n    const oldTrial = {\n      name: 'Trial 1'\n    };\n    const newTrial = {\n      name: 'Trial 2'\n    };\n    expect(newTrial.name).toEqual('Trial 2');\n    graphController.copyTrialNameIntoTrial(oldTrial, newTrial);\n    expect(newTrial.name).toEqual('Trial 1');\n  });\n\n  it('should get the trial by id', () => {\n    const trial1 = { name: 'Trial 1', id: 'aaaaaaaaaa' };\n    const trial2 = { name: 'Trial 2', id: 'bbbbbbbbbb' };\n    const trial3 = { name: 'Trial 3', id: 'cccccccccc' };\n    graphController.trials = [\n      trial1,\n      trial2,\n      trial3\n    ];\n    expect(graphController.getTrialById('aaaaaaaaaa')).toEqual(trial1);\n    expect(graphController.getTrialById('bbbbbbbbbb')).toEqual(trial2);\n    expect(graphController.getTrialById('cccccccccc')).toEqual(trial3);\n  });\n\n  it('should check if there is an editable series', () => {\n    graphController.series = [\n      { id: 'series-0', canEdit: false }\n    ];\n    expect(graphController.hasEditableSeries()).toEqual(false);\n    graphController.series = [\n      { id: 'series-0', canEdit: true }\n    ];\n    expect(graphController.hasEditableSeries()).toEqual(true);\n    const trial0 = {\n      id: 'trial0',\n      series: [\n        {\n          id: 'series0',\n          canEdit: false\n        },\n        {\n          id: 'series1',\n          canEdit: false\n        }\n      ]\n    };\n    expect(graphController.hasEditableSeries(trial0.series)).toEqual(false);\n    const trial1 = {\n      id: 'trial1',\n      series: [\n        {\n          id: 'series0',\n          canEdit: true\n        },\n        {\n          id: 'series1',\n          canEdit: false\n        }\n      ]\n    };\n    expect(graphController.hasEditableSeries(trial1.series)).toEqual(true);\n  });\n\n  it('should get min max values', () => {\n    const series = [\n      { id: 'series-0', data: [[0, 20], [10, 200]] }\n    ];\n    const minMaxValues = graphController.getMinMaxValues(series);\n    expect(minMaxValues.xMin).toEqual(0);\n    expect(minMaxValues.xMax).toEqual(10);\n    expect(minMaxValues.yMin).toEqual(0);\n    expect(minMaxValues.yMax).toEqual(200);\n  });\n\n  it('should update min max axis values', () => {\n    const series = [\n      { id: 'series-0', data: [[-10, -20], [1000, 2000]] }\n    ];\n    const xAxis = { min: 0, max: 100 };\n    const yAxis = { min: 0, max: 100 };\n    graphController.updateMinMaxAxisValues(series, xAxis, yAxis);\n    expect(xAxis.min).toEqual(null);\n    expect(xAxis.max).toEqual(null);\n    expect(yAxis.min).toEqual(null);\n    expect(yAxis.max).toEqual(null);\n  });\n\n  it('should clear series ids', () => {\n    const series = [\n      { id: 'series-0' },\n      { id: 'series-1' }\n    ];\n    graphController.clearSeriesIds(series);\n    expect(series[0].id).toEqual(null);\n    expect(series[1].id).toEqual(null);\n  });\n\n  it('should read csv into active series', () => {\n    const csvString = `0,100\n    10, 200`;\n    graphController.activeSeries = {};\n    graphController.readCSVIntoActiveSeries(csvString);\n    expect(graphController.activeSeries.data[0][0]).toEqual(0);\n    expect(graphController.activeSeries.data[0][1]).toEqual(100);\n    expect(graphController.activeSeries.data[1][0]).toEqual(10);\n    expect(graphController.activeSeries.data[1][1]).toEqual(200);\n  });\n\n  it('should convert series data points from limits to categories', () => {\n    const series = {\n      data: [[0, 100],[10, 200]]\n    };\n    const xAxisType = 'categories';\n    graphController.convertSeriesDataPoints(series, xAxisType);\n    expect(series.data[0]).toEqual(100);\n    expect(series.data[1]).toEqual(200);\n  });\n\n  it('should convert series data points from categories to limits', () => {\n    const series = {\n      data: [100, 200]\n    };\n    const xAxisType = 'limits';\n    graphController.convertSeriesDataPoints(series, xAxisType);\n    expect(series.data[0][1]).toEqual(100);\n    expect(series.data[1][1]).toEqual(200);\n  });\n\n  it('should set vertical plot line', () => {\n    const x = 10;\n    graphController.setVerticalPlotLine(x);\n    expect(graphController.plotLines.length).toEqual(1);\n    expect(graphController.plotLines[0].value).toEqual(10);\n  });\n\n  it('should merge component state', () => {\n    const baseComponentState = {\n      studentData: {\n        trials: [\n          { id: 'aaaaaaaaaa', name: 'Trial 1', series: [] }\n        ]\n      }\n    };\n    const connectedComponentState = {\n      studentData: {\n        trials: [\n          { id: 'bbbbbbbbbb', name: 'Trial 2', series: [] }\n        ]\n      }\n    };\n    const mergeFields = [\n      {\n        name: 'trials',\n        when: 'always',\n        action: 'write'\n      }\n    ];\n    const firstTime = false;\n    expect(baseComponentState.studentData.trials[0].name).toEqual('Trial 1');\n    graphController.mergeComponentState(\n      baseComponentState, connectedComponentState, mergeFields, firstTime);\n    expect(baseComponentState.studentData.trials[0].name).toEqual('Trial 2');\n  });\n\n  it('should convert selected cells to trial ids', () => {\n    const selectedCells = [\n      {\n        airTemp: 'Warm',\n        bevTemp: 'Hot',\n        material: 'Aluminum',\n        dateAdded: 1556233173611\n      },\n      {\n        airTemp: 'Warm',\n        bevTemp: 'Cold',\n        material: 'Aluminum',\n        dateAdded: 1556233245396\n      }\n    ];\n    const selectedTrialIds = graphController.convertSelectedCellsToTrialIds(selectedCells);\n    expect(selectedTrialIds.length).toEqual(2);\n    expect(selectedTrialIds[0]).toEqual('Aluminum-HotLiquid');\n    expect(selectedTrialIds[1]).toEqual('Aluminum-ColdLiquid');\n  });\n\n  it('should convert null selected cells to empty array of trial ids', () => {\n    const selectedCells = null;\n    const selectedTrialIds = graphController.convertSelectedCellsToTrialIds(selectedCells);\n    expect(selectedTrialIds.length).toEqual(0);\n  });\n\n  it('should read the connected component field', () => {\n    const studentData = {\n      selectedCells: [\n        {\n          airTemp: 'Warm',\n          bevTemp: 'Hot',\n          material: 'Aluminum',\n          dateAdded: 1556233173611\n        },\n        {\n          airTemp: 'Warm',\n          bevTemp: 'Cold',\n          material: 'Aluminum',\n          dateAdded: 1556233245396\n        }\n      ]\n    };\n    const params = {};\n    const name = 'selectedCells';\n    graphController.trials = [\n      { id: 'Aluminum-HotLiquid' },\n      { id: 'Aluminum-ColdLiquid' },\n      { id: 'Wood-HotLiquid' },\n      { id: 'Wood-ColdLiquid' }\n    ];\n    graphController.readConnectedComponentFieldFromStudentData(studentData, params, name);\n    expect(graphController.trials[0].show).toEqual(true);\n    expect(graphController.trials[1].show).toEqual(true);\n    expect(graphController.trials[2].show).toEqual(false);\n    expect(graphController.trials[3].show).toEqual(false);\n  });\n\n  it('should click undo', () => {\n    graphController.trials = [\n      { id: 'aaaaaaaaaa' }\n    ];\n    const componentState = {\n      studentData: {\n        trials: [\n          { id: 'aaaaaaaaaa' },\n          { id: 'bbbbbbbbbb' }\n        ]\n      }\n    };\n    graphController.undoStack = [componentState];\n    graphController.undoClicked();\n    expect(graphController.undoStack.length).toEqual(0);\n    expect(graphController.previousComponentState).toEqual(componentState);\n    expect(graphController.trials[0].id).toEqual('aaaaaaaaaa');\n    expect(graphController.trials[1].id).toEqual('bbbbbbbbbb');\n  });\n\n  it('should get the category by index', () => {\n    graphController.componentContent = {\n      xAxis: {\n        categories: [\n          'Computers',\n          'Phones',\n          'Pizzas'\n        ]\n      }\n    };\n    expect(graphController.getCategoryByIndex(0)).toEqual('Computers');\n    expect(graphController.getCategoryByIndex(1)).toEqual('Phones');\n    expect(graphController.getCategoryByIndex(2)).toEqual('Pizzas');\n  });\n\n  it('should get the x value from data point', () => {\n    const dataPointObject = { x: 10, y: 20 };\n    const dataPointArray = [100, 200];\n    expect(graphController.getXValueFromDataPoint(dataPointObject)).toEqual(10);\n    expect(graphController.getXValueFromDataPoint(dataPointArray)).toEqual(100);\n  });\n\n  it('should get the y value from data point', () => {\n    const dataPointObject = { x: 10, y: 20 };\n    const dataPointArray = [100, 200];\n    expect(graphController.getYValueFromDataPoint(dataPointObject)).toEqual(20);\n    expect(graphController.getYValueFromDataPoint(dataPointArray)).toEqual(200);\n  });\n\n  it('should get the latest mouse over point x', () => {\n    graphController.mouseOverPoints = [{ x: 10, y: 20 }, { x: 11, y: 22 }];\n    expect(graphController.getLatestMouseOverPointX()).toEqual(11);\n    graphController.mouseOverPoints = [[100, 200], [111, 222]];\n    expect(graphController.getLatestMouseOverPointX()).toEqual(111);\n  });\n\n  it('should get the latest mouse over point y', () => {\n    graphController.mouseOverPoints = [{ x: 10, y: 20 }, { x: 11, y: 22 }];\n    expect(graphController.getLatestMouseOverPointY()).toEqual(22);\n    graphController.mouseOverPoints = [[100, 200], [111, 222]];\n    expect(graphController.getLatestMouseOverPointY()).toEqual(222);\n  });\n\n  it('should add point to series', () => {\n    const series = {\n      data: [[10, 20], [100, 200]]\n    };\n    expect(series.data.length).toEqual(2);\n    graphController.addPointToSeries(series, 1000, 2000);\n    expect(series.data.length).toEqual(3);\n    expect(series.data[2][0]).toEqual(1000);\n    expect(series.data[2][1]).toEqual(2000);\n  });\n\n  it('should remove point from series', () => {\n    const series = {\n      data: [[10, 20], [100, 200]]\n    };\n    expect(series.data.length).toEqual(2);\n    graphController.removePointFromSeries(series, 10);\n    expect(series.data.length).toEqual(1);\n    expect(series.data[0][0]).toEqual(100);\n    expect(series.data[0][1]).toEqual(200);\n  });\n\n  it('should get the trial index', () => {\n    const trial0 = {};\n    const trial1 = {};\n    const trial2 = {};\n    graphController.trials = [\n      trial0,\n      trial1,\n      trial2\n    ];\n    expect(graphController.getTrialIndex(trial0)).toEqual(0);\n    expect(graphController.getTrialIndex(trial1)).toEqual(1);\n    expect(graphController.getTrialIndex(trial2)).toEqual(2);\n  });\n\n  it('should create the chart config', () => {\n    const trial0 = {};\n    const trial1 = {};\n    const trial2 = {};\n    graphController.trials = [\n      trial0,\n      trial1,\n      trial2\n    ];\n    const deferred = {};\n    const title = 'My Graph';\n    const subtitle = 'My Subtitle';\n    const xAxis = {\n      min: 0,\n      max: 100\n    };\n    const yAxis = {\n      min: 0,\n      max: 50\n    };\n    const series = [[10, 20], [100, 200]];\n    const zoomType = null;\n    const chartConfig = graphController.createChartConfig(deferred, title, subtitle, xAxis, yAxis,\n        series, zoomType);\n    expect(chartConfig.title.text).toEqual('My Graph');\n    expect(chartConfig.xAxis.min).toEqual(0);\n    expect(chartConfig.xAxis.max).toEqual(100);\n    expect(chartConfig.yAxis.min).toEqual(0);\n    expect(chartConfig.yAxis.max).toEqual(50);\n    expect(chartConfig.series).toEqual(series);\n    expect(chartConfig.options.chart.zoomType).toEqual(null);\n  });\n\n  it('should check if a series is editable', () => {\n    const multipleSeries = [\n      { id: 'series0', canEdit: true},\n      { id: 'series1', canEdit: false},\n      { id: 'series2', canEdit: true}\n    ];\n    expect(graphController.isSeriesEditable(multipleSeries, 0)).toEqual(true);\n    expect(graphController.isSeriesEditable(multipleSeries, 1)).toEqual(false);\n    expect(graphController.isSeriesEditable(multipleSeries, 2)).toEqual(true);\n  });\n\n  it('should get the latest editable series index', () => {\n    const multipleSeries0 = [\n      { id: 'series0', canEdit: true},\n      { id: 'series1', canEdit: false},\n      { id: 'series2', canEdit: false}\n    ];\n    expect(graphController.getLatestEditableSeriesIndex(multipleSeries0)).toEqual(0);\n    const multipleSeries1 = [\n      { id: 'series0', canEdit: true},\n      { id: 'series1', canEdit: true},\n      { id: 'series2', canEdit: false}\n    ];\n    expect(graphController.getLatestEditableSeriesIndex(multipleSeries1)).toEqual(1);\n    const multipleSeries2 = [\n      { id: 'series0', canEdit: true},\n      { id: 'series1', canEdit: false},\n      { id: 'series2', canEdit: true}\n    ];\n    expect(graphController.getLatestEditableSeriesIndex(multipleSeries2)).toEqual(2);\n    const multipleSeries3 = [\n      { id: 'series0', canEdit: false},\n      { id: 'series1', canEdit: false},\n      { id: 'series2', canEdit: false}\n    ];\n    expect(graphController.getLatestEditableSeriesIndex(multipleSeries3)).toEqual(null);\n  });\n\n  it('should handle trial ids to show changed', () => {\n    const trial0 = {\n      id: 'aaaaaaaaaa',\n      show: true,\n      series: [\n        {\n          id: '1111111111',\n          canEdit: true\n        }\n      ]\n    };\n    const trial1 = {\n      id: 'bbbbbbbbbb',\n      show: true,\n      series: [\n        {\n          id: '2222222222',\n          canEdit: true\n        }\n      ]\n    };\n    const trial2 = {\n      id: 'cccccccccc',\n      show: true,\n      series: [\n        {\n          id: '3333333333',\n          canEdit: true\n        }\n      ]\n    };\n    graphController.trials = [\n      trial0,\n      trial1,\n      trial2\n    ];\n    graphController.activeTrial = trial1;\n    graphController.activeSeries = trial1.series[0];\n    graphController.previousTrialIdsToShow = ['aaaaaaaaaa', 'bbbbbbbbbb'];\n    graphController.trialIdsToShow = ['aaaaaaaaaa', 'bbbbbbbbbb', 'cccccccccc'];\n    const studentDataChangedSpy = spyOn(graphController, 'studentDataChanged').and.callFake(() => {});\n    graphController.trialIdsToShowChanged();\n    expect(graphController.activeTrial).toEqual(trial2);\n    expect(graphController.activeSeries).toEqual(trial2.series[0]);\n    expect(studentDataChangedSpy).toHaveBeenCalled();\n  });\n\n  it('should handle trial ids to show changed when the latest trial is not editable', () => {\n    const trial0 = {\n      id: 'aaaaaaaaaa',\n      show: true,\n      series: [\n        {\n          id: '1111111111',\n          canEdit: true\n        }\n      ]\n    };\n    const trial1 = {\n      id: 'bbbbbbbbbb',\n      show: true,\n      series: [\n        {\n          id: '2222222222',\n          canEdit: true\n        }\n      ]\n    };\n    const trial2 = {\n      id: 'cccccccccc',\n      show: true,\n      series: [\n        {\n          id: '3333333333',\n          canEdit: false\n        }\n      ]\n    };\n    graphController.trials = [\n      trial0,\n      trial1,\n      trial2\n    ];\n    graphController.activeTrial = trial1;\n    graphController.activeSeries = trial1.series[0];\n    const trialIdsToShow = ['aaaaaaaaaa', 'bbbbbbbbbb', 'cccccccccc'];\n    graphController.trialIdsToShow = trialIdsToShow;\n    graphController.previousTrialIdsToShow = trialIdsToShow;\n    graphController.trialIdsToShowChanged();\n    expect(graphController.activeTrial).toEqual(trial1);\n    expect(graphController.activeSeries).toEqual(trial1.series[0]);\n  });\n\n  it('should show and hide trials', () => {\n    const trial0 = {\n      id: 'aaaaaaaaaa',\n      show: true,\n      series: [\n        {\n          id: '1111111111',\n          canEdit: true\n        }\n      ]\n    };\n    const trial1 = {\n      id: 'bbbbbbbbbb',\n      show: true,\n      series: [\n        {\n          id: '2222222222',\n          canEdit: true\n        }\n      ]\n    };\n    const trial2 = {\n      id: 'cccccccccc',\n      show: true,\n      series: [\n        {\n          id: '3333333333',\n          canEdit: false\n        }\n      ]\n    };\n    graphController.trials = [\n      trial0,\n      trial1,\n      trial2\n    ];\n    graphController.series = trial1.series;\n    graphController.activeTrial = trial1;\n    graphController.activeSeries = trial1.series[0];\n    const trialIdsToShow = ['aaaaaaaaaa', 'bbbbbbbbbb'];\n    graphController.showOrHideTrials(trialIdsToShow);\n    expect(trial0.show).toEqual(true);\n    expect(trial1.show).toEqual(true);\n    expect(trial2.show).toEqual(false);\n  });\n\n  it('should show trials and hide the currently active trial', () => {\n    const trial0 = {\n      id: 'aaaaaaaaaa',\n      show: true,\n      series: [\n        {\n          id: '1111111111',\n          canEdit: true\n        }\n      ]\n    };\n    const trial1 = {\n      id: 'bbbbbbbbbb',\n      show: true,\n      series: [\n        {\n          id: '2222222222',\n          canEdit: true\n        }\n      ]\n    };\n    const trial2 = {\n      id: 'cccccccccc',\n      show: true,\n      series: [\n        {\n          id: '3333333333',\n          canEdit: false\n        }\n      ]\n    };\n    graphController.trials = [\n      trial0,\n      trial1,\n      trial2\n    ];\n    graphController.series = trial1.series;\n    graphController.activeTrial = trial1;\n    graphController.activeSeries = trial1.series[0];\n    const trialIdsToShow = ['aaaaaaaaaa', 'cccccccccc'];\n    graphController.showOrHideTrials(trialIdsToShow);\n    expect(trial0.show).toEqual(true);\n    expect(trial1.show).toEqual(false);\n    expect(trial2.show).toEqual(true);\n    expect(graphController.series).toEqual([]);\n    expect(graphController.activeTrial).toEqual(null);\n    expect(graphController.activeSeries).toEqual(null);\n  });\n\n  it('should set active trial and series by trial ids to show', () => {\n    const trial0 = {\n      id: 'aaaaaaaaaa',\n      show: true,\n      series: [\n        {\n          id: '1111111111',\n          canEdit: true\n        }\n      ]\n    };\n    const trial1 = {\n      id: 'bbbbbbbbbb',\n      show: true,\n      series: [\n        {\n          id: '2222222222',\n          canEdit: true\n        }\n      ]\n    };\n    const trial2 = {\n      id: 'cccccccccc',\n      show: true,\n      series: [\n        {\n          id: '3333333333',\n          canEdit: false\n        }\n      ]\n    };\n    graphController.trials = [\n      trial0,\n      trial1,\n      trial2\n    ];\n    graphController.series = trial2.series;\n    graphController.activeTrial = trial2;\n    graphController.activeSeries = trial2.series[0];\n    const trialIdsToShow = ['aaaaaaaaaa', 'bbbbbbbbbb'];\n    graphController.setActiveTrialAndSeriesByTrialIdsToShow(trialIdsToShow);\n    expect(graphController.series).toEqual(trial1.series);\n    expect(graphController.activeTrial).toEqual(trial1);\n    expect(graphController.activeSeries).toEqual(trial1.series[0]);\n  });\n\n  it('should not set the active trial and series if the trial can not be edited', () => {\n    const trial0 = {\n      id: 'aaaaaaaaaa',\n      show: true,\n      series: [\n        {\n          id: '1111111111',\n          canEdit: true\n        }\n      ]\n    };\n    const trial1 = {\n      id: 'bbbbbbbbbb',\n      show: true,\n      series: [\n        {\n          id: '2222222222',\n          canEdit: true\n        }\n      ]\n    };\n    const trial2 = {\n      id: 'cccccccccc',\n      show: true,\n      series: [\n        {\n          id: '3333333333',\n          canEdit: false\n        }\n      ]\n    };\n    graphController.trials = [\n      trial0,\n      trial1,\n      trial2\n    ];\n    graphController.series = trial1.series;\n    graphController.activeTrial = trial1;\n    graphController.activeSeries = trial1.series[0];\n    const trialIdsToShow = ['aaaaaaaaaa', 'bbbbbbbbbb', 'cccccccccc'];\n    graphController.setActiveTrialAndSeriesByTrialIdsToShow(trialIdsToShow);\n    expect(graphController.series).toEqual(trial1.series);\n    expect(graphController.activeTrial).toEqual(trial1);\n    expect(graphController.activeSeries).toEqual(trial1.series[0]);\n  });\n});\n"],"file":"graphController.spec.js"}