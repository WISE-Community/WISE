{"version":3,"sources":["conceptMapController.spec.es6"],"names":["MockConceptMapNode","draw","instanceId","MockConceptMapLink","mockConceptMapService","newConceptMapNode","newConceptMapLink","describe","$controller","$rootScope","$scope","conceptMapController","component","beforeEach","angular","mock","module","mainModule","name","inject","_$controller_","_$rootScope_","$new","componentContent","JSON","parse","stringify","ConceptMapService","nodeId","it","componentState","setNodeMouseEventsSpy","spyOn","setLinkMouseEventsSpy","moveLinkTextToFrontSpy","moveNodesToFrontSpy","setStudentWork","expect","nodes","length","toEqual","links","addNode","addLink","clearConceptMap"],"mappings":"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","file":"conceptMapController.spec.js","sourcesContent":["import angular from 'angular';\nimport mainModule from 'vle/main';\nimport 'angular-mocks';\n\nclass MockConceptMapNode {\n  constructor(draw, instanceId) {\n    this.instanceId = instanceId;\n  }\n  getId() {\n    return this.instanceId;\n  }\n  remove() {\n\n  }\n}\n\nclass MockConceptMapLink {\n  constructor(draw, instanceId) {\n    this.instanceId = instanceId;\n  }\n  getId() {\n    return this.instanceId;\n  }\n  remove() {\n\n  }\n}\n\nconst mockConceptMapService = {\n  newConceptMapNode: function(draw, instanceId) {\n    return new MockConceptMapNode(draw, instanceId);\n  },\n  newConceptMapLink: function(draw, instanceId) {\n    return new MockConceptMapLink(draw, instanceId);\n  }\n};\n\ndescribe('ConceptMapController', () => {\n\n  let $controller;\n  let $rootScope;\n  let $scope;\n  let conceptMapController;\n  let component;\n\n  beforeEach(angular.mock.module(mainModule.name));\n\n  beforeEach(inject((_$controller_, _$rootScope_) => {\n    $controller = _$controller_;\n    $rootScope = _$rootScope_;\n\n    component = {\n      'id': 'ut00qpig10',\n      'type': 'ConceptMap',\n      'prompt': '',\n      'showSaveButton': false,\n      'showSubmitButton': false,\n      'width': 800,\n      'height': 600,\n      'background': null,\n      'stretchBackground': null,\n      'nodes': [\n        {\n          'id': 'node1',\n          'label': 'Sun',\n          'fileName': 'sun.png',\n          'width': 100,\n          'height': 100\n        },\n        {\n          'id': 'node2',\n          'label': 'Space',\n          'fileName': 'Space.png',\n          'width': 100,\n          'height': 100\n        },\n        {\n          'id': 'node3',\n          'label': 'Earths Surface',\n          'fileName': 'Earth_surface.png',\n          'width': 100,\n          'height': 100\n        },\n        {\n          'id': 'node4',\n          'label': 'Beneath Surface',\n          'fileName': 'Earth_beneath.png',\n          'width': 100,\n          'height': 100\n        }\n      ],\n      'linksTitle': '',\n      'links': [\n        {\n          'id': 'link1',\n          'label': 'Solar Radiation',\n          'color': '#DDD266'\n        },\n        {\n          'id': 'link2',\n          'label': 'Infrared Radiation',\n          'color': '#B62467'\n        },\n        {\n          'id': 'link3',\n          'label': 'Heat',\n          'color': '#DE2D26'\n        }\n      ],\n      'rules': [],\n      'starterConceptMap': null,\n      'customRuleEvaluator': '',\n      'showAutoScore': false,\n      'showAutoFeedback': false,\n      'showNodeLabels': true,\n      'showAddToNotebookButton': true\n    };\n    $scope = $rootScope.$new();\n    $scope.componentContent = JSON.parse(JSON.stringify(component));\n\n    conceptMapController = $controller('ConceptMapController', { $scope: $scope, ConceptMapService: mockConceptMapService });\n    conceptMapController.nodeId = 'node1';\n  }));\n\n  it('should populate the student work', () => {\n    const componentState = {\n      'clientSaveTime': 1542412588000,\n      'isSubmit': false,\n      'studentData': {\n        'conceptMapData': {\n          'nodes': [{\n            'originalId': 'node1',\n            'instanceId': 'studentNode1',\n            'fileName': 'sun.png',\n            'filePath': '/wise/curriculum/546/assets/sun.png',\n            'label': 'Sun',\n            'x': 162,\n            'y': 68,\n            'width': 100,\n            'height': 100,\n            'outgoingLinks': [{\n              'originalId': 'link1',\n              'instanceId': 'studentLink1',\n              'label': 'Solar Radiation'\n            }],\n            'incomingLinks': []\n          }, {\n            'originalId': 'node2',\n            'instanceId': 'studentNode2',\n            'fileName': 'Space.png',\n            'filePath': '/wise/curriculum/546/assets/Space.png',\n            'label': 'Space',\n            'x': 416,\n            'y': 185,\n            'width': 100,\n            'height': 100,\n            'outgoingLinks': [],\n            'incomingLinks': [{\n              'originalId': 'link1',\n              'instanceId': 'studentLink1',\n              'label': 'Solar Radiation'\n            }]\n          }],\n          'links': [{\n            'originalId': 'link1',\n            'instanceId': 'studentLink1',\n            'color': '#DDD266',\n            'label': 'Solar Radiation',\n            'curvature': 0,\n            'startCurveUp': false,\n            'endCurveUp': false,\n            'sourceNodeOriginalId': 'node1',\n            'sourceNodeInstanceId': 'studentNode1',\n            'sourceNodeLabel': 'Sun',\n            'destinationNodeOriginalId': 'node2',\n            'destinationNodeInstanceId': 'studentNode2',\n            'destinationNodeLabel': 'Space'\n          }]\n        },\n        'submitCounter': 0\n      },\n      'componentType': 'ConceptMap',\n      'nodeId': 'node1',\n      'componentId': 'ut00qpig10'\n    };\n    const setNodeMouseEventsSpy = spyOn(conceptMapController, 'setNodeMouseEvents');\n    const setLinkMouseEventsSpy = spyOn(conceptMapController, 'setLinkMouseEvents');\n    const moveLinkTextToFrontSpy = spyOn(conceptMapController, 'moveLinkTextToFront');\n    const moveNodesToFrontSpy = spyOn(conceptMapController, 'moveNodesToFront');\n    conceptMapController.setStudentWork(componentState);\n    expect(conceptMapController.nodes.length).toEqual(2);\n    expect(conceptMapController.links.length).toEqual(1);\n  });\n\n  it('should clear the concept map', () => {\n    conceptMapController.addNode(new MockConceptMapNode(null, 'node1'));\n    conceptMapController.addNode(new MockConceptMapNode(null, 'node2'));\n    conceptMapController.addLink(new MockConceptMapLink(null, 'link1'));\n    conceptMapController.addLink(new MockConceptMapLink(null, 'link2'));\n    expect(conceptMapController.nodes.length).toEqual(2);\n    expect(conceptMapController.links.length).toEqual(2);\n    conceptMapController.clearConceptMap();\n    expect(conceptMapController.nodes.length).toEqual(0);\n    expect(conceptMapController.links.length).toEqual(0);\n  });\n\n});\n"]}