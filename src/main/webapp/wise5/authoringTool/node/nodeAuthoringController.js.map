{"version":3,"sources":["nodeAuthoringController.es6"],"names":["NodeAuthoringController","$anchorScroll","$filter","$injector","$location","$mdDialog","$rootScope","$scope","$state","$stateParams","$timeout","ConfigService","NodeService","ProjectAssetService","ProjectService","TeacherDataService","UtilService","$translate","projectId","nodeId","showCreateComponent","showEditTransitions","selectedComponent","nodeCopy","undoStack","howToChooseAmongAvailablePathsOptions","whenToChoosePathOptions","canChangePathOptions","createBranchBranches","showComponents","showStepButtons","showComponentAuthoringViews","componentsToChecked","setCurrentNodeByNodeId","constraintActions","value","text","removalConditionals","removalCriteria","params","defaultValue","transitionCriterias","branchCriteria","componentTypes","componentType","componentName","getComponentTypeLabel","node","getNodeById","nodePosition","getNodePositionById","components","getComponentsByNodeId","originalNodeCopy","makeCopyOfJSONObject","currentNodeCopy","populateBranchAuthoring","summernoteRubricId","insertAssetString","insertAssetButton","createInsertAssetButton","summernoteRubricOptions","toolbar","height","disableDragAndDrop","buttons","summernoteRubricHTML","replaceAssetPaths","rubric","$on","event","args","componentId","assetItem","fileName","assetsDirectoryPath","getProjectAssetsDirectoryPath","fullAssetPath","target","summernoteId","isImage","$","summernote","isVideo","videoElement","document","createElement","controls","innerHTML","hide","showSubmitButton","showSaveButton","turnOnSaveButtonForAllComponents","doesAnyComponentInNodeShowSubmitButton","id","turnOffSaveButtonForAllComponents","authoringViewNodeChanged","current","name","nodeAuthoringViewButtonClicked","scrollToTopOfPage","data","getNodePositionAndTitleByNodeId","isGroupNode","saveEvent","transitionLogic","transitions","createBranchNumberOfBranches","length","t","transition","branch","number","items","idToOrder","checkedItemsInBranchPath","push","criteria","criterion","createBranchNodeId","createBranchComponentId","createBranchCriterion","scores","choiceIds","choiceId","choices","getChoicesByNodeIdAndComponentId","nodeIdsInBranch","getNodeIdsInBranch","to","item","checked","lastNodeIdInBranch","transitionsFromLastNode","getTransitionsByFromNodeId","createBranchMergePointNodeId","howToChooseAmongAvailablePaths","previewProjectURL","getConfigParam","previewStepURL","window","open","$broadcast","nodeToExit","setCurrentNode","go","alert","angular","equals","confirm","replaceNode","saveProject","close","nodeTransitions","lastNodeTransition","newTransition","whenToChoosePath","canChangePath","maxPathsVisitable","calculateNodeNumbers","nodeTransition","newTransitionCriteria","transitionCriteria","stepTitle","answer","index","indexOf","splice","turnOnAddComponentMode","turnOffMoveComponentMode","turnOnInsertComponentMode","hideComponentAuthoring","deleteComponent","checkIfNeedToShowNodeSaveOrNodeSubmitButtons","component","type","service","get","componentUsesSaveButton","parseProject","pop","singleRemovalCriteria","singleTransitionCriteria","choiceType","getComponentByNodeIdAndComponentId","newNodeConstraintId","usedConstraintIds","constraints","nodeConstraints","constraint","constraintId","constraintCounter","potentialNewNodeConstraintId","getNewNodeConstraintId","addConstraint","temporarilyHighlightElement","constraintIndex","removalCriteriaIndex","transitionCriteriaIndex","getRemovalCriteriaParamsByName","paramObject","hasOwnProperty","view","showGeneralAdvanced","showConstraints","showEditButtons","showRubric","showCreateBranch","showAdvanced","showImportView","showJSON","hideJSONValidMessage","showRubricButton","prevNodeId","getPreviousNodeId","thereIsNoPreviousStep","nextNodeId","getNextNodeId","thereIsNoNextStep","isJSONValid","toggleJSONAuthoringView","authoringNodeContentJSONString","toJson","showJSONValidMessage","fromJson","e","removeBranch","bp","removeBranchPath","createBranchCriterionChanged","b","setTransitionLogicField","createBranchUpdateTransitions","selectedNode","createBranchUpdateChoiceChosenIds","createBranchUpdateChoiceChosenIdsHelper","c","choice","feedback","isCorrect","orderedItems","previousCheckedNodeId","nodeIdAfter","i","orderedItem","previousCheckedNode","$key","previousOrderedItem","branchNumber","firstNodeId","firstCheckedItem","removeBranchPathTakenNodeConstraintsIfAny","fromNodeId","toNodeId","addBranchPathTakenConstraints","setTransition","itemNodeId","branches","lastNodeIdInBranchPath","lastNodeInBranchPath","branchPath","getNodeIdAfter","checkedItem","branchPathIndex","html","removeAbsoluteAssetPaths","insertWISELinks","insertComponentMode","addComponentMode","moveComponentMode","copyComponentMode","importComponentMode","selectedComponents","componentIds","componentNumberAndType","importProjectIdToOrder","importProjectItems","importMyProjectId","importLibraryProjectId","importProjectId","importProject","turnOnImportComponentMode","myProjectsList","getAuthorableProjects","libraryProjectsList","getLibraryProjects","then","getSelectedComponentIds","turnOffAddComponentMode","turnOnMoveComponentMode","turnOnCopyComponentMode","confirmMessage","selectedComponentNumbersAndTypes","getSelectedComponentNumbersAndTypes","selectedComponentNumberAndType","getComponentObjectsForEventData","clearComponentsToChecked","turnOffInsertComponentMode","showComponentAuthoring","doesAnyComponentHaveWork","hideAllComponentSaveButtons","handleAddComponent","handleMoveComponent","handleCopyComponent","handleImportComponent","newComponents","newComponent","createComponent","highlightNewComponentsAndThenShowComponentAuthoring","selectedComponentIds","moveComponent","componentsCopied","copyComponentAndInsert","componentCopied","fromComponentId","toComponentId","turnOffCopyComponentMode","importComponents","turnOffImportComponentMode","retrieveProjectAssets","componentElement","animate","scrollTop","offset","top","showImportProject","retrieveProjectById","projectJSON","result","getNodeOrderOfProject","nodes","getSelectedComponentsToImport","componentsInNode","insertAfterComponentId","getComponentObjectsForImportEventData","componentsImported","componentImported","newComponentId","eventName","category","context","componentObjects","tempComponent","parseInt","updatedNode","setNode","showJSONInvalidMessage","$inject"],"mappings":"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","sourcesContent":["'use strict';\n\nclass NodeAuthoringController {\n\n  constructor(\n      $anchorScroll,\n      $filter,\n      $injector,\n      $location,\n      $mdDialog,\n      $rootScope,\n      $scope,\n      $state,\n      $stateParams,\n      $timeout,\n      ConfigService,\n      NodeService,\n      ProjectAssetService,\n      ProjectService,\n      TeacherDataService,\n      UtilService) {\n    this.$anchorScroll = $anchorScroll;\n    this.$filter = $filter;\n    this.$injector = $injector;\n    this.$location = $location;\n    this.$mdDialog = $mdDialog;\n    this.$rootScope = $rootScope;\n    this.$scope = $scope;\n    this.$state = $state;\n    this.$stateParams = $stateParams;\n    this.$timeout = $timeout;\n    this.$translate = this.$filter('translate');\n    this.ConfigService = ConfigService;\n    this.NodeService = NodeService;\n    this.ProjectAssetService = ProjectAssetService;\n    this.ProjectService = ProjectService;\n    this.TeacherDataService = TeacherDataService;\n    this.UtilService = UtilService;\n    this.$translate = this.$filter('translate');\n    this.projectId = $stateParams.projectId;\n    this.nodeId = $stateParams.nodeId;\n    this.showCreateComponent = false;\n    this.showEditTransitions = false;\n    this.selectedComponent = null;\n    this.nodeCopy = null;\n    this.undoStack = [];\n    this.howToChooseAmongAvailablePathsOptions =\n        [null, 'random', 'workgroupId', 'firstAvailable', 'lastAvailable'];\n    this.whenToChoosePathOptions =\n        [null, 'enterNode', 'exitNode', 'scoreChanged', 'studentDataChanged'];\n    this.canChangePathOptions = [null, true, false];\n    this.createBranchBranches = [];\n    this.showComponents = true;\n    this.showStepButtons = true;\n    this.showComponentAuthoringViews = true;\n\n    // mapping from component id to whether the component checkbox is checked\n    this.componentsToChecked = {};\n\n    this.TeacherDataService.setCurrentNodeByNodeId(this.nodeId);\n\n    // the available constraint actions\n    this.constraintActions = [\n      {\n        value: \"\",\n        text: this.$translate('pleaseChooseAnAction')\n      },\n      {\n        value: \"makeAllNodesAfterThisNotVisitable\",\n        text: this.$translate('makeAllNodesAfterThisNotVisitable')\n      },\n      {\n        value: \"makeAllNodesAfterThisNotVisible\",\n        text: this.$translate('makeAllNodesAfterThisNotVisible')\n      },\n      {\n        value: \"makeAllOtherNodesNotVisitable\",\n        text: this.$translate('makeAllOtherNodesNotVisitable')\n      },\n      {\n        value: \"makeAllOtherNodesNotVisible\",\n        text: this.$translate('makeAllOtherNodesNotVisible')\n      },\n      {\n        value: \"makeThisNodeNotVisitable\",\n        text: this.$translate('makeThisNodeNotVisitable')\n      },\n      {\n        value: \"makeThisNodeNotVisible\",\n        text: this.$translate('makeThisNodeNotVisible')\n      }\n    ];\n\n    // the available removal conditionals\n    this.removalConditionals = [\n      {\n        value: \"all\",\n        text: this.$translate('all')\n      },\n      {\n        value: \"any\",\n        text: this.$translate('any')\n      }\n    ];\n\n    // the available removal criteria\n    this.removalCriteria = [\n      {\n        value: \"\",\n        text: this.$translate('pleaseChooseARemovalCriteria')\n      },\n      {\n        value: \"isCompleted\",\n        text: this.$translate('isCompleted'),\n        params: [\n          {\n            value: \"nodeId\",\n            text: this.$translate('step')\n          }\n        ]\n      },\n      {\n        value: \"score\",\n        text: this.$translate('SCORE'),\n        params: [\n          {\n            value: \"nodeId\",\n            text: this.$translate('step')\n          },\n          {\n            value: \"component\",\n            text: this.$translate('component')\n          },\n          {\n            value: \"scores\",\n            text: this.$translate('scoresParens')\n          }\n        ]\n      },\n      {\n        value: \"branchPathTaken\",\n        text: this.$translate('branchPathTaken'),\n        params: [\n          {\n            value: \"fromNodeId\",\n            text: this.$translate('fromStep')\n          },\n          {\n            value: \"toNodeId\",\n            text: this.$translate('toStep')\n          }\n        ]\n      },\n      {\n        value: \"choiceChosen\",\n        text: this.$translate('choiceChosen'),\n        params: [\n          {\n            value: \"nodeId\",\n            text: this.$translate('step')\n          },\n          {\n            value: \"componentId\",\n            text: this.$translate('component')\n          },\n          {\n            value: \"choiceIds\",\n            text: this.$translate('choices')\n          }\n        ]\n      },\n      {\n        value: \"isCorrect\",\n        text: this.$translate('IS_CORRECT'),\n        params: [\n          {\n            value: \"nodeId\",\n            text: this.$translate('step')\n          },\n          {\n            value: \"componentId\",\n            text: this.$translate('component')\n          }\n        ]\n      },\n      {\n        value: \"usedXSubmits\",\n        text: this.$translate('usedXSubmits'),\n        params: [\n          {\n            value: \"nodeId\",\n            text: this.$translate('step')\n          },\n          {\n            value: \"componentId\",\n            text: this.$translate('component')\n          },\n          {\n            value: \"requiredSubmitCount\",\n            text: this.$translate('requiredSubmitCount')\n          }\n        ]\n      },\n      {\n        value: \"isVisible\",\n        text: this.$translate('isVisible'),\n        params: [\n          {\n            value: \"nodeId\",\n            text: this.$translate('step')\n          }\n        ]\n      },\n      {\n        value: \"isVisitable\",\n        text: this.$translate('isVisitable'),\n        params: [\n          {\n            value: \"nodeId\",\n            text: this.$translate('step')\n          }\n        ]\n      },\n      {\n        value: \"isVisited\",\n        text: this.$translate('isVisited'),\n        params: [\n          {\n            value: \"nodeId\",\n            text: this.$translate('step')\n          }\n        ]\n      },\n      {\n        value: \"isPlanningActivityCompleted\",\n        text: this.$translate('isPlanningActivityCompleted')\n      },\n      {\n        value: \"wroteXNumberOfWords\",\n        text: this.$translate('wroteXNumberOfWords'),\n        params: [\n          {\n            value: \"nodeId\",\n            text: this.$translate('step')\n          },\n          {\n            value: \"componentId\",\n            text: this.$translate('component')\n          },\n          {\n            value: \"requiredNumberOfWords\",\n            text: this.$translate('requiredNumberOfWords')\n          }\n        ]\n      },\n      {\n        value: \"addXNumberOfNotesOnThisStep\",\n        text: this.$translate('addXNumberOfNotesOnThisStep'),\n        params: [\n          {\n            value: \"nodeId\",\n            text: this.$translate('step')\n          },\n          {\n            value: \"requiredNumberOfNotes\",\n            text: this.$translate('requiredNumberOfNotes')\n          }\n        ]\n      },\n      {\n        value: \"fillXNumberOfRows\",\n        text: this.$translate('fillXNumberOfRows'),\n        params: [\n          {\n            value: \"nodeId\",\n            text: this.$translate('step')\n          },\n          {\n            value: \"componentId\",\n            text: this.$translate('component')\n          },\n          {\n            value: \"requiredNumberOfFilledRows\",\n            defaultValue: null,\n            text: this.$translate('requiredNumberOfFilledRowsNotIncludingHeaderRow')\n          },\n          {\n            value: \"tableHasHeaderRow\",\n            defaultValue: true,\n            text: this.$translate('tableHasHeaderRow')\n          },\n          {\n            value: \"requireAllCellsInARowToBeFilled\",\n            defaultValue: true,\n            text: this.$translate('requireAllCellsInARowToBeFilled')\n          }\n        ]\n      }\n    ];\n\n    // available transitionCriterias\n    this.transitionCriterias = [\n      {\n        value: \"score\",\n        text: this.$translate('getASpecificScoreOnAComponent'),\n        params: [\n          {\n            value: \"nodeId\",\n            text: this.$translate('nodeID')\n          },\n          {\n            value: \"componentId\",\n            text: this.$translate('componentID')\n          },\n          {\n            value: \"scores\",\n            text: this.$translate('scoresParens')\n          }\n        ]\n      },\n      {\n        value: \"choiceChosen\",\n        text: this.$translate('chooseASpecificChoiceOnAComponent'),\n        params: [\n          {\n            value: \"nodeId\",\n            text: this.$translate('nodeID')\n          },\n          {\n            value: \"componentId\",\n            text: this.$translate('componentID')\n          },\n          {\n            value: \"choiceIds\",\n            text: this.$translate('choices')\n          }\n        ]\n      }\n    ];\n\n    this.branchCriteria = [\n      {\n        value: \"workgroupId\",\n        text: this.$translate('WORKGROUP_ID')\n      },\n      {\n        value: \"score\",\n        text: this.$translate('SCORE')\n      },\n      {\n        value: \"choiceChosen\",\n        text: this.$translate('choiceChosen')\n      },\n      {\n        value: \"random\",\n        text: this.$translate('random')\n      }\n    ];\n\n    // the array of component types that can be created\n    // TODO: automate by looping through active component types for this WISE instance\n    this.componentTypes = [\n      {componentType: 'Animation', componentName: this.UtilService.getComponentTypeLabel('Animation')},\n      {componentType: 'AudioOscillator', componentName: this.UtilService.getComponentTypeLabel('AudioOscillator')},\n      {componentType: 'ConceptMap', componentName: this.UtilService.getComponentTypeLabel('ConceptMap')},\n      {componentType: 'Discussion', componentName: this.UtilService.getComponentTypeLabel('Discussion')},\n      {componentType: 'Draw', componentName: this.UtilService.getComponentTypeLabel('Draw')},\n      {componentType: 'Embedded', componentName: this.UtilService.getComponentTypeLabel('Embedded')},\n      {componentType: 'Graph', componentName: this.UtilService.getComponentTypeLabel('Graph')},\n      {componentType: 'HTML', componentName: this.UtilService.getComponentTypeLabel('HTML')},\n      {componentType: 'Label', componentName: this.UtilService.getComponentTypeLabel('Label')},\n      {componentType: 'Match', componentName: this.UtilService.getComponentTypeLabel('Match')},\n      {componentType: 'MultipleChoice', componentName: this.UtilService.getComponentTypeLabel('MultipleChoice')},\n      {componentType: 'OpenResponse', componentName: this.UtilService.getComponentTypeLabel('OpenResponse')},\n      {componentType: 'OutsideURL', componentName: this.UtilService.getComponentTypeLabel('OutsideURL')},\n      {componentType: 'Summary', componentName: this.UtilService.getComponentTypeLabel('Summary')}, \n      {componentType: 'Table', componentName: this.UtilService.getComponentTypeLabel('Table')}\n    ];\n\n    // select the first component type by default\n    this.selectedComponent = this.componentTypes[0].componentType;\n    this.node = this.ProjectService.getNodeById(this.nodeId);\n\n    // get the step number e.g. 1.3\n    this.nodePosition = this.ProjectService.getNodePositionById(this.nodeId);\n\n    // get the components in the node\n    this.components = this.ProjectService.getComponentsByNodeId(this.nodeId);\n\n    /*\n     * remember a copy of the node at the beginning of this node authoring\n     * session in case we need to roll back if the user decides to\n     * cancel/revert all the changes.\n     */\n    this.originalNodeCopy = this.UtilService.makeCopyOfJSONObject(this.node);\n\n    /*\n     * remember the current version of the node. this will be updated each\n     * time the user makes a change.\n     */\n    this.currentNodeCopy = this.UtilService.makeCopyOfJSONObject(this.node);\n\n    // populate the branch authoring if any\n    this.populateBranchAuthoring();\n\n    // create the summernote rubric element id\n    this.summernoteRubricId = 'summernoteRubric_' + this.nodeId;\n\n    // the tooltip text for the insert WISE asset button\n    let insertAssetString = this.$translate('INSERT_ASSET');\n\n    /*\n     * create the custom button for inserting WISE assets into\n     * summernote\n     */\n    let insertAssetButton = this.UtilService.createInsertAssetButton(\n        this, null, this.nodeId, null, 'rubric', insertAssetString);\n\n    /*\n     * the options that specifies the tools to display in the\n     * summernote prompt\n     */\n    this.summernoteRubricOptions = {\n      toolbar: [\n        ['style', ['style']],\n        ['font', ['bold', 'underline', 'clear']],\n        ['fontname', ['fontname']],\n        ['fontsize', ['fontsize']],\n        ['color', ['color']],\n        ['para', ['ul', 'ol', 'paragraph']],\n        ['table', ['table']],\n        ['insert', ['link', 'video']],\n        ['view', ['fullscreen', 'codeview', 'help']],\n        ['customButton', ['insertAssetButton']]\n      ],\n      height: 300,\n      disableDragAndDrop: true,\n      buttons: {\n        insertAssetButton: insertAssetButton\n      }\n    };\n\n    /*\n     * inject the asset paths into the rubric html and set the summernote\n     * rubric html\n     */\n    this.summernoteRubricHTML =\n        this.ProjectService.replaceAssetPaths(this.node.rubric);\n\n    /*\n     * Listen for the assetSelected event which occurs when the user\n     * selects an asset from the choose asset popup\n     * TODO refactor too many nesting\n     */\n    this.$scope.$on('assetSelected', (event, args) => {\n      if (args != null) {\n        // make sure the event was fired for this component\n        if (args.nodeId == this.nodeId && args.componentId == null) {\n          // the asset was selected for this component\n          if (args.assetItem != null && args.assetItem.fileName != null) {\n            let fileName = args.assetItem.fileName;\n            /*\n             * get the assets directory path\n             * e.g.\n             * /wise/curriculum/3/\n             */\n            let assetsDirectoryPath =\n                this.ConfigService.getProjectAssetsDirectoryPath();\n            let fullAssetPath = assetsDirectoryPath + '/' + fileName;\n\n            if (args.target == 'rubric') {\n              // the target is the summernote rubric element\n              let summernoteId = 'summernoteRubric_' + this.nodeId;\n\n              if (this.UtilService.isImage(fileName)) {\n                /*\n                 * move the cursor back to its position when the asset chooser\n                 * popup was clicked\n                 */\n                $('#' + summernoteId).summernote('editor.restoreRange');\n                $('#' + summernoteId).summernote('editor.focus');\n\n                // add the image html\n                $('#' + summernoteId).summernote('insertImage', fullAssetPath, fileName);\n              } else if (this.UtilService.isVideo(fileName)) {\n                /*\n                 * move the cursor back to its position when the asset chooser\n                 * popup was clicked\n                 */\n                $('#' + summernoteId).summernote('editor.restoreRange');\n                $('#' + summernoteId).summernote('editor.focus');\n\n                // insert the video element\n                let videoElement = document.createElement('video');\n                videoElement.controls = 'true';\n                videoElement.innerHTML =\n                    '<source ng-src=\"' + fullAssetPath + '\" type=\"video/mp4\">';\n                $('#' + summernoteId).summernote('insertNode', videoElement);\n              }\n            }\n          }\n        }\n      }\n\n      // close the popup\n      this.$mdDialog.hide();\n    });\n\n    this.$scope.$on('componentShowSubmitButtonValueChanged', (event, args) => {\n      let showSubmitButton = args.showSubmitButton;\n      if (showSubmitButton) {\n        /*\n         * a component is showing their submit button so we will hide\n         * the step save button and submit buttons\n         */\n        this.node.showSaveButton = false;\n        this.node.showSubmitButton = false;\n\n        // turn on the save buttons for all components in this step\n        this.ProjectService.turnOnSaveButtonForAllComponents(this.node);\n      } else {\n        /*\n         * a component is hiding their submit button so we may need\n         * to show the step save button\n         */\n        if (this.ProjectService.doesAnyComponentInNodeShowSubmitButton(this.node.id)) {\n          /*\n           * there is at least one component in the step that is showing\n           * their submit button so we will show the save button on\n           * all the components\n           */\n\n          // turn on the save buttons for all components in this step\n          this.ProjectService.turnOnSaveButtonForAllComponents(this.node);\n        } else {\n          /*\n           * no components in this step show their submit button so we\n           * will show the step save button\n           */\n          this.node.showSaveButton = true;\n          this.node.showSubmitButton = false;\n\n          // turn off the save buttons for all the components\n          this.ProjectService.turnOffSaveButtonForAllComponents(this.node);\n        }\n      }\n\n      // save changes\n      this.authoringViewNodeChanged();\n    });\n\n    if (this.$state.current.name == 'root.project.nodeConstraints') {\n      this.$timeout(() => {\n        this.nodeAuthoringViewButtonClicked('advanced');\n        this.$timeout(() => {\n          this.nodeAuthoringViewButtonClicked('editConstraints');\n        });\n      });\n    }\n\n    if (this.$state.current.name == 'root.project.nodeEditPaths') {\n      this.$timeout(() => {\n        this.nodeAuthoringViewButtonClicked('advanced');\n        this.$timeout(() => {\n          this.nodeAuthoringViewButtonClicked('editTransitions');\n        });\n      });\n    }\n\n    this.scrollToTopOfPage();\n\n    let data = {\n      \"title\": this.ProjectService.getNodePositionAndTitleByNodeId(this.nodeId)\n    };\n\n    if (this.ProjectService.isGroupNode(this.nodeId)) {\n      this.saveEvent('activityViewOpened', 'Navigation', data);\n    } else {\n      this.saveEvent('stepViewOpened', 'Navigation', data);\n    }\n  }\n\n  /**\n   * Populate the branch authoring\n   * TODO refactor too much nesting\n   */\n  populateBranchAuthoring() {\n    if (this.node.transitionLogic != null) {\n      // clear the create branch branches so we can populate them again\n      this.createBranchBranches = [];\n\n      // get the number of branches\n      if (this.node.transitionLogic.transitions != null) {\n        this.createBranchNumberOfBranches = this.node.transitionLogic.transitions.length;\n      } else {\n        this.createBranchNumberOfBranches = 0;\n      }\n\n      for (let t = 0; t < this.node.transitionLogic.transitions.length; t++) {\n        let transition = this.node.transitionLogic.transitions[t];\n\n        if (transition != null) {\n\n          // create a branch object to hold all the related information for that branch\n          let branch = {};\n\n          // set the branch number for display purposes\n          branch.number = t + 1;\n\n          /*\n           * set the mapping of all the ids to order for use when choosing which items are\n           * in the branch path\n           */\n          branch.items = this.UtilService.makeCopyOfJSONObject(this.ProjectService.idToOrder);\n\n          // an array that will hold all the checked items in the branch path\n          branch.checkedItemsInBranchPath = [];\n\n          // set the transition into the branch so we can access it easily later\n          branch.transition = transition;\n\n          // add the branch to the array of branches\n          this.createBranchBranches.push(branch);\n\n          // get the transition criteria\n          let criteria = transition.criteria;\n\n          if (criteria != null) {\n            for (let criterion of criteria) {\n              if (criterion != null) {\n                let name = criterion.name;\n                let params = criterion.params;\n\n                if (params != null) {\n                  // get the node id and component id params if any\n                  this.createBranchNodeId = params.nodeId;\n                  this.createBranchComponentId = params.componentId;\n                }\n\n                if (name == 'score') {\n                  // this is a score criteria\n\n                  // set the branch criterion to score\n                  this.createBranchCriterion = 'score';\n\n                  if (params != null && params.scores != null) {\n                    // set the scores into the branch object\n                    branch.scores = params.scores;\n                  }\n                } else if (name == 'choiceChosen') {\n                  // this is a choice chosen criteria\n\n                  // set the branch criterion to choice chosen\n                  this.createBranchCriterion = 'choiceChosen';\n\n                  if (params != null && params.choiceIds != null && params.choiceIds.length > 0) {\n                    // set the choice id into the branch object\n                    branch.choiceId = params.choiceIds[0];\n                  }\n\n                  // get the choices from the component\n                  let choices = this.ProjectService.getChoicesByNodeIdAndComponentId(this.createBranchNodeId, this.createBranchComponentId);\n\n                  if (choices != null) {\n                    // set the choices into the branch object\n                    branch.choices = this.UtilService.makeCopyOfJSONObject(choices);\n                  }\n                }\n              }\n            }\n          }\n\n          // get the node ids in the branch path\n          let nodeIdsInBranch = this.ProjectService\n              .getNodeIdsInBranch(this.nodeId, transition.to);\n          for (let nodeId of nodeIdsInBranch) {\n            let item = branch.items[nodeId];\n            if (item != null) {\n              // make the item checked\n              item.checked = true;\n\n              // add the item to the array of checked items in this branch path\n              branch.checkedItemsInBranchPath.push(item);\n            }\n          }\n\n          // set the node ids in branch array into the branch object\n          branch.nodeIdsInBranch = nodeIdsInBranch;\n\n          if (nodeIdsInBranch.length > 0) {\n            // get the last node id in the branch path\n            let lastNodeIdInBranch = nodeIdsInBranch[nodeIdsInBranch.length - 1];\n\n            if (lastNodeIdInBranch != null) {\n              let transitionsFromLastNode = this.ProjectService\n                  .getTransitionsByFromNodeId(lastNodeIdInBranch);\n              if (transitionsFromLastNode != null &&\n                  transitionsFromLastNode.length > 0) {\n                let transition = transitionsFromLastNode[0];\n                if (transition != null) {\n                  this.createBranchMergePointNodeId = transition.to;\n                }\n              }\n            }\n          }\n        }\n      }\n\n      if (this.createBranchCriterion == null) {\n        /*\n         * we have not been able to determine the branch criterion yet\n         * so we will look at the howToChooseAmongAvailablePaths field\n         */\n        if (this.node.transitionLogic.howToChooseAmongAvailablePaths == 'workgroupId') {\n          // set the branch criterion to workgroup id\n          this.createBranchCriterion = 'workgroupId';\n        } else if (this.node.transitionLogic.howToChooseAmongAvailablePaths == 'random') {\n          // set the branch criterion to random\n          this.createBranchCriterion = 'random';\n        }\n      }\n    }\n  }\n\n  /**\n   * Launch VLE with this current step as the initial step\n   */\n  previewStepInNewWindow() {\n    let data = { \"constraints\": true };\n    this.saveEvent('stepPreviewed', 'Navigation', data);\n\n    let previewProjectURL = this.ConfigService.getConfigParam('previewProjectURL');\n    let previewStepURL  = previewProjectURL + '#/vle/' + this.nodeId;\n    window.open(previewStepURL);\n  };\n\n  /**\n   * Launch VLE with this current step as the initial step without constraints\n   */\n  previewStepWithoutConstraintsInNewWindow() {\n    let data = { \"constraints\": false };\n    this.saveEvent('stepPreviewed', 'Navigation', data);\n\n    let previewProjectURL = this.ConfigService.getConfigParam('previewProjectURL');\n    let previewStepURL  = previewProjectURL + '?constraints=false' + '#/vle/' + this.nodeId;\n    window.open(previewStepURL);\n  };\n\n  /**\n   * Close the node authoring view\n   */\n  close() {\n    this.$scope.$broadcast('exitNode', {nodeToExit: this.node});\n    this.TeacherDataService.setCurrentNode(null);\n    this.$state.go('root.project', {projectId: this.projectId});\n    this.scrollToTopOfPage();\n  };\n\n  /**\n   * Display an error saving during advanced authoring, most-likely due to malformed JSON\n   */\n  showSaveErrorAdvancedAuthoring() {\n    alert(this.$translate('saveErrorAdvancedAuthoring'));\n  }\n\n  /**\n   * The author has clicked the cancel button which will revert all\n   * the recent changes since they opened the node.\n   */\n  cancel() {\n    // check if the user has made any changes\n    if (!angular.equals(this.node, this.originalNodeCopy)) {\n      // the user has made changes\n      if (confirm(this.$translate('confirmUndo'))) {\n        // revert the node back to the previous version\n        this.ProjectService.replaceNode(this.nodeId, this.originalNodeCopy);\n        this.ProjectService.saveProject();\n        this.close();\n      }\n    } else {\n      // the user has not made any changes, so close the node authoring view\n      this.close();\n    }\n  }\n\n  /**\n   * Add a new transition for this node.\n   */\n  addNewTransition() {\n    if (this.node.transitionLogic.transitions == null) {\n      this.node.transitionLogic.transitions = [];\n    }\n    let nodeTransitions = this.node.transitionLogic.transitions;\n    if (nodeTransitions.length > 0) {\n      // If this node already has transitions, copy the last one.\n      let lastNodeTransition = nodeTransitions[nodeTransitions.length - 1];\n      let newTransition = {\n        \"to\": lastNodeTransition.to\n      };\n      nodeTransitions.push(newTransition);\n    } else {\n      // Otherwise set the new transition to the current nodeId\n      let newTransition = {\n        \"to\": this.nodeId\n      };\n      nodeTransitions.push(newTransition);\n    }\n\n    if (nodeTransitions.length > 1) {\n      /*\n       * there is more than one transition so we will set default values\n       * for the transition logic parameters if they haven't already been\n       * set\n       */\n      if (this.node.transitionLogic.howToChooseAmongAvailablePaths == null) {\n        this.node.transitionLogic.howToChooseAmongAvailablePaths = 'workgroupId';\n      }\n\n      if (this.node.transitionLogic.whenToChoosePath == null) {\n        this.node.transitionLogic.whenToChoosePath = 'enterNode';\n      }\n\n      if (this.node.transitionLogic.canChangePath == null) {\n        this.node.transitionLogic.canChangePath = false;\n      }\n\n      if (this.node.transitionLogic.maxPathsVisitable == null) {\n        this.node.transitionLogic.maxPathsVisitable = 1;\n      }\n    }\n    // save changes\n    this.authoringViewNodeChanged();\n  }\n\n  /**\n   * The transition to node id has changed so need to recalculate the step\n   * numbers\n   */\n  authoringViewTransitionToNodeIdChanged() {\n    /*\n     * update the node numbers now that a step has been added to a branch path\n     * e.g. if this is a branching step that is called\n     * 1.5 B View the Potential Energy\n     * then the node number is 1.5 B\n    */\n    this.ProjectService.calculateNodeNumbers();\n\n    // save changes\n    this.authoringViewNodeChanged();\n  }\n\n  /**\n   * Add a new transition criteria for the specified transition.\n   */\n  addNewTransitionCriteria(transition) {\n    let nodeTransitions = this.node.transitionLogic.transitions;\n    for (let nodeTransition of nodeTransitions) {\n      if (nodeTransition == transition) {\n        if (nodeTransition.criteria == null) {\n          nodeTransition.criteria = [];\n        }\n        let newTransitionCriteria = {\n          \"name\":\"\",\n          \"params\": {\n            \"nodeId\": \"\",\n            \"componentId\": \"\"\n          }\n        };\n        nodeTransition.criteria.push(newTransitionCriteria);\n      }\n    }\n    // save changes\n    this.authoringViewNodeChanged();\n  }\n\n  /**\n   * The transition criteria node id changed so we will update the params\n   * accordingly.\n   * @param transitionCriteria the transition criteria object that changed\n   */\n  transitionCriteriaNodeIdChanged(transitionCriteria) {\n    if (transitionCriteria!= null && transitionCriteria.params != null) {\n      // remember the node id\n      let nodeId = transitionCriteria.params.nodeId;\n\n      // clear the params\n      transitionCriteria.params = {};\n\n      if (nodeId != null) {\n        // set the node id back into the params\n        transitionCriteria.params.nodeId = nodeId;\n      }\n    }\n\n    // save the node\n    this.authoringViewNodeChanged();\n  }\n\n  /**\n   * The transition criteria component id changed so we will update the params\n   * accordingly.\n   * @param transitionCriteria the transition criteria object that changed\n   */\n  transitionCriteriaComponentIdChanged(transitionCriteria) {\n    if (transitionCriteria!= null && transitionCriteria.params != null) {\n      // remember the node id and component id\n      let nodeId = transitionCriteria.params.nodeId;\n      let componentId = transitionCriteria.params.componentId;\n\n      // clear the params\n      transitionCriteria.params = {};\n\n      if (nodeId != null) {\n        // set the node id back into the params\n        transitionCriteria.params.nodeId = nodeId;\n      }\n\n      if (componentId != null) {\n        // set the component id back into the params\n        transitionCriteria.params.componentId = componentId;\n      }\n    }\n\n    // save the node\n    this.authoringViewNodeChanged();\n  }\n\n  /**\n   * Deletes the specified transition from this node\n   * @param transition the transition to delete\n   */\n  deleteTransition(transition) {\n    let stepTitle = '';\n    if (transition != null) {\n      stepTitle = this.ProjectService.getNodePositionAndTitleByNodeId(transition.to);\n    }\n    let answer = confirm(this.$translate('areYouSureYouWantToDeleteThisPath', { stepTitle: stepTitle }));\n    if (answer) {\n      let nodeTransitions = this.node.transitionLogic.transitions;\n      let index = nodeTransitions.indexOf(transition);\n      if (index > -1) {\n        nodeTransitions.splice(index, 1);\n      }\n      if (nodeTransitions.length <= 1) {\n        /*\n         * there is zero or one transition so we will clear the parameters\n         * below since they only apply when there are multiple transitions\n         */\n        this.node.transitionLogic.howToChooseAmongAvailablePaths = null;\n        this.node.transitionLogic.whenToChoosePath = null;\n        this.node.transitionLogic.canChangePath = null;\n        this.node.transitionLogic.maxPathsVisitable = null;\n      }\n      // save changes\n      this.authoringViewNodeChanged();\n    }\n  }\n\n  /**\n   * Save transitions for this node\n   */\n  saveTransitions() {\n    this.ProjectService.saveProject();\n    this.showEditTransitions = false;\n  }\n\n  /**\n   * The add component button was clicked\n   */\n  addComponentButtonClicked() {\n    // select the first component type by default\n    this.selectedComponent = this.componentTypes[0].componentType;\n\n    // show the add component UI elements\n    this.nodeAuthoringViewButtonClicked('addComponent');\n\n    // turn on add component mode\n    this.turnOnAddComponentMode();\n\n    // turn on the move component mode\n    this.turnOffMoveComponentMode();\n\n    // turn on the insert component mode\n    this.turnOnInsertComponentMode();\n\n    // hide the component authoring\n    this.hideComponentAuthoring();\n  }\n\n  /**\n   * Delete the component from this node\n   * @param componentId the component id\n   */\n  deleteComponent(componentId) {\n    if (confirm(this.$translate('confirmDeleteComponent'))) {\n      // delete the component from the node\n      this.ProjectService.deleteComponent(this.nodeId, componentId);\n\n      // check if we need to show the node save or node submit buttons\n      this.checkIfNeedToShowNodeSaveOrNodeSubmitButtons();\n      this.ProjectService.saveProject();\n    }\n  }\n\n  /**\n   * Hide the save button in all the components\n   * TODO refactor too much nesting\n   */\n  hideAllComponentSaveButtons() {\n    let components = this.components;\n    if (components != null) {\n      for (let component of components) {\n        if (component != null) {\n          let componentType = component.type;\n\n          // get the service for the component type\n          let service = this.$injector.get(componentType + 'Service');\n          if (service != null) {\n            if (service.componentUsesSaveButton()) {\n              /*\n               * this component uses a save button so we will hide\n               * it\n               */\n              component.showSaveButton = false;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * The node has changed in the authoring view\n   * @param parseProject whether to parse the whole project to recalculate\n   * significant changes such as branch paths\n   */\n  authoringViewNodeChanged(parseProject) {\n    // put the previous version of the node on to the undo stack\n    this.undoStack.push(this.currentNodeCopy);\n\n    // update the current node copy\n    this.currentNodeCopy = this.UtilService.makeCopyOfJSONObject(this.node);\n\n    if (parseProject) {\n      // refresh the project\n      this.ProjectService.parseProject();\n      this.items = this.ProjectService.idToOrder;\n    }\n\n    return this.ProjectService.saveProject();\n  }\n\n  /**\n   * Undo the last change by reverting the node to the previous version\n   */\n  undo() {\n    if (this.undoStack.length === 0) {\n      // the undo stack is empty so there are no changes to undo\n      alert(this.$translate('noUndoAvailable'));\n    } else if (this.undoStack.length > 0) {\n      // the undo stack has elements\n\n      if (confirm(this.$translate('confirmUndoLastChange'))) {\n        // perform any node cleanup if necessary\n        this.$scope.$broadcast('exitNode', {nodeToExit: this.node});\n\n        // get the previous version of the node\n        let nodeCopy = this.undoStack.pop();\n\n        // revert the node back to the previous version\n        this.ProjectService.replaceNode(this.nodeId, nodeCopy);\n\n        this.node = this.ProjectService.getNodeById(this.nodeId);\n        this.components = this.ProjectService.getComponentsByNodeId(this.nodeId);\n        this.ProjectService.saveProject();\n      }\n\n    }\n  }\n\n  /**\n   * Get the removal criteria params for a removal criteria name\n   * @param name a removal criteria name e.g. 'isCompleted', 'score', 'branchPathTaken'\n   * @return the params for the given removal criteria name\n   */\n  getRemovalCriteriaParamsByName(name) {\n    let params = [];\n    if (name != null) {\n      for (let singleRemovalCriteria of this.removalCriteria) {\n        if (singleRemovalCriteria != null) {\n          if (singleRemovalCriteria.value == name) {\n            /*\n             * we have found the removal criteria we are looking for\n             * so we will get its params\n             */\n            params = singleRemovalCriteria.params;\n            break;\n          }\n        }\n      }\n    }\n    return params;\n  }\n\n  /**\n   * Get the transition criteria params for a transition criteria name\n   * @param name a transition criteria name e.g.  'score', 'choiceChosen'\n   * @return the params for the given transition criteria name\n   */\n  getTransitionCriteriaParamsByName(name) {\n    let params = [];\n    if (name != null) {\n      for (let singleTransitionCriteria of this.transitionCriterias) {\n        if (singleTransitionCriteria != null &&\n            singleTransitionCriteria.value == name) {\n          /*\n           * we have found the removal criteria we are looking for\n           * so we will get its params\n           */\n          params = singleTransitionCriteria.params;\n          break;\n        }\n      }\n    }\n    return params;\n  }\n\n  /**\n   * Get the choices of a component\n   * @param nodeId the node id\n   * @param componentId the component id\n   * @return the choices from the component\n   */\n  getChoicesByNodeIdAndComponentId(nodeId, componentId) {\n    return this.ProjectService.getChoicesByNodeIdAndComponentId(nodeId, componentId);\n  }\n\n  /**\n   * Get the choice type of a component\n   * @param nodeId the node id\n   * @param componentId the component id\n   * @return the choice type e.g. 'radio' or 'checkbox'\n   */\n  getChoiceTypeByNodeIdAndComponentId(nodeId, componentId) {\n    let choiceType = null;\n    let component = this.ProjectService\n        .getComponentByNodeIdAndComponentId(nodeId, componentId);\n    if (component != null && component.choiceType != null) {\n      choiceType = component.choiceType;\n    }\n    return choiceType;\n  }\n\n  /**\n   * Get the next available constraint id for a node\n   * @param nodeId the node id\n   * @return a constraint id that hasn't been used yet\n   */\n  getNewNodeConstraintId(nodeId) {\n    let newNodeConstraintId = null;\n    let usedConstraintIds = [];\n    let node = this.ProjectService.getNodeById(nodeId);\n    if (node != null && node.constraints != null) {\n      let nodeConstraints = node.constraints;\n      for (let constraint of nodeConstraints) {\n        if (constraint != null) {\n          let constraintId = constraint.id;\n          usedConstraintIds.push(constraintId);\n        }\n      }\n    }\n\n    // counter used for finding a constraint id that hasn't been used yet\n    let constraintCounter = 1;\n\n    // loop until we have found an unused constraint id\n    while (newNodeConstraintId == null) {\n      // create a potential constraint id\n      let potentialNewNodeConstraintId = nodeId + 'Constraint' + constraintCounter;\n\n      // check if the constraint id has been used already\n      if (usedConstraintIds.indexOf(potentialNewNodeConstraintId) == -1) {\n        // the constraint id has not been used so we can use it\n        newNodeConstraintId = potentialNewNodeConstraintId;\n      } else {\n        /*\n         * the constraint id has been used so we will increment the\n         * counter to try another contraint id\n         */\n        constraintCounter++;\n      }\n    }\n    return newNodeConstraintId;\n  }\n\n  /**\n   * Add a new constraint.\n   * @return The id of the DOM element associated with the constraint.\n   */\n  addConstraint() {\n    // get a new constraint id\n    let newNodeConstraintId = this.getNewNodeConstraintId(this.nodeId);\n\n    // create the constraint object\n    let constraint = {\n      \"id\": newNodeConstraintId,\n      \"action\": '',\n      \"targetId\": this.nodeId,\n      \"removalConditional\": 'any',\n      \"removalCriteria\": []\n    };\n\n    // create a removal criteria\n    let removalCriteria = {\n      \"name\": '',\n      \"params\": {}\n    };\n\n    // add the removal criteria to the constraint\n    constraint.removalCriteria.push(removalCriteria);\n\n    // create the constraints array if it does not exist\n    if (this.node.constraints == null) {\n      this.node.constraints = [];\n    }\n    this.node.constraints.push(constraint);\n    this.ProjectService.saveProject();\n\n    return newNodeConstraintId;\n  }\n\n  /**\n   * Add a new constraint and then scroll to the bottom of the screen because\n   * that's where the new constraint will appear.\n   */\n  addConstraintAndScrollToBottom() {\n    let newNodeConstraintId = this.addConstraint();\n    this.$timeout(() => {\n      this.$rootScope.$broadcast('scrollToBottom');\n      this.UtilService.temporarilyHighlightElement(newNodeConstraintId);\n    });\n  }\n\n  /**\n   * Delete a constraint\n   * @param constraintIndex delete the constraint at the index\n   */\n  deleteConstraint(constraintIndex) {\n    let answer = confirm(this.$translate('areYouSureYouWantToDeleteThisConstraint'));\n    if (answer) {\n      if (constraintIndex != null) {\n        let node = this.ProjectService.getNodeById(this.nodeId);\n        if (node != null) {\n          let constraints = node.constraints;\n          if (constraints != null) {\n            // remove the constraint at the given index\n            constraints.splice(constraintIndex, 1);\n          }\n        }\n      }\n      this.ProjectService.saveProject();\n    }\n  }\n\n  /**\n   * Add a removal criteria\n   * @param constraint add the removal criteria to this constraint\n   */\n  addRemovalCriteria(constraint) {\n    if (constraint != null) {\n      // create the removal criteria\n      let removalCriteria = {\n        \"name\": '',\n        \"params\": {}\n      };\n      // add the removal criteria to the constraint\n      constraint.removalCriteria.push(removalCriteria);\n    }\n    this.ProjectService.saveProject();\n  }\n\n  /**\n   * Delete a removal criteria from a constraint\n   * @param constraint remove the removal criteria from this constraint\n   * @param removalCriteriaIndex the index of the removal criteria to remove\n   */\n  deleteRemovalCriteria(constraint, removalCriteriaIndex) {\n    let answer = confirm(this.$translate('areYouSureYouWantToDeleteThisRemovalCriteria'));\n    if (answer) {\n      if (constraint != null) {\n        // get all the removal criteria\n        let removalCriteria = constraint.removalCriteria;\n        if (removalCriteria != null) {\n          // remove the single removal criteria\n          removalCriteria.splice(removalCriteriaIndex, 1);\n        }\n      }\n      this.ProjectService.saveProject();\n    }\n  }\n\n  /**\n   * Delete a transition criteria from a transition\n   * @param constraint remove the removal criteria from this constraint\n   * @param removalCriteriaIndex the index of the removal criteria to remove\n   */\n  deleteTransitionCriteria(transition, transitionCriteriaIndex) {\n    let answer = confirm(this.$translate('areYouSureYouWantToDeleteThisRequirement'));\n    if (answer) {\n      if (transition != null) {\n        // get all the transition criteria\n        let transitionCriterias = transition.criteria;\n        if (transitionCriterias != null) {\n          // remove the single transition criteria\n          transitionCriterias.splice(transitionCriteriaIndex, 1);\n        }\n      }\n      this.ProjectService.saveProject();\n    }\n  }\n\n  /**\n   * A removal criteria name has changed so we will clear the params so\n   * that the params from the previous removal criteria name do not persist\n   * TODO refactor too many nesting\n   */\n  removalCriteriaNameChanged(criteria) {\n    if (criteria != null) {\n      // clear the params\n      criteria.params = {};\n\n      // get the params for the given criteria name\n      let params = this.getRemovalCriteriaParamsByName(criteria.name);\n      if (params != null) {\n        for (let paramObject of params) {\n          if (paramObject != null) {\n            let value = paramObject.value;\n\n            if (paramObject.hasOwnProperty('defaultValue')) {\n              criteria.params[value] = paramObject.defaultValue;\n            } else {\n              criteria.params[value] = '';\n            }\n\n            if (value == 'nodeId') {\n              // default the node id param to this node\n              criteria.params[value] = this.nodeId;\n            }\n          }\n        }\n      }\n    }\n    this.authoringViewNodeChanged();\n  }\n\n  /**\n   * A removal criteria name has changed so we will clear the params so\n   * that the params from the previous removal criteria name do not persist.\n   * @param transitionCriteria the transition criteria object\n   */\n  transitionCriteriaNameChanged(transitionCriteria) {\n    if (transitionCriteria != null) {\n      let nodeId = null;\n      let componentId = null;\n\n      if (transitionCriteria.params != null) {\n        // remember the node id and component id\n        nodeId = transitionCriteria.params.nodeId;\n        componentId = transitionCriteria.params.componentId;\n      }\n\n      // clear the params\n      transitionCriteria.params = {};\n\n      if (nodeId != null) {\n        // set the node id back into the params\n        transitionCriteria.params.nodeId = nodeId;\n      }\n\n      if (componentId != null) {\n        // set the component id back into the params\n        transitionCriteria.params.componentId = componentId;\n      }\n    }\n    this.authoringViewNodeChanged();\n  }\n\n  /**\n   * A button to author a specific view of the node was clicked\n   * @param view the view name\n   */\n  nodeAuthoringViewButtonClicked(view) {\n    if (view == 'addComponent') {\n      // toggle the add component view and hide all the other views\n      this.showCreateComponent = !this.showCreateComponent;\n      this.showGeneralAdvanced = false;\n      this.showEditTransitions = false;\n      this.showConstraints = false;\n      this.showEditButtons = false;\n      this.showRubric = false;\n      this.showCreateBranch = false;\n      this.showAdvanced = false;\n      this.showImportView = false;\n      this.showStepButtons = true;\n      this.showComponents = true;\n      this.showJSON = false;\n      this.UtilService.hideJSONValidMessage();\n    } else if (view == 'generalAdvanced') {\n      // toggle the edit transitions view and hide all the other views\n      this.showCreateComponent = false;\n      this.showGeneralAdvanced = !this.showGeneralAdvanced;\n      this.showEditTransitions = false;\n      this.showConstraints = false;\n      this.showEditButtons = false;\n      this.showRubricButton = false;\n      this.showCreateBranch = false;\n      //this.showAdvanced = false;\n      this.showImportView = false;\n      this.showStepButtons = false;\n      this.showComponents = false;\n      this.showJSON = false;\n      this.UtilService.hideJSONValidMessage();\n    } else if (view == 'editTransitions') {\n      // toggle the edit transitions view and hide all the other views\n      this.showCreateComponent = false;\n      this.showGeneralAdvanced = false;\n      this.showEditTransitions = !this.showEditTransitions;\n      this.showConstraints = false;\n      this.showEditButtons = false;\n      this.showRubricButton = false;\n      this.showCreateBranch = false;\n      //this.showAdvanced = false;\n      this.showImportView = false;\n      this.showStepButtons = false;\n      this.showComponents = false;\n      this.showJSON = false;\n      this.UtilService.hideJSONValidMessage();\n    } else if (view == 'editConstraints') {\n      // toggle the edit constraints view and hide all the other views\n      this.showCreateComponent = false;\n      this.showGeneralAdvanced = false;\n      this.showEditTransitions = false;\n      this.showConstraints = !this.showConstraints;\n      this.showEditButtons = false;\n      this.showRubric = false;\n      this.showCreateBranch = false;\n      //this.showAdvanced = false;\n      this.showImportView = false;\n      this.showStepButtons = false;\n      this.showComponents = false;\n      this.showJSON = false;\n      this.UtilService.hideJSONValidMessage();\n    } else if (view == 'editButtons') {\n      // toggle the edit buttons view and hide all the other views\n      this.showCreateComponent = false;\n      this.showGeneralAdvanced = false;\n      this.showEditTransitions = false;\n      this.showConstraints = false;\n      this.showEditButtons = !this.showEditButtons;\n      this.showRubric = false;\n      this.showCreateBranch = false;\n      this.showAdvanced = false;\n      this.showImportView = false;\n      this.showStepButtons = false;\n      this.showJSON = false;\n      this.UtilService.hideJSONValidMessage();\n    } else if (view == 'editRubric') {\n      // toggle the edit buttons view and hide all the other views\n      this.showCreateComponent = false;\n      this.showGeneralAdvanced = false;\n      this.showEditTransitions = false;\n      this.showConstraints = false;\n      this.showEditButtons = false;\n      this.showRubric = !this.showRubric;\n      this.showCreateBranch = false;\n      this.showAdvanced = false;\n      this.showImportView = false;\n      this.showStepButtons = false;\n      this.showComponents = false;\n      this.showJSON = false;\n      this.UtilService.hideJSONValidMessage();\n    } else if (view == 'createBranch') {\n      // toggle the edit buttons view and hide all the other views\n      this.showCreateComponent = false;\n      this.showGeneralAdvanced = false;\n      this.showEditTransitions = false;\n      this.showConstraints = false;\n      this.showEditButtons = false;\n      this.showRubric = false;\n      this.showCreateBranch = !this.showCreateBranch;\n      //this.showAdvanced = false;\n      this.showImportView = false;\n      this.showStepButtons = false;\n      this.showComponents = false;\n      this.showJSON = false;\n      this.UtilService.hideJSONValidMessage();\n    } else if (view == 'previousNode') {\n      // hide all the other views\n      this.showCreateComponent = false;\n      this.showGeneralAdvanced = false;\n      this.showEditTransitions = false;\n      this.showConstraints = false;\n      this.showEditButtons = false;\n      this.showRubric = false;\n      this.showCreateBranch = false;\n      this.showAdvanced = false;\n      this.showImportView = false;\n      this.showJSON = false;\n      this.UtilService.hideJSONValidMessage();\n      let prevNodeId = this.ProjectService.getPreviousNodeId(this.nodeId);\n      if (prevNodeId != null) {\n        // there is a previous node id so we will go to it\n        this.$state.go('root.project.node', {projectId: this.projectId, nodeId:prevNodeId});\n      } else {\n        // there is no previous node id so we will display a message\n        let thereIsNoPreviousStep = this.$translate('thereIsNoPreviousStep');\n        alert(thereIsNoPreviousStep);\n      }\n    } else if (view == 'nextNode') {\n      // hide all the other views\n      this.showCreateComponent = false;\n      this.showGeneralAdvanced = false;\n      this.showEditTransitions = false;\n      this.showConstraints = false;\n      this.showEditButtons = false;\n      this.showRubric = false;\n      this.showCreateBranch = false;\n      this.showAdvanced = false;\n      this.showImportView = false;\n      this.showJSON = false;\n      this.UtilService.hideJSONValidMessage();\n      let nextNodeId = this.ProjectService.getNextNodeId(this.nodeId);\n      if (nextNodeId != null) {\n        // there is a next node id so we will go to it\n        this.$state.go('root.project.node', {projectId: this.projectId, nodeId:nextNodeId});\n      } else {\n        // there is no next node id so we will display a message\n        let thereIsNoNextStep = this.$translate('thereIsNoNextStep');\n        alert(thereIsNoNextStep);\n      }\n    } else if (view == 'advanced') {\n      // toggle the advanced view and hide all the other views\n      this.showCreateComponent = false;\n      this.showGeneralAdvanced = false;\n      this.showEditTransitions = false;\n      this.showConstraints = false;\n      this.showEditButtons = false;\n      this.showRubric = false;\n      this.showCreateBranch = false;\n      this.showAdvanced = !this.showAdvanced;\n      this.showImportView = false;\n      this.showStepButtons = false;\n      this.showComponents = false;\n      this.showJSON = false;\n      this.UtilService.hideJSONValidMessage();\n    } else if (view == 'copy') {\n      // toggle the copy view and hide all the other views\n      this.showCreateComponent = false;\n      this.showGeneralAdvanced = false;\n      this.showEditTransitions = false;\n      this.showConstraints = false;\n      this.showEditButtons = false;\n      this.showRubric = false;\n      this.showCreateBranch = false;\n      this.showAdvanced = false;\n      this.showImportView = false;\n      this.showStepButtons = true;\n      this.showComponents = true;\n      this.showJSON = false;\n      this.UtilService.hideJSONValidMessage();\n    } else if (view == 'move') {\n      // toggle the move view and hide all the other views\n      this.showCreateComponent = false;\n      this.showGeneralAdvanced = false;\n      this.showEditTransitions = false;\n      this.showConstraints = false;\n      this.showEditButtons = false;\n      this.showRubric = false;\n      this.showCreateBranch = false;\n      this.showAdvanced = false;\n      this.showImportView = false;\n      this.showStepButtons = true;\n      this.showComponents = true;\n      this.showJSON = false;\n      this.UtilService.hideJSONValidMessage();\n    } else if (view == 'import') {\n      // toggle the import view and hide all the other views\n      this.showCreateComponent = false;\n      this.showGeneralAdvanced = false;\n      this.showEditTransitions = false;\n      this.showConstraints = false;\n      this.showEditButtons = false;\n      this.showRubric = false;\n      this.showCreateBranch = false;\n      this.showAdvanced = false;\n      this.showImportView = !this.showImportView;\n      this.showStepButtons = false;\n      this.showComponents = true;\n      this.showJSON = false;\n      this.UtilService.hideJSONValidMessage();\n    } else if (view == 'showJSON') {\n      // toggle the import view and hide all the other views\n      this.showCreateComponent = false;\n      this.showGeneralAdvanced = false;\n      this.showEditTransitions = false;\n      this.showConstraints = false;\n      this.showEditButtons = false;\n      this.showRubric = false;\n      this.showCreateBranch = false;\n      //this.showAdvanced = false;\n      this.showImportView = false;\n      this.showStepButtons = false;\n      this.showComponents = false;\n      if (this.showJSON) {\n        // we were showing the JSON view and the author now wants to hide it\n        if (!this.isJSONValid()) {\n          if (confirm(this.$translate('jsonInvalidErrorMessage'))) {\n            // the author wants to revert back to the last valid JSON\n            this.toggleJSONAuthoringView();\n            this.UtilService.hideJSONValidMessage();\n          }\n        } else {\n          this.toggleJSONAuthoringView();\n          this.UtilService.hideJSONValidMessage();\n        }\n      } else {\n        // we were not showing the JSON view and now the author wants to show it\n        this.toggleJSONAuthoringView();\n        this.authoringNodeContentJSONString = angular.toJson(this.node, 4);\n        this.UtilService.showJSONValidMessage();\n      }\n    } else {\n      // hide all the views\n      this.showCreateComponent = false;\n      this.showGeneralAdvanced = false;\n      this.showEditTransitions = false;\n      this.showConstraints = false;\n      this.showEditButtons = false;\n      this.showRubric = false;\n      this.showCreateBranch = false;\n      this.showAdvanced = false;\n      this.showImportView = false;\n      this.showStepButtons = true;\n      this.showComponents = true;\n      this.showJSON = false;\n    }\n  }\n\n  isJSONValid() {\n    try {\n      angular.fromJson(this.authoringNodeContentJSONString);\n      return true;\n    } catch(e) {\n      return false;\n    }\n  }\n\n  toggleJSONAuthoringView() {\n    this.showJSON = !this.showJSON;\n  }\n\n  /**\n   * The author has changed the number of branch paths\n   * TODO refactor long function\n   */\n  createBranchNumberOfBranchesChanged() {\n    if (this.createBranchNumberOfBranches == 0) {\n      // the author has set the number of branch paths to 0 which is not allowed\n      alert(this.$translate('errorYouCantHave0BranchPaths'));\n\n      // revert the number of branch paths value\n      this.createBranchNumberOfBranches = this.createBranchBranches.length;\n    } else if (this.createBranchNumberOfBranches < this.createBranchBranches.length) {\n      /*\n       * the author is reducing the number of branches so we want to\n       * confirm they want to do so\n       */\n      let answer = confirm(this.$translate('areYouSureYouWantToReduceTheNumberOfBranchesToX', {createBranchNumberOfBranches:this.createBranchNumberOfBranches}));\n\n      if (answer) {\n        if (this.createBranchNumberOfBranches == 1) {\n          /*\n           * the author has removed all the branch paths so we will\n           * remove the branch\n           */\n          this.removeBranch();\n        } else {\n          /*\n           * the author is reducing the number of branch paths but\n           * not removing all of them\n           */\n          for (let bp = 0; bp < this.createBranchBranches.length; bp++) {\n            if (bp >= this.createBranchNumberOfBranches) {\n              // this is a branch we want to remove\n              let branch = this.createBranchBranches[bp];\n              this.removeBranchPath(branch);\n\n              /*\n               * decrement the counter back one because we have\n               * just removed a branch path\n               */\n              bp--;\n            }\n          }\n        }\n      } else {\n        // they answered no so we will revert the number of branches value\n        this.createBranchNumberOfBranches = this.createBranchBranches.length;\n      }\n    } else if (this.createBranchNumberOfBranches > this.createBranchBranches.length) {\n      // the author is increasing the number of branches\n      if (this.createBranchCriterion == null) {\n        /*\n         * we will default the branching to be based on workgroup id\n         * since that is what our researchers use most often\n         */\n        this.createBranchCriterion = 'workgroupId';\n        this.createBranchCriterionChanged();\n      }\n\n      // loop for the number of branches and create new branches objects\n      for (let b = 0; b < this.createBranchNumberOfBranches; b++) {\n        if (b >= this.createBranchBranches.length) {\n          /*\n           * we do not have a branch object for this branch number so\n           * we will create it\n           */\n\n          // create the branch object\n          let branch = {};\n\n          // set the branch number\n          branch.number = b + 1;\n\n          /*\n           * set the mapping of all the ids to order for use when choosing which items are\n           * in the branch path\n           */\n          branch.items = this.UtilService.makeCopyOfJSONObject(this.ProjectService.idToOrder);\n\n          // add the branch to the array of branches\n          this.createBranchBranches.push(branch);\n\n          // create a transition to represent the branch\n          let transition = {};\n\n          if (this.createBranchCriterion == 'score') {\n            // the branch is based on score\n\n            // create a score criterion\n            let criterion = {\n              \"name\": this.createBranchCriterion,\n              \"params\": {\n                \"scores\": []\n              }\n            };\n\n            if (this.createBranchNodeId != null) {\n              // set the node for which to look for the score\n              criterion.params.nodeId = this.createBranchNodeId;\n            }\n\n            if (this.createBranchComponentId != null) {\n              // set the component for which to look for the score\n              criterion.params.componentId = this.createBranchComponentId;\n            }\n\n            transition.criteria = [criterion];\n          } else if (this.createBranchCriterion == 'choiceChosen') {\n            // the branch is based on choice chosen\n            let criterion = {};\n            criterion.name = this.createBranchCriterion;\n            criterion.params = {};\n            criterion.params.choiceIds = [];\n\n            if (this.createBranchNodeId != null) {\n              // set the node for which to look for the score\n              criterion.params.nodeId = this.createBranchNodeId;\n            }\n\n            if (this.createBranchComponentId != null) {\n              // set the component for which to look for the score\n              criterion.params.componentId = this.createBranchComponentId;\n            }\n\n            transition.criteria = [criterion];\n          } else if (this.createBranchCriterion == 'workgroupId') {\n            // workgroup id branching does not require a transition criterion\n          } else if (this.createBranchCriterion == 'random') {\n            // random branching does not require a transition criterion\n          }\n\n          // add the transition\n          this.node.transitionLogic.transitions.push(transition);\n\n          // save a reference to the transition in the branch\n          branch.transition = transition;\n        }\n      }\n    }\n    this.authoringViewNodeChanged();\n  }\n\n  /**\n   * The branch criterion has changed\n   */\n  createBranchCriterionChanged() {\n    if (this.createBranchCriterion != null) {\n      let nodeId = this.node.id;\n      if (this.createBranchCriterion == 'workgroupId') {\n        // the branch is based on workgroup id\n        this.ProjectService.setTransitionLogicField(nodeId, 'howToChooseAmongAvailablePaths', 'workgroupId');\n        this.ProjectService.setTransitionLogicField(nodeId, 'whenToChoosePath', 'enterNode');\n        this.ProjectService.setTransitionLogicField(nodeId, 'canChangePath', false);\n        this.ProjectService.setTransitionLogicField(nodeId, 'maxPathsVisitable', 1);\n      } else if (this.createBranchCriterion == 'score') {\n        // the branch is based on score\n        this.ProjectService.setTransitionLogicField(nodeId, 'howToChooseAmongAvailablePaths', 'random');\n        this.ProjectService.setTransitionLogicField(nodeId, 'whenToChoosePath', 'studentDataChanged');\n        this.ProjectService.setTransitionLogicField(nodeId, 'canChangePath', false);\n        this.ProjectService.setTransitionLogicField(nodeId, 'maxPathsVisitable', 1);\n      } else if (this.createBranchCriterion == 'choiceChosen') {\n        // the branch is based on choice chosen\n        this.ProjectService.setTransitionLogicField(nodeId, 'howToChooseAmongAvailablePaths', 'random');\n        this.ProjectService.setTransitionLogicField(nodeId, 'whenToChoosePath', 'studentDataChanged');\n        this.ProjectService.setTransitionLogicField(nodeId, 'canChangePath', false);\n        this.ProjectService.setTransitionLogicField(nodeId, 'maxPathsVisitable', 1);\n      } else if (this.createBranchCriterion == 'random') {\n        // the branch is based on random assignment\n        this.ProjectService.setTransitionLogicField(nodeId, 'howToChooseAmongAvailablePaths', 'random');\n        this.ProjectService.setTransitionLogicField(nodeId, 'whenToChoosePath', 'enterNode');\n        this.ProjectService.setTransitionLogicField(nodeId, 'canChangePath', false);\n        this.ProjectService.setTransitionLogicField(nodeId, 'maxPathsVisitable', 1);\n      }\n    }\n\n    /*\n     * update the transitions so that they have the necessary parameter\n     * fields for the given branch criterion\n     */\n    this.createBranchUpdateTransitions();\n    this.authoringViewNodeChanged();\n  }\n\n  /**\n   * The create branch node id has changed\n   */\n  createBranchNodeIdChanged() {\n    this.createBranchComponentId = null;\n    let selectedNode = this.ProjectService.getNodeById(this.createBranchNodeId);\n    if (selectedNode != null) {\n      let components = selectedNode.components;\n      if (components != null) {\n        if (components.length == 1) {\n          /*\n           * there is only one component in the node so we will\n           * automatically select it in the drop down\n           */\n          let component = components[0];\n          this.createBranchComponentId = component.id;\n        }\n      }\n    }\n\n    /*\n     * update the transitions so that they have the necessary parameter\n     * fields for the given branch criterion\n     */\n    this.createBranchUpdateTransitions();\n\n    // save the project\n    this.authoringViewNodeChanged();\n  }\n\n  /**\n   * The create branch component id has changed\n   */\n  createBranchComponentIdChanged() {\n\n    /*\n     * update the transitions so that they have the necessary parameter\n     * fields for the given branch criterion\n     */\n    this.createBranchUpdateTransitions();\n\n    // save the project\n    this.authoringViewNodeChanged();\n  }\n\n  /**\n   * Update the transitions so that they have the necessary parameter\n   * fields for the given branch criterion\n   */\n  createBranchUpdateTransitions() {\n    for (let b = 0; b < this.createBranchBranches.length; b++) {\n      let branch = this.createBranchBranches[b];\n      if (branch != null) {\n        // get the transition corresponding to the branch\n        let transition = branch.transition;\n        if (transition != null) {\n          if (this.createBranchCriterion == 'choiceChosen') {\n            // we are branching based on choice chosen\n\n            // clear the criteria array\n            transition.criteria = [];\n\n            // create a new choice chosen criterion\n            let criterion = {\n              \"name\": 'choiceChosen',\n              \"params\": {\n                \"nodeId\": this.createBranchNodeId,\n                \"componentId\": this.createBranchComponentId,\n                \"choiceIds\": []\n              }\n            };\n\n            // add the criterion to the array of criteria\n            transition.criteria.push(criterion);\n\n            /*\n             * clear the choice id. we will set the choice id in\n             * the branch object when we call createBranchUpdateChoiceChosenIds()\n             */\n            branch.choiceId = null;\n\n            /*\n             * clear the scores since we don't need it in choice\n             * chosen branching\n             */\n            branch.scores = null;\n          } else if (this.createBranchCriterion == 'score') {\n            // we are branching based on score\n\n            // clear the criteria array\n            transition.criteria = [];\n\n            // create a new score criterion\n            let criterion = {\n              \"name\": 'score',\n              \"params\": {\n                \"nodeId\": this.createBranchNodeId,\n                \"componentId\": this.createBranchComponentId,\n                \"scores\": []\n              },\n            };\n\n            // re-use scores if available\n\n            // add the criterion to the array of criteria\n            transition.criteria.push(criterion);\n\n            /*\n             * clear the choice id since we don't need it in score\n             * branching\n             */\n            branch.choiceId = null;\n\n            // set the scores into the branch object\n            branch.scores = criterion.params.scores;\n          } else if (this.createBranchCriterion == 'workgroupId') {\n            // we are branching based on workgroup id\n\n            /*\n             * remove the criteria array since it is not used for\n             * branching based on workgroup id\n             */\n            delete transition['criteria'];\n\n            // clear the node id and component id\n            this.createBranchNodeId = null;\n            this.createBranchComponentId = null;\n\n            /*\n             * clear the choice id and scores fields since we don't\n             * need them in workgroup id branching\n             */\n            branch.choiceId = null;\n            branch.scores = null;\n          } else if (this.createBranchCriterion == 'random') {\n            // we are branching based on random assignment\n\n            /*\n             * remove the criteria array since it is not used for\n             * branching based on random assignment\n             */\n            delete transition['criteria'];\n\n            // clear the node id and component id\n            this.createBranchNodeId = null;\n            this.createBranchComponentId = null;\n\n            /*\n             * clear the choice id and scores fields since we don't\n             * need them in random branching\n             */\n            branch.choiceId = null;\n            branch.scores = null;\n          }\n        }\n      }\n    }\n\n    if (this.createBranchCriterion == 'choiceChosen') {\n      /*\n       * the branching is based on choice chosen so we will populate the\n       * choice ids\n       */\n      this.createBranchUpdateChoiceChosenIds();\n    }\n  }\n\n  /**\n   * Automatically populate the selected choices if the branch is based on\n   * choice chosen and the selected component is a multiple choice component\n   * TODO refactor too many nesting\n   */\n  createBranchUpdateChoiceChosenIds() {\n    let nodeId = this.createBranchNodeId;\n    let componentId = this.createBranchComponentId;\n    let component = this.ProjectService\n        .getComponentByNodeIdAndComponentId(nodeId, componentId);\n    if (component != null) {\n      if (component.type == 'MultipleChoice') {\n        // populate the drop down with the choices\n        this.createBranchUpdateChoiceChosenIdsHelper(component);\n      }\n    }\n  }\n\n  /**\n   * We are creating a branch that is based on which choice the student chooses\n   * in a multiple choice component. We will populate the drop down with the\n   * choices.\n   * @param component we are branching based on the choice chosen in this\n   * component\n   */\n  createBranchUpdateChoiceChosenIdsHelper(component) {\n    let nodeId = this.createBranchNodeId;\n    let componentId = this.createBranchComponentId;\n\n    // get the choices from the component\n    let choices = component.choices;\n\n    if (choices != null) {\n\n      // loop through all the choices\n      for (let c = 0; c < choices.length; c++) {\n        let choice = choices[c];\n        if (choice != null) {\n\n          // get the fields of the choice\n          let id = choice.id;\n          let text = choice.text;\n          let feedback = choice.feedback;\n          let isCorrect = choice.isCorrect;\n\n          // get the branch that corresponds to the choice\n          let branch = this.createBranchBranches[c];\n\n          if (branch != null) {\n            // get the choice for this branch\n            branch.choiceId = id;\n\n            // make a copy of the choices from the component\n            branch.choices = this.UtilService.makeCopyOfJSONObject(choices);\n\n            // get the transition corresponding to the branch\n            let transition = branch.transition;\n\n            if (transition != null) {\n\n              /*\n               * get the first transition criterion. we will assume\n               * there is only one transition criterion\n               */\n              let criterion = transition.criteria[0];\n\n              if (criterion != null) {\n\n                // get the params\n                let params = criterion.params;\n\n                if (params != null) {\n\n                  // set the node id and component id\n                  params.nodeId = nodeId;\n                  params.componentId = componentId;\n\n                  if (this.createBranchCriterion == 'choiceChosen') {\n                    // set the choice id\n                    params.choiceIds = [];\n                    params.choiceIds.push(id);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * A step was clicked in the create branch authoring view\n   * @param branch the branch path\n   * @param item the step that was clicked\n   * TODO refactor function too long\n   */\n  createBranchStepClicked(branch, item) {\n    // get all the steps in order\n    let orderedItems = this.$filter('orderBy')(this.$filter('toArray')(branch.items), 'order');\n\n    // an array that will hold the items that were checked\n    branch.checkedItemsInBranchPath = [];\n    let checkedItemsInBranchPath = branch.checkedItemsInBranchPath;\n\n    // an array that will hold the node ids that were checked\n    branch.nodeIdsInBranch = [];\n\n    // used to hold the previously checked node id\n    let previousCheckedNodeId = null;\n\n    // the node id after the node that was clicked\n    let nodeIdAfter = null;\n\n    /*\n     * loop through all the items in order and set the transitions so that\n     * the steps in a branch path transition to one after the other\n     */\n    for (var i = 0; i < orderedItems.length; i++) {\n      var orderedItem = orderedItems[i];\n      if (orderedItem != null && orderedItem.checked) {\n        if (previousCheckedNodeId != null) {\n          // make the previous node id point to the current item\n          let previousCheckedNode = this.ProjectService.getNodeById(previousCheckedNodeId);\n          if (previousCheckedNode != null) {\n            // get the transition logic\n            let transitionLogic = previousCheckedNode.transitionLogic;\n            if (transitionLogic != null) {\n              if (transitionLogic.transitions != null) {\n                // clear the transitions\n                transitionLogic.transitions = [];\n\n                // create a new transition object to the current item\n                let transition = {\n                  \"to\": orderedItem.$key\n                };\n                // add the transition\n                transitionLogic.transitions.push(transition);\n              }\n            }\n          }\n        }\n\n        // add the item to the checked items array\n        checkedItemsInBranchPath.push(orderedItem);\n\n        // add the node id to the array of node ids in the branch path\n        branch.nodeIdsInBranch.push(orderedItem.$key);\n\n        // remember the previously checked node id\n        previousCheckedNodeId = orderedItem.$key;\n      }\n\n      // get the previous ordered item (checked or unchecked)\n      let previousOrderedItem = orderedItems[i - 1];\n      if (previousOrderedItem != null) {\n        if (previousOrderedItem.$key == item.$key) {\n          /*\n           * the previous item was the node that was checked/unchecked\n           * so we will remember this item because it is the node\n           * that comes after the node that was checked/unchecked\n           */\n          nodeIdAfter = orderedItem.$key;\n        }\n      }\n    }\n\n    if (this.createBranchMergePointNodeId != null) {\n      /*\n       * the merge point is specified so we will make the last checked\n       * node in this branch path point to the merge point\n       */\n\n      /*\n       * this is the last node in the branch path so we will make it\n       * transition to the merge point\n       */\n      let node = this.ProjectService.getNodeById(previousCheckedNodeId);\n      if (node != null) {\n        let transitionLogic = node.transitionLogic;\n        if (transitionLogic != null) {\n          if (transitionLogic.transitions != null) {\n            // clear the transitions\n            transitionLogic.transitions = [];\n\n            // make a transition to the merge point\n            let transition = {};\n            transition.to = this.createBranchMergePointNodeId;\n\n            // add the transition\n            transitionLogic.transitions.push(transition);\n          }\n        }\n      }\n    }\n\n    // get the branch number\n    let branchNumber = branch.number;\n\n    // get the node id that was clicked\n    let nodeId = item.$key;\n\n    // get the transition that corresponds to the branch\n    let transition = this.node.transitionLogic.transitions[branchNumber - 1];\n\n    let firstNodeId = null;\n\n    /*\n     * update the branch point transition in case the first step in the\n     * branch path has changed\n     */\n    if (transition != null) {\n\n      if (checkedItemsInBranchPath.length == 0) {\n        // there are no steps in the path\n        transition.to = null;\n      } else {\n        // get the first step in the path\n        let firstCheckedItem = checkedItemsInBranchPath[0];\n\n        if (firstCheckedItem != null) {\n          // set the branch point transition to the first step in the path\n          firstNodeId = firstCheckedItem.$key;\n          transition.to = firstNodeId;\n        }\n      }\n    }\n\n    // get the node that was clicked\n    let node = this.ProjectService.getNodeById(nodeId);\n\n    if (node != null) {\n      this.ProjectService.removeBranchPathTakenNodeConstraintsIfAny(nodeId);\n\n      if (item.checked) {\n        // the item was checked so we will add the branch path taken constraints to it\n\n        /*\n         * the branch path taken constraints will be from this node to\n         * the first node in the branch path\n         */\n        let fromNodeId = this.nodeId;\n        let toNodeId = firstNodeId;\n\n        // add the branch path taken constraints\n        this.ProjectService.addBranchPathTakenConstraints(nodeId, fromNodeId, toNodeId);\n      } else {\n        /*\n         * the item was unchecked so we will change its transition to\n         * point to the node that comes right after it\n         */\n        this.ProjectService.setTransition(nodeId, nodeIdAfter);\n      }\n    }\n\n    /*\n     * update the constraints of other steps in the branch path if necessary.\n     * loop through all theh checked items in the path\n     */\n    for (let item of checkedItemsInBranchPath) {\n      let itemNodeId = item.$key;\n      this.ProjectService.removeBranchPathTakenNodeConstraintsIfAny(itemNodeId);\n\n      /*\n       * the branch path taken constraints will be from this node to\n       * the first node in the branch path\n       */\n      let fromNodeId = this.nodeId;\n      let toNodeId = firstNodeId;\n\n      // add the branch path taken constraints\n      this.ProjectService.addBranchPathTakenConstraints(itemNodeId, fromNodeId, toNodeId);\n    }\n\n    /*\n     * update the node numbers now that a step has been added to a branch path\n     * e.g. if this is a branching step that is called\n     * 1.5 B View the Potential Energy\n     * then the node number is 1.5 B\n     */\n    this.ProjectService.calculateNodeNumbers();\n    this.authoringViewNodeChanged();\n  }\n\n  /**\n   * The score for a path has changed in the branch authoring\n   * @param branch the branch for which the score has changed\n   * TODO refactor too many nesting\n   */\n  createBranchScoreChanged(branch) {\n    if (branch != null) {\n      let transition = branch.transition;\n      if (transition != null) {\n        let scores = branch.scores;\n        if (scores != null) {\n          let criteria = transition.criteria;\n          if (criteria != null) {\n            // get the first criteria. we will assume there is only one criteria\n            let criterion = criteria[0];\n            if (criterion != null) {\n              // get the params of the criterion\n              let params = criterion.params;\n              if (params != null) {\n                // update the scores into the params\n                params.scores = scores;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    // save the project\n    this.authoringViewNodeChanged();\n  }\n\n  /**\n   * The merge point has changed in the branch authoring\n   * TODO refactor too many nesting\n   */\n  createBranchMergePointNodeIdChanged() {\n    // get the merge point node id\n    let createBranchMergePointNodeId = this.createBranchMergePointNodeId;\n    let branches = this.createBranchBranches;\n    for (let branch of branches) {\n      if (branch != null) {\n        // get the node ids in the branch path\n        let nodeIdsInBranch = branch.nodeIdsInBranch;\n        if (nodeIdsInBranch != null && nodeIdsInBranch.length > 0) {\n          // get the last node id in the branch path\n          let lastNodeIdInBranchPath = nodeIdsInBranch[nodeIdsInBranch.length - 1];\n          if (lastNodeIdInBranchPath != null) {\n            // get the last node in the branch path\n            let lastNodeInBranchPath =\n                this.ProjectService.getNodeById(lastNodeIdInBranchPath);\n            if (lastNodeInBranchPath != null) {\n              // get the transition logic of the last node\n              let transitionLogic = lastNodeInBranchPath.transitionLogic;\n              if (transitionLogic != null) {\n                if (transitionLogic.transitions != null) {\n                  // clear the transitions\n                  transitionLogic.transitions = [];\n\n                  // make a new transition to the merge point\n                  let transition = {\n                    \"to\": createBranchMergePointNodeId\n                  };\n                  // add the transition\n                  transitionLogic.transitions.push(transition);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    /*\n     * calculate the node numbers\n     * e.g. if the step is called\n     * 1.5 View the Potential Energy\n     * then the node number is 1.5\n     */\n    this.ProjectService.calculateNodeNumbers();\n\n    // save the project\n    let parseProject = true;\n    this.authoringViewNodeChanged(parseProject);\n  }\n\n  /**\n   * Remove the branch after confirming with the user\n   */\n  removeBranchButtonClicked() {\n    if (confirm(this.$translate('areYouSureYouWantToRemoveTheBranch'))) {\n      this.removeBranch();\n    }\n  }\n\n  /**\n   * Remove the branch from the step by removing all the branch paths\n   */\n  removeBranch() {\n    for (let bp = 0; bp < this.createBranchBranches.length; bp++) {\n      // remove a branch path\n      let branchPath = this.createBranchBranches[bp];\n      this.removeBranchPath(branchPath);\n\n      /*\n       * shift the counter back one because we have just removed a branch\n       * path\n       */\n      bp--;\n    }\n\n    // get the node id of this node (which is the branch point)\n    let nodeId = this.node.id;\n\n    // get the node id that comes after this node\n    let nodeIdAfter = this.ProjectService.getNodeIdAfter(nodeId);\n\n    /*\n     * update the transition of this step to point to the next step\n     * in the project. this may be different than the next step\n     * if it was still the branch point.\n     */\n    this.ProjectService.setTransition(nodeId, nodeIdAfter);\n\n    // clear the transition logic fields\n    this.ProjectService.setTransitionLogicField(nodeId, 'howToChooseAmongAvailablePaths', null);\n    this.ProjectService.setTransitionLogicField(nodeId, 'whenToChoosePath', null);\n    this.ProjectService.setTransitionLogicField(nodeId, 'canChangePath', null);\n    this.ProjectService.setTransitionLogicField(nodeId, 'maxPathsVisitable', null);\n\n    // clear the branch authoring fields\n    this.createBranchNumberOfBranches = 1;\n    this.createBranchCriterion = null;\n    this.createBranchNodeId = null;\n    this.createBranchComponentId = null;\n    this.createBranchMergePointNodeId = null;\n\n    /*\n     * branch paths are determined by the transitions. since there is now\n     * just one transition, we will create a single branch object to\n     * represent it.\n     */\n\n    // create a branch object to hold all the related information for that branch\n    let branch = {};\n\n    // set the branch number for display purposes\n    branch.number = 1;\n\n    /*\n     * set the mapping of all the ids to order for use when choosing which items are\n     * in the branch path\n     */\n    branch.items = this.UtilService.makeCopyOfJSONObject(this.ProjectService.idToOrder);\n\n    // an array that will hold all the checked items in the branch path\n    branch.checkedItemsInBranchPath = [];\n\n    let transition = null;\n\n    // get the transition from the node\n    let transitions = this.ProjectService.getTransitionsByFromNodeId(nodeId);\n\n    if (transitions != null && transitions.length > 0) {\n      transition = transitions[0];\n    }\n\n    // set the transition into the branch so we can access it easily later\n    branch.transition = transition;\n\n    // add the branch to the array of branches\n    this.createBranchBranches.push(branch);\n\n    /*\n     * calculate the node numbers\n     * e.g. if the step is called\n     * 1.5 View the Potential Energy\n     * then the node number is 1.5\n     */\n    this.ProjectService.calculateNodeNumbers();\n\n    // save the project\n    let parseProject = true;\n    this.authoringViewNodeChanged(parseProject);\n  }\n\n  /**\n   * Remove a branch path by removing all the branch path taken constraints\n   * from the steps in the branch path, resetting the transitions in the\n   * steps in the branch path, and removing the transition corresponding to\n   * the branch path in this branch point node.\n   * @param branch the branch object\n   */\n  removeBranchPath(branch) {\n    if (branch != null) {\n      // get the checked items in the branch path\n      let checkedItemsInBranchPath = branch.checkedItemsInBranchPath;\n      if (checkedItemsInBranchPath != null) {\n        for (let checkedItem of checkedItemsInBranchPath) {\n          if (checkedItem != null) {\n            // get the node id of the checked item\n            let nodeId = checkedItem.$key;\n            this.ProjectService.removeBranchPathTakenNodeConstraintsIfAny(nodeId);\n\n            /*\n             * update the transition of the step to point to the next step\n             * in the project. this may be different than the next step\n             * if it was still in the branch path.\n             */\n            let nodeIdAfter = this.ProjectService.getNodeIdAfter(nodeId);\n            this.ProjectService.setTransition(nodeId, nodeIdAfter);\n          }\n        }\n      }\n      // get the index of the branch path\n      let branchPathIndex = this.createBranchBranches.indexOf(branch);\n\n      // remove the branch path\n      this.createBranchBranches.splice(branchPathIndex, 1);\n\n      // remove the transition that corresponds to the branch path\n      this.node.transitionLogic.transitions.splice(branchPathIndex, 1);\n    }\n  }\n\n  /**\n   * The author has changed the step rubric\n   */\n  summernoteRubricHTMLChanged() {\n    // get the summernote rubric html\n    let html = this.summernoteRubricHTML;\n\n    /*\n     * remove the absolute asset paths\n     * e.g.\n     * <img src='https://wise.berkeley.edu/curriculum/3/assets/sun.png'/>\n     * will be changed to\n     * <img src='sun.png'/>\n     */\n    html = this.ConfigService.removeAbsoluteAssetPaths(html);\n\n    /*\n     * replace <a> and <button> elements with <wiselink> elements when\n     * applicable\n     */\n    html = this.UtilService.insertWISELinks(html);\n\n    // update the step rubric\n    this.node.rubric = html;\n\n    // save the project\n    this.authoringViewNodeChanged();\n  }\n\n  /**\n   * Show the component authoring views\n   */\n  showComponentAuthoring() {\n    this.showComponentAuthoringViews = true;\n  }\n\n  /**\n   * Hide the component authoring views so that the auther only sees\n   * the component numbers and component names\n   */\n  hideComponentAuthoring() {\n    this.showComponentAuthoringViews = false;\n  }\n\n  /**\n   * Show the insert buttons. This is used when choosing where to insert a\n   * component.\n   */\n  turnOnInsertComponentMode() {\n    this.insertComponentMode = true;\n  }\n\n  /**\n   * Hide the insert buttons.\n   */\n  turnOffInsertComponentMode() {\n    this.insertComponentMode = false;\n  }\n\n  /**\n   * Turn on the add component mode\n   */\n  turnOnAddComponentMode() {\n    this.addComponentMode = true;\n  }\n\n  /**\n   * Turn off the add component mode\n   */\n  turnOffAddComponentMode() {\n    this.addComponentMode = false;\n  }\n\n  /**\n   * Turn on the move component mode\n   */\n  turnOnMoveComponentMode() {\n    this.moveComponentMode = true;\n  }\n\n  /**\n   * Turn off the move component mode\n   */\n  turnOffMoveComponentMode() {\n    this.moveComponentMode = false;\n  }\n\n  /**\n   * Turn on the copy component mode\n   */\n  turnOnCopyComponentMode() {\n    this.copyComponentMode = true;\n  }\n\n  /**\n   * Turn off the copy component mode\n   */\n  turnOffCopyComponentMode() {\n    this.copyComponentMode = false;\n  }\n\n  /**\n   * Turn on the import component mode\n   */\n  turnOnImportComponentMode() {\n    this.importComponentMode = true;\n  }\n\n  /**\n   * Turn off the import component mode\n   */\n  turnOffImportComponentMode() {\n    this.importComponentMode = false;\n  }\n\n  /**\n   * Get the components that have been selected\n   * @return an array of component ids that have been selected\n   */\n  getSelectedComponentIds() {\n    let selectedComponents = [];\n    if (this.components != null) {\n      for (let component of this.components) {\n        if (component != null && component.id != null) {\n          // see if the component is checked\n          let checked = this.componentsToChecked[component.id];\n          if (checked) {\n            selectedComponents.push(component.id);\n          }\n        }\n      }\n    }\n    return selectedComponents;\n  }\n\n  /**\n   * Uncheck all the components\n   */\n  clearComponentsToChecked() {\n    /*\n     * clear the components to checked mappings so that all the component\n     * checkboxes are no longer checked\n     */\n    this.componentsToChecked = {};\n  }\n\n  /**\n   * Get the component numbers and component types that have been selected\n   * @return an array of strings\n   * example\n   * [\n   *   \"1. OpenResponse\",\n   *   \"3. MultipleChoice\"\n   * ]\n   */\n  getSelectedComponentNumbersAndTypes(componentIds) {\n    let selectedComponents = [];\n    if (this.components != null) {\n      for (let c = 0; c < this.components.length; c++) {\n        let component = this.components[c];\n        if (component != null && component.id != null) {\n          // see if the component is checked\n          let checked = this.componentsToChecked[component.id];\n          if (checked) {\n            // get the component number and type example \"1. OpenResponse\"\n            let componentNumberAndType = (c + 1) + '. ' + component.type;\n\n            // the component is checked\n            selectedComponents.push(componentNumberAndType);\n          }\n        }\n      }\n    }\n    return selectedComponents;\n  }\n\n  /**\n   * The import button was clicked to turn on the import view\n   */\n  importButtonClicked() {\n    // clear all the import project values\n    this.importProjectIdToOrder = {};\n    this.importProjectItems = [];\n    this.importMyProjectId = null;\n    this.importLibraryProjectId = null;\n    this.importProjectId = null;\n    this.importProject = null;\n\n    // hide the other views\n    this.nodeAuthoringViewButtonClicked('import');\n\n    if (this.showImportView) {\n      // turn on import mode\n      this.turnOnImportComponentMode();\n\n      if (this.myProjectsList == null) {\n        // populate the authorable projects drop down\n        this.myProjectsList = this.ConfigService.getAuthorableProjects();\n      }\n\n      if (this.libraryProjectsList == null) {\n        // populate the library projects drop down\n        this.ConfigService.getLibraryProjects().then((libraryProjectsList) => {\n          this.libraryProjectsList = libraryProjectsList;\n        });\n      }\n    }\n  }\n\n  /**\n   * The move component button was clicked\n   */\n  moveButtonClicked() {\n    if (this.getSelectedComponentIds().length == 0) {\n      alert(this.$translate('pleaseSelectAComponentToMoveAndThenClickTheMoveButtonAgain'));\n    } else {\n      // hide the other views\n      this.nodeAuthoringViewButtonClicked('move');\n\n      // turn off add component mode\n      this.turnOffAddComponentMode();\n\n      // turn on the move component mode\n      this.turnOnMoveComponentMode();\n\n      // turn on the insert component mode\n      this.turnOnInsertComponentMode()\n\n      // hide the component authoring\n      this.hideComponentAuthoring();\n    }\n  }\n\n  /**\n   * The copy component button was clicked\n   */\n  copyButtonClicked() {\n    if (this.getSelectedComponentIds().length == 0) {\n      alert(this.$translate('pleaseSelectAComponentToCopyAndThenClickTheCopyButtonAgain'));\n    } else {\n      // hide the other views\n      this.nodeAuthoringViewButtonClicked('copy');\n\n      // turn on the move component mode\n      this.turnOnCopyComponentMode();\n\n      // turn on the insert component mode\n      this.turnOnInsertComponentMode();\n\n      // hide the component authoring views\n      this.hideComponentAuthoring();\n    }\n  }\n\n  /**\n   * The delete button was clicked\n   * TODO refactor too many nesting\n   */\n  deleteButtonClicked() {\n    if (this.getSelectedComponentIds().length == 0) {\n      alert(this.$translate('pleaseSelectAComponentToDeleteAndThenClickTheDeleteButtonAgain'));\n    } else {\n      this.scrollToTopOfPage();\n\n      /*\n       * hide all the component authoring so that the author only sees the\n       * component numbers and component types\n       */\n      this.hideComponentAuthoring();\n\n      /*\n       * Use a timeout to allow the effects of hideComponentAuthoring() to\n       * take effect. If we don't use a timeout, the user won't see any change\n       * in the UI.\n       */\n      this.$timeout(() => {\n        let confirmMessage = '';\n\n        // get the selected component numbers and types\n        let selectedComponentNumbersAndTypes = this.getSelectedComponentNumbersAndTypes();\n\n        if (selectedComponentNumbersAndTypes.length == 1) {\n          // there is one selected component\n          confirmMessage = this.$translate('areYouSureYouWantToDeleteThisComponent');\n        } else if (selectedComponentNumbersAndTypes.length > 1) {\n          // there are multiple selected components\n          confirmMessage = this.$translate('areYouSureYouWantToDeleteTheseComponents');\n        }\n\n        // loop through all the selected components\n        for (let c = 0; c < selectedComponentNumbersAndTypes.length; c++) {\n\n          // get a component number and type\n          let selectedComponentNumberAndType = selectedComponentNumbersAndTypes[c];\n\n          // show the component number and type in the message\n          confirmMessage += '\\n' + selectedComponentNumberAndType;\n        }\n\n        // ask the user if they are sure they want to delete\n        if (confirm(confirmMessage)) {\n          let selectedComponents = this.getSelectedComponentIds();\n\n          // data saved in the component deleted event\n          let data = {\n            \"componentsDeleted\": this.getComponentObjectsForEventData(selectedComponents)\n          };\n\n          /*\n           * loop through all the selected component ids and delete the\n           * components\n           */\n          for (let componentId of selectedComponents) {\n            this.ProjectService.deleteComponent(this.nodeId, componentId);\n          }\n\n          this.saveEvent('componentDeleted', 'Authoring', data);\n\n          // check if we need to show the node save or node submit buttons\n          this.checkIfNeedToShowNodeSaveOrNodeSubmitButtons();\n\n          this.ProjectService.saveProject();\n        } else {\n          // uncheck the component check boxes\n          this.clearComponentsToChecked();\n        }\n\n        /*\n         * Wait a small amount of time before returning the UI back to the\n         * normal view. This allows the author to see the component number\n         * and type view a little longer so that they can see the change\n         * they just made before we switch back to the normal view.\n         */\n        this.$timeout(() => {\n          // turn off the insert component mode\n          this.turnOffInsertComponentMode();\n\n          // uncheck the component check boxes\n          this.clearComponentsToChecked();\n\n          // show the component authoring\n          this.showComponentAuthoring();\n        }, 2000);\n      });\n    }\n  }\n\n  /**\n   * The cancel insert button was clicked\n   */\n  cancelInsertClicked() {\n    // hide all the authoring views\n    this.nodeAuthoringViewButtonClicked();\n\n    this.turnOffAddComponentMode();\n    this.turnOffMoveComponentMode();\n    this.turnOffInsertComponentMode();\n    this.clearComponentsToChecked();\n    this.showComponentAuthoring();\n  }\n\n  /**\n   * Check if we need to show the node save or node submit buttons\n   */\n  checkIfNeedToShowNodeSaveOrNodeSubmitButtons() {\n    if (this.ProjectService.doesAnyComponentInNodeShowSubmitButton(this.nodeId)) {\n      /*\n       * there is a component in this step that is showing their\n       * submit button\n       */\n    } else {\n      /*\n       * there is no component in this step that is showing their\n       * submit button\n       */\n\n      if (this.ProjectService.doesAnyComponentHaveWork(this.nodeId)) {\n        /*\n         * there is a component that generates work so we will show\n         * the step save button\n         */\n        this.node.showSaveButton = true;\n        this.node.showSubmitButton = false;\n\n        // hide the save button in all the components\n        this.hideAllComponentSaveButtons();\n      } else {\n        /*\n         * there are no components in the step that generates work\n         * so we will not show the step save button\n         */\n        this.node.showSaveButton = false;\n        this.node.showSubmitButton = false;\n      }\n    }\n  }\n\n  /**\n   * Insert the component so it becomes the first component in the step\n   */\n  insertComponentAsFirst() {\n    if (this.addComponentMode) {\n      this.handleAddComponent();\n    } else if (this.moveComponentMode) {\n      this.handleMoveComponent();\n    } else if (this.copyComponentMode) {\n      this.handleCopyComponent();\n    } else if (this.importComponentMode) {\n      this.handleImportComponent();\n    }\n  }\n\n  /**\n   * Insert the component after the given component id.\n   * @param componentId insert the component after this given component id\n   */\n  insertComponentAfter(componentId) {\n    if (this.addComponentMode) {\n      this.handleAddComponent(componentId);\n    } else if (this.moveComponentMode) {\n      this.handleMoveComponent(componentId);\n    } else if (this.copyComponentMode) {\n      this.handleCopyComponent(componentId);\n    } else if (this.importComponentMode) {\n      this.handleImportComponent(componentId);\n    }\n  }\n\n  /**\n   * Add components to this step.\n   * @param componentId (optional) Add the components after this component id.\n   * If the componentId is not provided, we will put the components at the\n   * beginning of the step.\n   */\n  handleAddComponent(componentId) {\n    let newComponents = [];\n    // create a component and add it to this node\n    let newComponent = this.ProjectService\n        .createComponent(this.nodeId, this.selectedComponent, componentId);\n\n    let data = {\n      \"componentId\": newComponent.id,\n      \"componentType\": newComponent.type\n    };\n    this.saveEvent('componentCreated', 'Authoring', data);\n    newComponents.push(newComponent);\n    this.turnOffAddComponentMode();\n    this.ProjectService.saveProject();\n    this.highlightNewComponentsAndThenShowComponentAuthoring(newComponents);\n  }\n\n  /**\n   * Move components in this step.\n   * @param componentId (optional) Put the moved components after this component\n   * id. If the componentId is not provided, we will put the components at the\n   * beginning of the step.\n   */\n  handleMoveComponent(componentId) {\n    let newComponents = [];\n    let selectedComponentIds = this.getSelectedComponentIds();\n    if (selectedComponentIds != null && selectedComponentIds.indexOf(componentId) != -1) {\n      /*\n       * the author is trying to move a component and place it after\n       * itself which we will not allow\n       */\n      if (selectedComponentIds.length == 1) {\n        alert(this.$translate('youAreNotAllowedToInsertTheSelectedItemAfterItself'));\n      } else if (selectedComponentIds.length > 1) {\n        alert(this.$translate('youAreNotAllowedToInsertTheSelectedItemsAfterItself'));\n      }\n    } else {\n      // data saved in the component moved event\n      let data = {\n        \"componentsMoved\": this.getComponentObjectsForEventData(selectedComponentIds)\n      };\n\n      // move the components to their new location\n      newComponents = this.ProjectService\n          .moveComponent(this.nodeId, selectedComponentIds, componentId);\n\n      this.saveEvent('componentMoved', 'Authoring', data);\n      this.turnOffMoveComponentMode();\n      this.ProjectService.saveProject();\n      this.highlightNewComponentsAndThenShowComponentAuthoring(newComponents);\n    }\n  }\n\n  /**\n   * Copy components in this step.\n   * @param componentId (optional) Put the copied components after this\n   * component id. If the componentId is not provided, we will put the\n   * components at the beginning of the step.\n   */\n  handleCopyComponent(componentId) {\n    let newComponents = [];\n    let selectedComponentIds = this.getSelectedComponentIds();\n\n    // data saved in the component copied event\n    let data = {};\n    let componentsCopied = this.getComponentObjectsForEventData(selectedComponentIds);\n\n    // copy the components to their new location\n    newComponents = this.ProjectService.copyComponentAndInsert(this.nodeId, selectedComponentIds, componentId);\n\n    // get the information for all the components that were copied\n    for (let c = 0; c < componentsCopied.length; c++) {\n      let componentCopied = componentsCopied[c];\n      let newComponent = newComponents[c];\n\n      componentCopied.fromComponentId = componentCopied.componentId;\n      componentCopied.toComponentId = newComponent.id;\n      delete componentCopied.componentId;\n    }\n\n    data.componentsCopied = componentsCopied;\n    this.saveEvent('componentCopied', 'Authoring', data);\n    this.turnOffCopyComponentMode();\n    this.ProjectService.saveProject();\n    this.highlightNewComponentsAndThenShowComponentAuthoring(newComponents);\n  }\n\n  /**\n   * Import components into this step.\n   * @param componentId (optional) Put the imported components after this\n   * component id. If the componentId is not provided, we will put the\n   * components at the beginning of the step.\n   */\n  handleImportComponent(componentId) {\n    // import the selected components and insert them\n    this.importComponents(this.nodeId, componentId).then((newComponents) => {\n      this.turnOffImportComponentMode();\n      this.ProjectService.saveProject();\n      this.highlightNewComponentsAndThenShowComponentAuthoring(newComponents);\n\n      /*\n       * refresh the project assets in case any of the imported\n       * components also imported assets\n       */\n      this.ProjectAssetService.retrieveProjectAssets();\n    });\n  }\n\n  /**\n   * Temporarily highlight the new components and then show the component\n   * authoring views. Used to bring user's attention to new changes.\n   * @param newComponents an array of the new components we have just added\n   */\n  highlightNewComponentsAndThenShowComponentAuthoring(newComponents) {\n    // use a timeout to allow the components time to show up in the UI\n    this.$timeout(() => {\n      if (newComponents != null) {\n        for (let newComponent of newComponents) {\n          if (newComponent != null) {\n            this.UtilService.temporarilyHighlightElement(newComponent.id);\n          }\n        }\n      }\n\n      /*\n       * Wait a small amount of time before returning the UI back to the\n       * normal view. This allows the author to see the component number\n       * and type view a little longer so that they can see the change\n       * they just made before we switch back to the normal view.\n       */\n      this.$timeout(() => {\n        this.showComponentAuthoring();\n        this.turnOffInsertComponentMode();\n        this.nodeAuthoringViewButtonClicked();\n        this.clearComponentsToChecked();\n\n        /*\n         * use a timeout to wait for the UI to update and then scroll\n         * to the first new component\n         */\n        this.$timeout(() => {\n          if (newComponents != null && newComponents.length > 0) {\n            // get the UI element of the first new component\n            let componentElement = $('#' + newComponents[0].id);\n\n            if (componentElement != null) {\n              // scroll to the first new component that we've added\n              $('#content').animate({\n                scrollTop: componentElement.offset().top - 200\n              }, 1000);\n            }\n          }\n        }, 1000);\n      }, 1000);\n    });\n  }\n\n\n  /**\n   * The author has chosen an authorable project to import from\n   * @param importProjectId the project id to import from\n   */\n  showMyImportProject(importProjectId) {\n    // clear the select drop down for the library project\n    this.importLibraryProjectId = null;\n\n    this.showImportProject(importProjectId);\n  }\n\n  /**\n   * The author has chosen a library project to import from\n   * @param importProjectId the project id to import from\n   */\n  showLibraryImportProject(importProjectId) {\n    this.importMyProjectId = null;\n    this.showImportProject(importProjectId);\n  }\n\n  /**\n   * Show the project we want to import steps from\n   * @param importProjectId the import project id\n   */\n  showImportProject(importProjectId) {\n    this.importProjectId = importProjectId;\n\n    if (this.importProjectId == null) {\n      // clear all the import project values\n      this.importProjectIdToOrder = {};\n      this.importProjectItems = [];\n      this.importMyProjectId = null;\n      this.importLibraryProjectId = null;\n      this.importProjectId = null;\n      this.importProject = null;\n    } else {\n      // get the import project\n      this.ProjectService.retrieveProjectById(this.importProjectId)\n          .then((projectJSON) => {\n\n        // create the mapping of node id to order for the import project\n        this.importProjectIdToOrder = {};\n        this.importProject = projectJSON;\n\n        // calculate the node order of the import project\n        let result = this.ProjectService.getNodeOrderOfProject(this.importProject);\n        this.importProjectIdToOrder = result.idToOrder;\n        this.importProjectItems = result.nodes;\n      });\n    }\n  }\n\n  /**\n   * Import the selected steps\n   */\n  importComponentsButtonClicked() {\n    let selectedComponents = this.getSelectedComponentsToImport();\n    if (selectedComponents == null || selectedComponents.length == 0) {\n      // the author did not select any components to import\n      alert('Please select a component to import.');\n    } else {\n      /*\n       * hide the import view because we want to go back to the\n       * project view so that the author can choose where to place\n       * the new steps\n       */\n      this.showImportView = false;\n      this.turnOnInsertComponentMode();\n      this.hideComponentAuthoring();\n      this.scrollToTopOfPage();\n    }\n  }\n\n  /**\n   * Get the selected components to import\n   * @return an array of selected components\n   * TODO refactor too many nesting\n   */\n  getSelectedComponentsToImport() {\n    let selectedComponents = [];\n    for (let item of this.importProjectItems) {\n      if (item != null && item.node != null && item.node.components != null) {\n        let componentsInNode = item.node.components;\n        for (let component of componentsInNode) {\n          if (component != null && component.checked) {\n            /*\n             * this component is checked so we will add it to\n             * the array of components that we will import\n             */\n            selectedComponents.push(component);\n          }\n        }\n      }\n    }\n    return selectedComponents;\n  }\n\n  /**\n   * Get the components that were selected\n   * @param insertAfterComponentId (optional) Insert the components after this\n   * component id. If this is null, we will insert the components at the\n   * beginning of the step.\n   */\n  importComponents(nodeId, insertAfterComponentId) {\n    // data saved in the component imported event\n    let data = {\n      \"componentsImported\": this.getComponentObjectsForImportEventData()\n    };\n\n    let selectedComponents = this.getSelectedComponentsToImport();\n    for (let selectedComponent of selectedComponents) {\n      if (selectedComponent != null) {\n        // remove the checked field\n        delete selectedComponent.checked;\n      }\n    }\n\n    // insert the components into the project\n    return this.ProjectService.importComponents(selectedComponents,\n        this.importProjectId, nodeId, insertAfterComponentId)\n        .then((newComponents) => {\n      for (let c = 0; c < data.componentsImported.length; c++) {\n        let componentImported = data.componentsImported[c];\n        let newComponent = newComponents[c];\n        let newComponentId = newComponent.id;\n\n        /*\n        * set the toComponentId so the event knows what the new\n        * component id is\n        */\n        componentImported.toComponentId = newComponentId;\n      }\n\n      this.saveEvent('componentImported', 'Authoring', data);\n      return newComponents;\n    });\n  }\n\n  scrollToTopOfPage() {\n    this.$anchorScroll('top');\n  }\n\n  /**\n   * Preview the import project in a new tab\n   */\n  previewImportProject() {\n    if (this.importProject != null) {\n      window.open(this.importProject.previewProjectURL);\n    }\n  }\n\n  /**\n   * Preview the step in a new tab\n   * @param node\n   */\n  previewImportNode(node) {\n    if (node != null) {\n      let nodeId = node.id;\n      let previewProjectURL = this.importProject.previewProjectURL;\n      let previewStepURL  = previewProjectURL + '#/vle/' + nodeId;\n      window.open(previewStepURL);\n    }\n  }\n\n  /**\n   * Preview the component in a new tab\n   * @param node the node\n   * @param componentId the component id\n   */\n  previewImportComponent(node, componentId) {\n    if (node != null) {\n      let nodeId = node.id;\n      let previewProjectURL = this.importProject.previewProjectURL;\n      let previewStepURL  = previewProjectURL + '#/vle/' + nodeId + '/' + componentId;\n      window.open(previewStepURL);\n    }\n  }\n\n  /**\n   * We are in the create a new component mode and the user has clicked\n   * on a component type\n   * @param componentType the component type the author clicked\n   */\n  componentTypeClicked(componentType) {\n    this.selectedComponent = componentType;\n  }\n\n  /**\n   * We are in the create a new component mode and the user has clicked\n   * on the cancel button\n   */\n  cancelCreateComponentClicked() {\n    // hide all the authoring views\n    this.nodeAuthoringViewButtonClicked();\n\n    this.turnOffAddComponentMode();\n    this.turnOffMoveComponentMode();\n    this.turnOffInsertComponentMode()\n    this.showComponentAuthoring();\n  }\n\n  /**\n   * Get the component type label\n   * @param componentType the component type\n   * @return the component type label\n   * example\n   * \"Open Response\"\n   */\n  getComponentTypeLabel(componentType) {\n    return this.UtilService.getComponentTypeLabel(componentType);\n  }\n\n  /**\n   * The author has clicked the back button\n   */\n  backButtonClicked() {\n    if (this.showImportView || this.showRubric || this.showAdvanced) {\n      this.UtilService.hideJSONValidMessage();\n\n      // we are in the import view so we will go back to the node view\n      this.nodeAuthoringViewButtonClicked();\n\n      this.$state\n        .go('root.project.node', {projectId: this.projectId, nodeId: this.nodeId});\n    } else {\n      // we are in the node view so we will go back to the project view\n      this.close();\n    }\n  }\n\n  /**\n   * Save an Authoring Tool event\n   * @param eventName the name of the event\n   * @param category the category of the event\n   * example 'Navigation' or 'Authoring'\n   * @param data (optional) an object that contains more specific data about\n   * the event\n   */\n  saveEvent(eventName, category, data) {\n    let context = 'AuthoringTool';\n    let nodeId = this.nodeId;\n    let componentId = null;\n    let componentType = null;\n    if (data == null) {\n      data = {};\n    }\n    this.TeacherDataService.saveEvent(context, nodeId, componentId, componentType, category, eventName, data);\n  }\n\n  /**\n   * Get an array of objects that contain the component id and type\n   * @param componentIds an array of component ids\n   * @return an array of objects that contain the component id and type\n   * TODO refactor too many nesting\n   */\n  getComponentObjectsForEventData(componentIds) {\n    let componentObjects = [];\n    if (componentIds != null) {\n      for (let componentId of componentIds) {\n        if (componentId != null) {\n          let component = this.ProjectService\n              .getComponentByNodeIdAndComponentId(this.nodeId, componentId);\n\n          if (component != null) {\n            let tempComponent = {\n              \"componentId\": component.id,\n              \"type\": component.type\n            };\n            componentObjects.push(tempComponent);\n          }\n        }\n      }\n    }\n    return componentObjects;\n  }\n\n  /**\n   * Get an array of objects that contain the node id, component id and type\n   * @return an array of objects that contain the node id, component id and type\n   * TODO refactor too many nesting\n   */\n  getComponentObjectsForImportEventData() {\n    let componentObjects = [];\n    for (let item of this.importProjectItems) {\n      if (item != null && item.node != null && item.node.components != null) {\n        for (let component of item.node.components) {\n          if (component != null && component.checked) {\n            let tempComponent = {\n              \"fromProjectId\": parseInt(this.importProjectId),\n              \"fromNodeId\": item.node.id,\n              \"fromComponentId\": component.id,\n              \"type\": component.type\n            };\n\n            /*\n             * this component is checked so we will add it to\n             * the array of components that we will import\n             */\n            componentObjects.push(tempComponent);\n          }\n        }\n      }\n    }\n    return componentObjects;\n  }\n\n  /**\n   * Save the project JSON to the server if the JSON is valid.\n   */\n  autoSaveJSON() {\n    try {\n      // create the updated node object\n      let updatedNode = angular.fromJson(this.authoringNodeContentJSONString);\n\n      // set the updated node into the project\n      this.ProjectService.setNode(this.nodeId, updatedNode);\n\n      // set the updated node into this controller\n      this.node = updatedNode;\n\n      // set the components into this controller\n      this.components = this.ProjectService.getComponentsByNodeId(this.nodeId);\n\n      // set the current node\n      this.TeacherDataService.setCurrentNodeByNodeId(this.nodeId);\n\n      // update the branch authoring fields into the controller\n      this.populateBranchAuthoring();\n\n      // save the project\n      this.authoringViewNodeChanged().then(() => {\n        this.$rootScope.$broadcast('parseProject');\n      });\n      this.UtilService.showJSONValidMessage();\n    } catch(e) {\n      this.UtilService.showJSONInvalidMessage();\n    }\n  }\n\n  /**\n   * The advanced button was clicked on a component. We will broadcast an event\n   * so that the appropriate child component can display their advanced\n   * authoring options.\n   * @param componentId The component id whose advanced button was clicked.\n   */\n  componentAdvancedButtonClicked(componentId) {\n    this.$rootScope.$broadcast('componentAdvancedButtonClicked', { componentId: componentId });\n  }\n\n  /**\n   * A constraint removal criteria step has changed.\n   * @param criteria The removal criteria object.\n   */\n  authoringViewConstraintRemovalCriteriaNodeIdChanged(criteria) {\n    criteria.params.componentId = '';\n    this.authoringViewNodeChanged();\n  }\n\n  /**\n   * A constraint removal criteria component has changed.\n   * @param criteria The removal criteria object.\n   */\n  authoringViewConstraintRemovalCriteriaComponentIdChanged(criteria) {\n    this.authoringViewNodeChanged();\n  }\n}\n\nNodeAuthoringController.$inject = [\n    '$anchorScroll',\n    '$filter',\n    '$injector',\n    '$location',\n    '$mdDialog',\n    '$rootScope',\n    '$scope',\n    '$state',\n    '$stateParams',\n    '$timeout',\n    'ConfigService',\n    'NodeService',\n    'ProjectAssetService',\n    'ProjectService',\n    'TeacherDataService',\n    'UtilService'\n];\n\nexport default NodeAuthoringController;\n"],"file":"nodeAuthoringController.js"}