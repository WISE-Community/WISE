{"version":3,"sources":["nodeInfo.es6"],"names":["NodeInfoController","AnnotationService","ProjectService","SummaryService","TeacherDataService","UtilService","periodId","getCurrentPeriod","$onInit","nodeContent","getNodeContent","components","getComponents","color","getNodeIconByNodeId","nodeId","result","node","getNodeById","assessmentItemIndex","c","length","component","isDisabled","hasWork","componentHasWork","rubric","replaceAssetPaths","componentType","getComponentTypeLabel","isResponsesSummaryAvailableForComponentType","isScoresSummaryAvailableForComponentType","componentId","isThereAnyScoreAnnotation","$inject","NodeInfo","bindings","controller","template"],"mappings":"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","sourcesContent":["\"use strict\";\n\nclass NodeInfoController {\n    constructor(AnnotationService,\n                ProjectService,\n                SummaryService,\n                TeacherDataService,\n                UtilService) {\n        this.AnnotationService = AnnotationService;\n        this.ProjectService = ProjectService;\n        this.SummaryService = SummaryService;\n        this.TeacherDataService = TeacherDataService;\n        this.UtilService = UtilService;\n        this.periodId = this.TeacherDataService.getCurrentPeriod().periodId;\n        this.$onInit = () => {\n            this.nodeContent = this.getNodeContent();\n            this.components = this.getComponents();\n\n            this.color = this.ProjectService.getNodeIconByNodeId(this.nodeId).color;\n        };\n    };\n\n    /**\n     * Get the content for this node\n     * @return object with the node content\n     */\n    getNodeContent() {\n        let result = null;\n\n        let node = this.ProjectService.getNodeById(this.nodeId);\n        if (node != null) {\n            // field that will hold the node content\n            result = node;\n        }\n\n        return result;\n    }\n\n    /**\n     * Get the components for this node with student work.\n     * @return array that contains the content for the components\n     */\n    getComponents() {\n        let components = null;\n\n        if (this.nodeContent) {\n            components = this.nodeContent.components;\n            let assessmentItemIndex = 0;\n\n            for (let c = 0; c < components.length; c++) {\n                let component = components[c];\n\n                if (this.isDisabled) {\n                    component.isDisabled = true;\n                }\n\n                component.hasWork = this.ProjectService.componentHasWork(component);\n                if (component.hasWork) {\n                    assessmentItemIndex++;\n                    component.assessmentItemIndex = assessmentItemIndex;\n                }\n            }\n        }\n\n        return components;\n    }\n\n    /**\n     * Get a rubric with the wise asset paths replaced\n     * @param rubric string\n     * @return string containing rubric html content\n     */\n    getRubricWithAssetPaths(rubric) {\n        return this.ProjectService.replaceAssetPaths(rubric);\n    }\n\n    /**\n     * Get the component type label for the given component type\n     * @param componentType string\n     * @return string of the component type label\n     */\n    getComponentTypeLabel(componentType) {\n        return this.UtilService.getComponentTypeLabel(componentType);\n    }\n\n    isResponsesSummaryAvailableForComponentType(componentType) {\n        return this.SummaryService.isResponsesSummaryAvailableForComponentType(componentType);\n    }\n    \n    isScoresSummaryAvailableForComponentType(componentType) {\n        return this.SummaryService.isScoresSummaryAvailableForComponentType(componentType);\n    }\n\n    componentHasScoreAnnotation(componentId) {\n        return this.AnnotationService.isThereAnyScoreAnnotation(\n                this.nodeId, componentId, this.periodId);\n    }\n}\n\nNodeInfoController.$inject = [\n    'AnnotationService',\n    'ProjectService',\n    'SummaryService',\n    'TeacherDataService',\n    'UtilService'\n];\n\nconst NodeInfo = {\n    bindings: {\n        nodeId: '@',\n    },\n    controller: NodeInfoController,\n    template:\n        `<md-card ng-if=\"$ctrl.nodeContent.rubric\" class=\"annotations annotations--info\">\n            <md-card-title class=\"annotations__header\">\n                <div class=\"annotations__avatar md-avatar avatar--icon md-36 avatar md-whiteframe-1dp\">\n                    <md-icon class=\"annotations__icon md-36 info\">info</md-icon>\n                </div>\n                <div class=\"annotations__title\" layout=\"row\" flex>\n                    <span>{{ 'STEP_INFO' | translate }}</span>\n                </div>\n            </md-card-title>\n            <md-card-content class=\"annotations__body md-body-1\">\n                <div ng-bind-html=\"$ctrl.getRubricWithAssetPaths($ctrl.nodeContent.rubric)\"></div>\n            </md-card-content>\n        </md-card>\n        <md-card class=\"node-info node-content\" style=\"border-color: {{ $ctrl.color }};\">\n            <md-card-content>\n                <div id=\"component_{{component.id}}\" ng-repeat='component in $ctrl.components' class=\"component\">\n                    <md-divider class=\"divider divider--dashed\" ng-if=\"!$first\"></md-divider>\n                    <h3 ng-if=\"component.hasWork\"\n                        class=\"accent-2 md-body-2 gray-lightest-bg\n                            component__header\">\n                        {{ component.assessmentItemIndex + '. ' + $ctrl.getComponentTypeLabel(component.type) }}&nbsp;\n                    </h3>\n                    <component node-id='{{$ctrl.nodeId}}'\n                               component-id='{{component.id}}'\n                               mode='student'></component>\n                    <md-card class=\"annotations annotations--info\" ng-if=\"component.rubric\">\n                       <md-card-title class=\"annotations__header\">\n                           <div class=\"annotations__avatar md-avatar avatar--icon md-36 avatar md-whiteframe-1dp\">\n                               <md-icon class=\"annotations__icon md-36 info\">info</md-icon>\n                           </div>\n                           <div class=\"annotations__title\" layout=\"row\" flex>\n                               <span>{{ 'ITEM_INFO' | translate }}</span>\n                           </div>\n                       </md-card-title>\n                       <md-card-content class=\"annotations__body md-body-1\">\n                           <div ng-bind-html=\"$ctrl.getRubricWithAssetPaths(component.rubric)\"></div>\n                       </md-card-content>\n                    </md-card>\n                    <div ng-if='$ctrl.isResponsesSummaryAvailableForComponentType(component.type)'>\n                        <summary-display ng-if='component.type === \"MultipleChoice\"' \n                                node-id='$ctrl.nodeId' component-id='component.id' \n                                period-id='$ctrl.periodId' student-data-type='\"responses\"'>\n                        </summary-display>\n                    </div>\n                    <div ng-if='$ctrl.isScoresSummaryAvailableForComponentType(component.type) && \n                            $ctrl.componentHasScoreAnnotation(component.id)'>\n                        <summary-display node-id='$ctrl.nodeId' component-id='component.id' \n                                period-id='$ctrl.periodId' student-data-type='\"scores\"'>\n                        </summary-display>\n                    </div>\n                </div>\n            </md-card-content>\n        </md-card>`\n};\n\nexport default NodeInfo;\n"],"file":"nodeInfo.js"}