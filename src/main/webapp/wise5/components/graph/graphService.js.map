{"version":3,"sources":["graphService.es6"],"names":["GraphService","$filter","$q","StudentAssetService","StudentDataService","UtilService","$translate","component","type","title","width","height","enableTrials","canCreateNewTrials","canDeleteTrials","hideAllTrialsOnNewTrial","canStudentHideSeriesOnLegendClick","roundValuesTo","graphType","xAxis","text","useHTML","min","max","units","locked","yAxis","series","name","data","color","dashStyle","marker","symbol","canEdit","componentStates","componentEvents","nodeEvents","node","hasComponentStates","isSubmitRequired","hasSubmitComponentState","componentState","length","componentStateHasStudentWork","hasNodeEnteredEvent","showSubmitButton","showSaveButton","isSubmit","singleSeries","hasImportWorkConnectedComponent","studentData","trials","trial","seriesData","componentContent","version","anySeriesHasDataPoint","anyTrialHasDataPoint","isStudentChangedAxisLimit","trialHasDataPoint","seriesHasDataPoint","multipleSeries","deferred","defer","componentId","highchartsDiv","angular","element","find","then","canvas","base64Image","toDataURL","imageObject","getImageObjectFromBase64String","uploadAsset","asset","resolve","promise","ComponentService","$inject"],"mappings":"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","sourcesContent":["import ComponentService from '../componentService';\nimport html2canvas from 'html2canvas';\n\nclass GraphService extends ComponentService {\n  constructor($filter,\n      $q,\n      StudentAssetService,\n      StudentDataService,\n      UtilService) {\n    super($filter, StudentDataService, UtilService);\n    this.$q = $q;\n    this.StudentAssetService = StudentAssetService;\n  }\n\n  getComponentTypeLabel() {\n    return this.$translate('graph.componentTypeLabel');\n  }\n\n  /**\n   * Create a Graph component object\n   * @returns a new Graph component object\n   */\n  createComponent() {\n    const component = super.createComponent();\n    component.type = 'Graph';\n    component.title = '';\n    component.width = 800;\n    component.height = 500;\n    component.enableTrials = false;\n    component.canCreateNewTrials = false;\n    component.canDeleteTrials = false;\n    component.hideAllTrialsOnNewTrial = false;\n    component.canStudentHideSeriesOnLegendClick = false;\n    component.roundValuesTo = 'integer';\n    component.graphType = 'line';\n    component.xAxis = {\n      title: {\n        text: this.$translate('graph.timeSeconds'),\n        useHTML: true\n      },\n      min: 0,\n      max: 100,\n      units: this.$translate('graph.secondsUnit'),\n      locked: true,\n      type: 'limits'\n    };\n    component.yAxis = {\n      title: {\n        text: this.$translate('graph.positionMeters'),\n        useHTML: true\n      },\n      min: 0,\n      max: 100,\n      units: this.$translate('graph.metersUnit'),\n      locked: true\n    };\n    component.series = [\n      {\n        name: this.$translate('graph.prediction'),\n        data: [],\n        color: 'blue',\n        dashStyle: 'Solid',\n        marker: {\n          symbol: 'circle'\n        },\n        canEdit: true,\n        type: 'line'\n      }\n    ];\n    return component;\n  }\n\n  isCompleted(component, componentStates, componentEvents, nodeEvents, node) {\n    if (this.canEdit(component)) {\n      if (this.hasComponentStates(componentStates)) {\n        if (this.isSubmitRequired(node, component)) {\n          return this.hasSubmitComponentState(componentStates);\n        } else {\n          const componentState = componentStates[componentStates.length - 1];\n          return this.componentStateHasStudentWork(componentState);\n        }\n      }\n    } else {\n      return this.UtilService.hasNodeEnteredEvent(nodeEvents);\n    }\n    return false;\n  }\n\n  hasComponentStates(componentStates) {\n    return componentStates != null && componentStates.length > 0;\n  }\n\n  isSubmitRequired(node, component) {\n    return node.showSubmitButton || (component.showSubmitButton && !node.showSaveButton);\n  }\n\n  hasSubmitComponentState(componentStates) {\n    for (const componentState of componentStates) {\n      if (componentState.isSubmit && this.componentStateHasStudentWork(componentState)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Determine if the student can perform any work on this component.\n   * @param component The component content.\n   * @return Whether the student can perform any work on this component.\n   */\n  canEdit(component) {\n    const series = component.series;\n    for (const singleSeries of series) {\n      if (singleSeries.canEdit) {\n        return true;\n      }\n    }\n    if (this.UtilService.hasImportWorkConnectedComponent(component)) {\n      return true;\n    }\n    return false;\n  }\n\n  hasSeriesData(studentData) {\n    const series = studentData.series;\n    if (series != null) {\n      for (const singleSeries of series) {\n        if (singleSeries.data != null && singleSeries.data.length > 0) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  hasTrialData(studentData) {\n    const trials = studentData.trials;\n    if (trials != null) {\n      for (const trial of trials) {\n        for (const singleSeries of trial.series) {\n          const seriesData = singleSeries.data;\n          if (seriesData.length > 0) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  componentStateHasStudentWork(componentState, componentContent) {\n    if (componentState != null) {\n      const studentData = componentState.studentData;\n      if (studentData != null) {\n        if (studentData.version == 1) {\n          /*\n           * this is the old graph student data format where the\n           * student data can contain multiple series.\n           */\n           if (this.anySeriesHasDataPoint(studentData.series)) {\n             return true;\n           }\n        } else {\n          /*\n           * this is the new graph student data format where the\n           * student data can contain multiple trials and each trial\n           * can contain multiple series.\n           */\n          if (this.anyTrialHasDataPoint(studentData.trials)) {\n            return true;\n          }\n        }\n      }\n      if (this.isStudentChangedAxisLimit(componentState, componentContent)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Check if the student has changed any of the axis limits\n   * @param componentState the component state\n   * @param componentContent the component content\n   * @return whether the student has changed any of the axis limits\n   */\n  isStudentChangedAxisLimit(componentState, componentContent) {\n    if (componentState != null && componentState.studentData != null && componentContent != null) {\n      if (componentState.studentData.xAxis != null && componentContent.xAxis != null) {\n        if (componentState.studentData.xAxis.min != componentContent.xAxis.min) {\n          return true;\n        } else if (componentState.studentData.xAxis.max != componentContent.xAxis.max) {\n          return true;\n        }\n      }\n      if (componentState.studentData.yAxis != null && componentContent.yAxis != null) {\n        if (componentState.studentData.yAxis.min != componentContent.yAxis.min) {\n          return true;\n        } else if (componentState.studentData.yAxis.max != componentContent.yAxis.max) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Check if any of the trials contains a data point\n   * @param trials an array of trials\n   * @return whether any of the trials contains a data point\n   */\n  anyTrialHasDataPoint(trials) {\n    for (const trial of trials) {\n      if (this.trialHasDataPoint(trial)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Check if a trial has a data point\n   * @param trial a trial object which can contain multiple series\n   * @return whether the trial contains a data point\n   */\n  trialHasDataPoint(trial) {\n    for (const singleSeries of trial.series) {\n      if (this.seriesHasDataPoint(singleSeries)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Check if an array of series has any data point\n   * @param multipleSeries an array of series\n   * @return whether any of the series has a data point\n   */\n  anySeriesHasDataPoint(multipleSeries) {\n    if (multipleSeries != null) {\n      for (const singleSeries of multipleSeries) {\n        if (this.seriesHasDataPoint(singleSeries)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Check if a series has a data point\n   * @param singleSeries a series object\n   * @return whether the series object has any data points\n   */\n  seriesHasDataPoint(singleSeries) {\n    return singleSeries.data.length > 0;\n  }\n\n  /**\n   * The component state has been rendered in a <component></component> element\n   * and now we want to take a snapshot of the work.\n   * @param componentState The component state that has been rendered.\n   * @return A promise that will return an image object.\n   */\n  generateImageFromRenderedComponentState(componentState) {\n    const deferred = this.$q.defer();\n    const componentId = componentState.componentId;\n    let highchartsDiv = angular.element('#chart_' + componentId).find('.highcharts-container');\n    if (highchartsDiv != null && highchartsDiv.length > 0) {\n      highchartsDiv = highchartsDiv[0];\n      html2canvas(highchartsDiv).then((canvas) => {\n        const base64Image = canvas.toDataURL('image/png');\n        const imageObject = this.UtilService.getImageObjectFromBase64String(base64Image);\n        this.StudentAssetService.uploadAsset(imageObject).then((asset) => {\n          deferred.resolve(asset);\n        });\n      });\n    }\n    return deferred.promise;\n  }\n}\n\nGraphService.$inject = [\n  '$filter',\n  '$q',\n  'StudentAssetService',\n  'StudentDataService',\n  'UtilService'\n];\n\nexport default GraphService;\n"],"file":"graphService.js"}