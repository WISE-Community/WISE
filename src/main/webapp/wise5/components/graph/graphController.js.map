{"version":3,"sources":["graphController.es6"],"names":["GraphController","$filter","$mdDialog","$q","$rootScope","$scope","$timeout","AnnotationService","ConfigService","GraphService","NodeService","NotebookService","ProjectService","StudentAssetService","StudentDataService","UtilService","graphType","series","seriesColors","seriesMarkers","activeSeries","isResetGraphButtonVisible","isSelectSeriesVisible","notebookConfig","getNotebookConfig","hideAllTrialsOnNewTrial","showUndoButton","isLegendEnabled","hasCustomLegendBeenSet","showTrialSelect","chartId","width","height","trials","activeTrial","trialIdsToShow","selectedTrialsText","studentDataVersion","canCreateNewTrials","canDeleteTrials","uploadedFileName","backgroundImage","mouseOverPoints","initialComponentState","undoStack","addNextComponentStateToUndoStack","componentId","hiddenCanvasId","applyHighchartsPlotLinesLabelFix","initializeComponentContentParams","componentState","isStudentMode","initializeStudentMode","mode","initializeGradingMode","initializeOnlyShowWorkMode","componentStateHasStudentWork","componentContent","setStudentWork","previousComponentState","canSubmit","isSubmitButtonDisabled","disableComponentIfNecessary","initializeHandleConnectedComponentStudentDataChanged","initializeDeleteKeyPressedListener","initializeFileUploadChanged","initializeScopeGetComponentState","drawGraph","then","broadcastDoneRenderingComponent","Highcharts","wrap","Axis","prototype","proceed","path","apply","Array","slice","call","arguments","flat","hideLegend","hideTrialSelect","isResetSeriesButtonVisible","newTrial","hasConnectedComponentAlwaysField","handleConnectedComponents","hasConnectedComponent","id","handleConnectedComponentStudentDataChanged","connectedComponent","connectedComponentParams","componentType","type","handleTableConnectedComponentStudentDataChanged","handleEmbeddedConnectedComponentStudentDataChanged","handleAnimationConnectedComponentStudentDataChanged","deleteKeyPressedListenerDestroyer","$on","handleDeleteKeyPressed","fileUploadChanged","element","activeSeriesData","data","overwrite","length","confirm","$translate","uploadFileAndReadContent","value","files","reader","FileReader","onload","fileContent","result","readCSVIntoActiveSeries","setUploadedFileName","fileName","studentDataChanged","scope","name","readAsText","uploadAsset","studentData","tableData","rows","convertRowDataToSeriesData","seriesIndex","isStudentDataVersion1","trial","isDirty","makeCopyOfJSONObject","processConnectedComponentStudentData","t","setVerticalPlotLine","submit","setupMouseMoveListenerDone","$","unbind","bind","e","mouseDown","mouseDownEventOccurred","offsetX","offsetY","x","handleMouseDownXPosition","y","handleMouseDownYPosition","saveMouseOverPoints","currentTimestamp","Date","getTime","timeBetweenSendingMouseOverPoints","lastSavedMouseMoveTimestamp","addMouseOverPoint","chart","highcharts","chartXAxis","xAxis","toValue","makeSureXIsWithinXMinMaxLimits","showMouseXPlotLine","showXPlotLine","chartYAxis","yAxis","makeSureYIsWithinYMinMaxLimits","showMouseYPlotLine","showYPlotLine","text","removePlotLine","plotLine","color","label","verticalAlign","addPlotLine","highlightXRangeFromZero","drawRangeRectangle","min","max","xMin","xMax","yMin","yMax","strokeColor","strokeWidth","fillColor","fillOpacity","createRectangleIfNecessary","convertToXPixels","convertToYPixels","updateRectanglePositionAndSize","graphUnitValue","translate","rectangle","renderer","rect","css","stroke","fill","add","attr","plotLeft","plotHeight","plotTop","align","charts","push","useTimeout","deferred","defer","clearChartConfig","drawGraphHelper","promise","title","subtitle","setupXAxis","setupYAxis","setupWidth","setupHeight","setupXAxisLimitSpacerWidth","isTrialsEnabled","getSeriesFromTrials","plotBands","getPlotBandsFromTrials","getSeries","setDefaultActiveSeries","isDisabled","setCanEditForAllSeries","setAllSeriesFields","refreshSeriesIds","updateMinMaxAxisValues","plotLines","zoomType","getZoomType","chartConfig","createChartConfig","useCustomLegend","setCustomLegend","allowDecimals","xAxisLimitSpacerWidth","show","concat","trialPlotBands","clearSeriesIds","setSeriesIds","singleSeries","setSingleSeriesFields","canEdit","isActiveSeries","draggableX","draggableY","cursor","stickyTracking","shared","allowPointSelect","enableMouseTracking","allowPointMouseOver","isMousePlotLineOn","options","legend","enabled","tooltip","formatter","createTooltipFormatter","plotBackgroundImage","events","load","resolve","click","createGraphClickHandler","plotOptions","dragSensitivity","legendItemClick","createLegendItemClickHandler","point","drag","createPointDragEventHandler","drop","createPointDropEventHandler","exporting","buttons","contextButton","useHTML","loading","func","createGraphCallbackHandler","thisGraphController","isLimitXAxisType","getSeriesText","xText","getXTextForLimitGraph","yText","getYTextForLimitGraph","combineXTextAndYText","isCategoriesXAxisType","getXTextForCategoriesGraph","getYTextForCategoriesGraph","pointHasCustomTooltip","userOptions","units","performRounding","xAxisUnits","getXAxisUnits","yAxisUnits","getYAxisUnits","category","getCategoryByIndex","index","event","isIgnoreClickEvent","handleGraphClickEvent","currentTime","lastDropTime","activeSeriesId","visible","alert","addPointToSeries","canHideSeries","canStudentHideSeriesOnLegendClick","yAxisSeries","getSeriesById","dragging","target","showXPlotLineIfOn","showYPlotLineIfOn","isMouseXPlotLineOn","isMouseYPlotLineOn","isSaveMouseOverPoints","setupMouseMoveListener","reflow","userAgent","navigator","indexOf","matrixRegEx","currentTransform","newTransform","replace","html","customLegend","d","dataPoint","tempDataXValue","splice","tempTrial","editableTrials","canEditTrial","getSeriesByIndex","setActiveSeries","setSeries","setXAxis","setYAxis","confirmMessage","seriesName","resetSeriesHelper","isReset","activeSeriesIndex","getSeriesIndex","originalSeries","setSeriesByIndex","setActiveSeriesByIndex","version","trialsCopy","setTrials","activeTrialIndex","setActiveTrialByIndex","setTrialIdsToShow","submitCounter","processLatestStudentWork","useTimeoutSetupGraph","emitComponentDirty","isSubmitDirty","emitComponentSubmitDirty","clearSaveText","action","createComponentState","emitComponentStudentDataChanged","createNewComponentState","getTrialIndex","getXAxis","getYAxis","getUploadedFileName","isSubmit","nodeId","createComponentStateAdditionalProcessing","hasAdditionalProcessingFunctions","additionalProcessingFunctions","getAdditionalProcessingFunctions","allPromises","additionalProcessingFunction","all","isPromptVisible","multipleSeries","s","periodId","getClassmateStudentWork","componentStates","promises","getTrialsFromComponentState","promiseResults","mergedTrials","nodePositionAndTitle","getNodePositionAndTitleByNodeId","generateKey","studentAsset","copyAssetForReference","copiedAsset","getAssetContent","assetContent","rowData","CSVToArray","params","skipFirstRow","xColumn","yColumn","seriesData","newSeriesIndex","marker","getSkipFirstRowValue","getXColumnValue","getYColumnValue","r","row","xCell","yCell","addPointFromTableIntoData","xNumber","Number","yNumber","isNaN","allSeries","usedSeriesIds","getAllUsedSeriesIds","nextSeriesId","getNextSeriesId","currentSeriesNumber","foundNextSeriesId","tempSeriesId","selectedPoints","getSelectedPoints","indexesToDelete","selectedPoint","sort","reverse","i","symbol","isActiveSeriesIndex","hasEditableSeries","trialNumbers","getTrialNumbers","maxTrialNumber","trialNumberRegex","tempTrialName","match","exec","tempTrialNumber","parseInt","trialIndex","trialToRemove","trialToRemoveId","makeHighestTrialActive","getSelectedTrialsText","highestTrial","getHighestTrial","highestTrialIndex","trialId","getTrialById","showOrHideTrials","setActiveTrialAndSeriesByTrialIdsToShow","a","idToShow","arraysContainSameValues","previousTrialIdsToShow","lastShownTrialId","lastShownTrial","isSeriesEditable","getLatestEditableSeriesIndex","idsToShow","fields","parseLatestTrial","field","when","firstTime","readConnectedComponentFieldFromStudentData","selectedCells","selectedTrialIds","convertSelectedCellsToTrialIds","includes","deleteTrialsByTrialId","trialIdsToDelete","trialIdToDelete","deleteTrialId","latestStudentDataTrial","getLatestStudentDataTrial","latestStudentDataTrialId","removeDefaultTrialIfNecessary","latestTrial","createNewTrialIfNecessary","copySeriesIntoTrial","copyTrialNameIntoTrial","copyPlotBandsIntoTrial","setLastTrialToActive","xPlotLine","activeTrialChanged","newSeries","dashStyle","firstTrial","isTrialHasEmptySeries","deleteFirstTrial","isSeriesEmpty","shift","hideAllTrials","createNewTrial","oldTrial","isAddSeries","copySeries","highlightLatestPoint","highlightPointOnX","xPointToHighlight","seriesNumbers","minMaxValues","getMinMaxValues","updateXAxisMinMaxIfNecessary","updateYAxisMinMaxIfNecessary","locked","minPadding","maxPadding","tempX","tempY","constructor","$event","svgString","getSVG","hiddenCanvas","document","getElementById","renderCallback","base64Image","toDataURL","imageObject","getImageObjectFromBase64String","addNote","csvString","lines","split","line","values","parseFloat","xAxisType","convertedData","oldDataPoint","isArray","number","roundValuesTo","roundToNearestInteger","roundToNearestTenth","roundToNearestHundredth","Math","round","zIndex","$apply","connectedComponentBackgroundImage","connectedComponents","handleShowClassmateWorkConnectedComponent","handleShowOrImportWorkConnectedComponent","handleConnectedComponentPromiseResults","isPreview","latestComponentState","getLatestComponentStateByNodeIdAndComponentId","showClassmateWorkSource","getPeriodId","getTrialsFromClassmates","component","getComponentByNodeIdAndComponentId","injectAssetPaths","connectedComponentOfComponentState","getConnectedComponentByComponentState","importWorkAsBackground","setComponentStateAsBackgroundImage","setCanEditForAllSeriesInComponentState","trialCount","promiseResult","addTrialFromThisComponentIfNecessary","newComponentState","handleConnectedComponentsHelper","generateImageFromComponentState","image","url","mergedComponentState","connectedComponentState","mergeComponentState","mergeNullComponentState","baseComponentState","mergeFields","mergeField","readConnectedComponentField","pop","categories","getXValueFromDataPoint","getYValueFromDataPoint","getLatestMouseOverPointX","getLatestMouseOverPointY","seriesId","points","refresh","removeHoverStateFromPoints","setHoverStateOnPoint","setState","latestSeries","latestPoint","selectedCell","material","bevTemp","airTemp","selectedTrialId","enableTrials","ComponentController","$inject"],"mappings":"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","sourcesContent":["'use strict';\n\nimport ComponentController from '../componentController';\nimport canvg from 'canvg';\nimport html2canvas from 'html2canvas';\n\nclass GraphController extends ComponentController {\n  constructor($filter,\n      $mdDialog,\n      $q,\n      $rootScope,\n      $scope,\n      $timeout,\n      AnnotationService,\n      ConfigService,\n      GraphService,\n      NodeService,\n      NotebookService,\n      ProjectService,\n      StudentAssetService,\n      StudentDataService,\n      UtilService) {\n    super($filter, $mdDialog, $rootScope, $scope,\n        AnnotationService, ConfigService, NodeService,\n        NotebookService, ProjectService, StudentAssetService,\n        StudentDataService, UtilService);\n    this.$q = $q;\n    this.$timeout = $timeout;\n    this.GraphService = GraphService;\n    this.graphType = null;\n    this.series = [];\n    this.seriesColors = ['blue', 'red', 'green', 'orange', 'purple', 'black'];\n    this.seriesMarkers = ['circle', 'square', 'diamond', 'triangle', 'triangle-down', 'circle'];\n    this.activeSeries = null;\n    this.isResetGraphButtonVisible = false;\n    this.isSelectSeriesVisible = false;\n    this.notebookConfig = this.NotebookService.getNotebookConfig();\n    this.hideAllTrialsOnNewTrial = true;\n    this.showUndoButton = false;\n    this.isLegendEnabled = true;\n    this.hasCustomLegendBeenSet = false;\n    this.showTrialSelect = true;\n    this.chartId = 'chart1';\n    this.width = null;\n    this.height = null;\n    this.trials = [];\n    this.activeTrial = null;\n    this.trialIdsToShow = [];\n    this.selectedTrialsText = '';\n    this.studentDataVersion = 2;\n    this.canCreateNewTrials = false;\n    this.canDeleteTrials = false;\n    this.uploadedFileName = null;\n    this.backgroundImage = null;\n    this.mouseOverPoints = [];\n    this.initialComponentState = null;\n    /*\n     * An array to store the component states for the student to undo.\n     * The undoStack will contain the component states from the current\n     * visit except for the current component state.\n     */\n    this.undoStack = [];\n    /*\n     * whether to add the next component state created in\n     * studentDataChanged() to the undoStack\n     */\n    this.addNextComponentStateToUndoStack = false;\n    this.chartId = 'chart_' + this.componentId;\n    this.hiddenCanvasId = 'hiddenCanvas_' + this.componentId;\n    this.applyHighchartsPlotLinesLabelFix();\n    this.initializeComponentContentParams();\n    const componentState = this.$scope.componentState;\n    if (this.isStudentMode()) {\n      this.initializeStudentMode(componentState);\n    } else if (this.mode === 'grading' || this.mode === 'gradingRevision') {\n      this.initializeGradingMode(componentState);\n    } else if (this.mode === 'onlyShowWork') {\n      this.initializeOnlyShowWorkMode();\n    }\n    if (!this.isStudentMode() &&\n        this.GraphService.componentStateHasStudentWork(componentState, this.componentContent)) {\n      this.setStudentWork(componentState);\n    }\n    this.initialComponentState = componentState;\n    this.previousComponentState = componentState;\n    if (!this.canSubmit()) {\n      this.isSubmitButtonDisabled = true;\n    }\n    this.disableComponentIfNecessary();\n    this.initializeHandleConnectedComponentStudentDataChanged();\n    this.initializeDeleteKeyPressedListener();\n    this.initializeFileUploadChanged();\n    this.initializeScopeGetComponentState(this.$scope, 'graphController');\n    this.drawGraph().then(() => {\n      this.broadcastDoneRenderingComponent();\n    });\n  }\n\n  applyHighchartsPlotLinesLabelFix() {\n    Highcharts.wrap(Highcharts.Axis.prototype, 'getPlotLinePath', function(proceed) {\n      var path = proceed.apply(this, Array.prototype.slice.call(arguments, 1));\n      if (path) {\n        path.flat = false;\n      }\n      return path;\n    });\n  }\n\n  initializeComponentContentParams() {\n    this.graphType = this.componentContent.graphType;\n    if (this.graphType == null) {\n      this.graphType = 'line';\n    }\n    if (this.componentContent.canCreateNewTrials != null) {\n      this.canCreateNewTrials = this.componentContent.canCreateNewTrials;\n    }\n    if (this.componentContent.canDeleteTrials != null) {\n      this.canDeleteTrials = this.componentContent.canDeleteTrials;\n    }\n    if (this.componentContent.hideAllTrialsOnNewTrial === false) {\n      this.hideAllTrialsOnNewTrial = false;\n    }\n    if (this.componentContent.hideLegend) {\n      this.isLegendEnabled = false;\n    }\n    if (this.componentContent.hideTrialSelect) {\n      this.showTrialSelect = false;\n    }\n  }\n\n  initializeStudentMode(componentState) {\n    this.isResetSeriesButtonVisible = true;\n    this.isSelectSeriesVisible = true;\n    this.backgroundImage = this.componentContent.backgroundImage;\n    if (!this.GraphService.componentStateHasStudentWork(componentState, this.componentContent)) {\n      this.newTrial();\n    }\n    if (this.UtilService.hasConnectedComponentAlwaysField(this.componentContent)) {\n      this.handleConnectedComponents();\n    } else if (this.GraphService.componentStateHasStudentWork(componentState, this.componentContent)) {\n      this.setStudentWork(componentState);\n    } else if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n      this.handleConnectedComponents();\n    }\n  }\n\n  initializeGradingMode(componentState) {\n    this.isResetSeriesButtonVisible = false;\n    this.isSelectSeriesVisible = false;\n    if (componentState != null) {\n      if (this.mode === 'gradingRevision') {\n        this.chartId = 'chart_gradingRevision_' + componentState.id;\n      } else {\n        this.chartId = 'chart_' + componentState.id;\n      }\n    }\n  }\n\n  initializeOnlyShowWorkMode() {\n    this.isResetGraphButtonVisible = false;\n    this.isResetSeriesButtonVisible = false;\n    this.isSelectSeriesVisible = false;\n    this.backgroundImage = this.componentContent.backgroundImage;\n  }\n\n  initializeHandleConnectedComponentStudentDataChanged() {\n    this.$scope.handleConnectedComponentStudentDataChanged =\n        (connectedComponent, connectedComponentParams, componentState) => {\n      const componentType = connectedComponent.type;\n      if (componentType === 'Table') {\n        this.handleTableConnectedComponentStudentDataChanged(\n          connectedComponent, connectedComponentParams, componentState);\n      } else if (componentType === 'Embedded') {\n        this.handleEmbeddedConnectedComponentStudentDataChanged(\n          connectedComponent, connectedComponentParams, componentState);\n      } else if (componentType === 'Animation') {\n        this.handleAnimationConnectedComponentStudentDataChanged(\n          connectedComponent, connectedComponentParams, componentState);\n      }\n    };\n  }\n\n  initializeDeleteKeyPressedListener() {\n    this.deleteKeyPressedListenerDestroyer = this.$scope.$on('deleteKeyPressed', () => {\n      this.handleDeleteKeyPressed();\n    });\n  }\n\n  initializeFileUploadChanged() {\n    this.$scope.fileUploadChanged = (element) => {\n      const activeSeriesData = this.activeSeries.data;\n      let overwrite = true;\n      if (activeSeriesData.length > 0) {\n        if (!confirm(this.$translate('graph.areYouSureYouWantToOverwriteTheCurrentLineData'))) {\n          overwrite = false;\n        }\n      }\n      if (overwrite) {\n        this.uploadFileAndReadContent(element);\n      }\n      /*\n       * clear the file input element value so that onchange() will be\n       * called again if the student wants to upload the same file again\n       */\n      element.value = null;\n    };\n  }\n\n  uploadFileAndReadContent(element) {\n    const files = element.files;\n    const reader = new FileReader();\n    reader.onload = () => {\n      const fileContent = reader.result;\n      this.readCSVIntoActiveSeries(fileContent);\n      this.setUploadedFileName(this.fileName);\n      this.studentDataChanged();\n    };\n    reader.scope = this;\n    reader.fileName = files[0].name;\n    reader.readAsText(files[0]);\n    this.StudentAssetService.uploadAsset(files[0]);\n  }\n\n  cleanupBeforeExiting() {\n    this.deleteKeyPressedListenerDestroyer();\n  }\n\n  handleTableConnectedComponentStudentDataChanged(\n      connectedComponent, connectedComponentParams, componentState) {\n    const studentData = componentState.studentData;\n    if (studentData != null && studentData.tableData != null) {\n      const rows = studentData.tableData;\n      const data = this.convertRowDataToSeriesData(rows, connectedComponentParams);\n      let seriesIndex = connectedComponentParams.seriesIndex;\n      if (seriesIndex == null) {\n        seriesIndex = 0;\n      }\n      if (this.isStudentDataVersion1()) {\n        let series = this.series[seriesIndex];\n        if (series == null) {\n          series = {};\n          this.series[seriesIndex] = series;\n        }\n        series.data = data;\n      } else {\n        const trial = this.activeTrial;\n        if (trial != null && trial.series != null) {\n          let series = trial.series[seriesIndex];\n          if (series == null) {\n            series = {};\n            this.series[seriesIndex] = series;\n          }\n          series.data = data;\n        }\n      }\n      this.drawGraph();\n      this.isDirty = true;\n    }\n  }\n\n  handleEmbeddedConnectedComponentStudentDataChanged(\n      connectedComponent, connectedComponentParams, componentState) {\n    componentState = this.UtilService.makeCopyOfJSONObject(componentState);\n    const studentData = componentState.studentData;\n    this.processConnectedComponentStudentData(studentData, connectedComponentParams);\n    this.studentDataChanged();\n  }\n\n  handleAnimationConnectedComponentStudentDataChanged(\n      connectedComponent, connectedComponentParams, componentState) {\n    if (componentState.t != null) {\n      this.setVerticalPlotLine(componentState.t);\n      this.drawGraph();\n    }\n  }\n\n  handleNodeSubmit() {\n    this.submit('nodeSubmitButton');\n  }\n\n  setupMouseMoveListener() {\n    if (!this.setupMouseMoveListenerDone) {\n      /*\n       * Remove all existing listeners on the chart div to make sure we don't\n       * bind a listener multiple times.\n       */\n      $('#' + this.chartId).unbind();\n      $('#' + this.chartId).bind('mousedown', (e) => {\n        this.mouseDown = true;\n        this.mouseDownEventOccurred(e);\n      });\n      $('#' + this.chartId).bind('mouseup', (e) => {\n        this.mouseDown = false;\n      });\n      $('#' + this.chartId).bind('mousemove', (e) => {\n        if (this.mouseDown) {\n          this.mouseDownEventOccurred(e);\n        }\n      });\n      $('#' + this.chartId).bind('mouseleave', (e) => {\n        this.mouseDown = false;\n      });\n      this.setupMouseMoveListenerDone = true;\n    }\n  }\n\n  /**\n   * The student has moved the mouse while holding the mouse button down.\n   * @param e The mouse event.\n   */\n  mouseDownEventOccurred(e) {\n    /*\n     * Firefox displays abnormal behavior when the student drags the plot line.\n     * In Firefox, when the mouse is on top of the plot line, the event will\n     * contain offset values relative to the plot line instead of relative to\n     * the graph container. We always want the offset values relative to the\n     * graph container so we will ignore events where the offset values are\n     * relative to the plot line.\n     */\n    if (e.offsetX < 10 || e.offsetY < 10) {\n      return;\n    }\n    const x = this.handleMouseDownXPosition(e);\n    const y = this.handleMouseDownYPosition(e);\n    if (this.componentContent.saveMouseOverPoints) {\n      /*\n       * Make sure we aren't saving the points too frequently. We want to avoid\n       * saving too many unnecessary data points.\n       */\n      const currentTimestamp = new Date().getTime();\n      /*\n       * Make sure this many milliseconds has passed before saving another mouse\n       * over point.\n       */\n      const timeBetweenSendingMouseOverPoints = 200;\n      if (this.lastSavedMouseMoveTimestamp == null ||\n          currentTimestamp - this.lastSavedMouseMoveTimestamp > timeBetweenSendingMouseOverPoints) {\n        this.addMouseOverPoint(x, y);\n        this.studentDataChanged();\n        this.lastSavedMouseMoveTimestamp = currentTimestamp;\n      }\n    }\n  }\n\n  handleMouseDownXPosition(e) {\n    const chart = $('#' + this.chartId).highcharts();\n    const chartXAxis = chart.xAxis[0];\n    let x = chartXAxis.toValue(e.offsetX, false);\n    x = this.makeSureXIsWithinXMinMaxLimits(x);\n    if (this.componentContent.showMouseXPlotLine) {\n      this.showXPlotLine(x);\n    }\n    return x;\n  }\n\n  handleMouseDownYPosition(e) {\n    const chart = $('#' + this.chartId).highcharts();\n    const chartYAxis = chart.yAxis[0];\n    let y = chartYAxis.toValue(e.offsetY, false);\n    y = this.makeSureYIsWithinYMinMaxLimits(y);\n    if (this.componentContent.showMouseYPlotLine) {\n      this.showYPlotLine(y);\n    }\n    return y;\n  }\n\n  /**\n   * Show the vertical plot line at the given x.\n   * @param x The x value to show the vertical line at.\n   * @param text The text to show on the plot line.\n   */\n  showXPlotLine(x, text) {\n    const chart = $('#' + this.chartId).highcharts();\n    const chartXAxis = chart.xAxis[0];\n    chartXAxis.removePlotLine('plot-line-x');\n    const plotLine = {\n      value: x,\n      color: 'red',\n      width: 4,\n      id: 'plot-line-x'\n    };\n    if (text != null && text !== '') {\n      plotLine.label = {\n        text: text,\n        verticalAlign: 'top'\n      };\n    }\n    chartXAxis.addPlotLine(plotLine);\n    if (this.componentContent.highlightXRangeFromZero) {\n      this.drawRangeRectangle(0, x, chart.yAxis[0].min, chart.yAxis[0].max);\n    }\n  }\n\n  /**\n   * Draw a rectangle on the graph. This is used for highlighting a range.\n   * @param xMin The left x value in the graph x axis units.\n   * @param xMax The right x value in the graph x axis units.\n   * @param yMin The bottom y value in the graph y axis units.\n   * @param yMax The top y value in the graph y axis units.\n   * @param strokeColor The color of the border.\n   * @param strokeWidth The width of the border.\n   * @param fillColor The color inside the rectangle.\n   * @param fillOpacity The opacity of the color inside the rectangle.\n   */\n  drawRangeRectangle(xMin, xMax, yMin, yMax, strokeColor = 'black', strokeWidth = '.5',\n      fillColor = 'black', fillOpacity = '.1') {\n    this.createRectangleIfNecessary(strokeColor, strokeWidth, fillColor, fillOpacity);\n    xMin = this.convertToXPixels(xMin);\n    xMax = this.convertToXPixels(xMax);\n    yMin = this.convertToYPixels(yMin);\n    yMax = this.convertToYPixels(yMax);\n    this.updateRectanglePositionAndSize(xMin, xMax, yMin, yMax);\n  }\n\n  convertToXPixels(graphUnitValue) {\n    const chart = $('#' + this.chartId).highcharts();\n    return chart.xAxis[0].translate(graphUnitValue);\n  }\n\n  convertToYPixels(graphUnitValue) {\n    const chart = $('#' + this.chartId).highcharts();\n    return chart.yAxis[0].translate(graphUnitValue);\n  }\n\n  createRectangleIfNecessary(strokeColor, strokeWidth, fillColor, fillOpacity) {\n    if (this.rectangle == null) {\n      const chart = $('#' + this.chartId).highcharts();\n      this.rectangle = chart.renderer.rect(0,0,0,0,0).css({\n        stroke: strokeColor,\n        strokeWidth: strokeWidth,\n        fill: fillColor,\n        fillOpacity: fillOpacity\n      }).add();\n    }\n  }\n\n  updateRectanglePositionAndSize(xMin, xMax, yMin, yMax) {\n    const chart = $('#' + this.chartId).highcharts();\n    this.rectangle.attr({\n      x: xMin + chart.plotLeft,\n      y: chart.plotHeight + chart.plotTop - yMax,\n      width: xMax - xMin,\n      height: yMax - yMin\n    });\n  }\n\n  /**\n   * Show the horizontal plot line at the given y.\n   * @param y The y value to show the horizontal line at.\n   * @param text The text to show on the plot line.\n   */\n  showYPlotLine(y, text) {\n    const chart = $('#' + this.chartId).highcharts();\n    const chartYAxis = chart.yAxis[0];\n    chartYAxis.removePlotLine('plot-line-y');\n    const plotLine = {\n      value: y,\n      color: 'red',\n      width: 2,\n      id: 'plot-line-y'\n    };\n    if (text != null && text !== '') {\n      plotLine.label = {\n        text: text,\n        align: 'right'\n      };\n    }\n    chartYAxis.addPlotLine(plotLine);\n  }\n\n  clearPlotLines() {\n    const chart = Highcharts.charts[0];\n    if (chart != null) {\n      const chartXAxis = chart.xAxis[0];\n      chartXAxis.removePlotLine('plot-line-x');\n      const chartYAxis = chart.yAxis[0];\n      chartYAxis.removePlotLine('plot-line-y');\n    }\n  }\n\n  /**\n   * If the x value is not within the x min and max limits, we will modify the x value to be at the\n   * limit.\n   * @param x the x value\n   * @return an x value between the x min and max limits\n   */\n  makeSureXIsWithinXMinMaxLimits(x) {\n    if (x < this.xAxis.min) {\n      x = this.xAxis.min;\n    }\n    if (x > this.xAxis.max) {\n      x = this.xAxis.max;\n    }\n    return x;\n  }\n\n  /**\n   * If the y value is not within the y min and max limits, we will modify the y value to be at the\n   * limit.\n   * @param y the y value\n   * @return a y value between the y min and max limits\n   */\n  makeSureYIsWithinYMinMaxLimits(y) {\n    if (y < this.yAxis.min) {\n      y = this.yAxis.min;\n    }\n    if (y > this.yAxis.max) {\n      y = this.yAxis.max;\n    }\n    return y;\n  }\n\n  /**\n   * Add a mouse over point to the array of student mouse over points.\n   * @param x the x value in graph units\n   * @param y the y value in graph units\n   */\n  addMouseOverPoint(x, y) {\n    this.mouseOverPoints.push([x, y]);\n  }\n\n  /**\n   * @param useTimeout whether to call the drawGraphHelper() function in a timeout callback\n   */\n  drawGraph(useTimeout) {\n    const deferred = this.$q.defer();\n    if (useTimeout) {\n      /*\n       * Clear the chart config so that the graph is completely refreshed. We need to do this\n       * otherwise all the series will react to mouseover but we only want the active series to\n       * react to mouseover.\n       */\n      this.clearChartConfig();\n      /*\n       * Call the setup graph helper after a timeout. this is required so that the graph is\n       * completely refreshed so that only the active series will react to mouseover.\n       */\n      this.$timeout(() => {\n        this.drawGraphHelper(deferred);\n      });\n    } else {\n      this.drawGraphHelper(deferred);\n    }\n    return deferred.promise;\n  }\n\n  /**\n   * @param deferred A promise that should be resolved after the graph is done rendering.\n   */\n  drawGraphHelper(deferred) {\n    const title = this.componentContent.title;\n    const subtitle = this.componentContent.subtitle;\n    const xAxis = this.setupXAxis();\n    const yAxis = this.setupYAxis();\n    this.setupWidth();\n    this.setupHeight();\n    this.setupXAxisLimitSpacerWidth();\n    let series = null;\n    if (this.isTrialsEnabled()) {\n      series = this.getSeriesFromTrials(this.trials);\n      xAxis.plotBands = this.getPlotBandsFromTrials(this.trials);\n    } else {\n      series = this.getSeries();\n    }\n    if (this.activeSeries == null) {\n      this.setDefaultActiveSeries();\n    }\n    if (this.isDisabled) {\n      this.setCanEditForAllSeries(series, false);\n    }\n    this.showUndoButton = false;\n    this.setAllSeriesFields(series);\n    this.refreshSeriesIds(series);\n    this.updateMinMaxAxisValues(series, xAxis, yAxis);\n    if (this.plotLines != null) {\n      xAxis.plotLines = this.plotLines;\n    }\n    const zoomType = this.getZoomType();\n    this.chartConfig = this.createChartConfig(deferred, title, subtitle, xAxis, yAxis, series,\n        zoomType);\n    if (this.componentContent.useCustomLegend) {\n      // use a timeout so the graph has a chance to render before we set the custom legend\n      this.$timeout(() => {\n        this.setCustomLegend();\n      });\n    }\n    return deferred.promise;\n  }\n\n  setupXAxis() {\n    if (this.xAxis == null && this.componentContent.xAxis != null) {\n      this.xAxis = this.UtilService.makeCopyOfJSONObject(this.componentContent.xAxis);\n    }\n    if (this.xAxis != null) {\n      this.xAxis.allowDecimals = false;\n      this.xAxis.plotBands = null;\n      if (this.componentContent.xAxis != null &&\n        this.componentContent.xAxis.plotBands != null) {\n        this.xAxis.plotBands = this.componentContent.xAxis.plotBands;\n      }\n    }\n    return this.xAxis;\n  }\n\n  setupYAxis() {\n    if (this.yAxis == null && this.componentContent.yAxis != null) {\n      this.yAxis = this.UtilService.makeCopyOfJSONObject(this.componentContent.yAxis);\n    }\n    if (this.yAxis != null) {\n      this.yAxis.allowDecimals = false;\n    }\n    return this.yAxis;\n  }\n\n  setupWidth() {\n    if (this.componentContent.width != null) {\n      this.width = this.componentContent.width;\n    }\n  }\n\n  setupHeight() {\n    if (this.componentContent.height != null) {\n      this.height = this.componentContent.height;\n    }\n  }\n\n  setupXAxisLimitSpacerWidth() {\n    if (this.width > 100) {\n      this.xAxisLimitSpacerWidth = this.width - 100;\n    } else {\n      this.xAxisLimitSpacerWidth = 0;\n    }\n  }\n\n  getSeriesFromTrials(trials) {\n    let series = [];\n    for (const trial of trials) {\n      if (trial.show) {\n        series = series.concat(trial.series);\n      }\n    }\n    return series;\n  }\n\n  getPlotBandsFromTrials(trials) {\n    let trialPlotBands = [];\n    for (const trial of trials) {\n      if (trial.show && trial.xAxis != null && trial.xAxis.plotBands != null) {\n        trialPlotBands = trialPlotBands.concat(trial.xAxis.plotBands);\n      }\n    }\n    return trialPlotBands;\n  }\n\n  refreshSeriesIds(series) {\n    this.clearSeriesIds(series);\n    this.setSeriesIds(series);\n  }\n\n  setAllSeriesFields(series) {\n    for (const singleSeries of series) {\n      this.setSingleSeriesFields(singleSeries);\n    }\n  }\n\n  setSingleSeriesFields(singleSeries) {\n    if (singleSeries.canEdit && this.isActiveSeries(singleSeries)) {\n      if (this.graphType === 'line' || this.graphType === 'scatter') {\n        singleSeries.draggableX = true;\n      } else if (this.graphType === 'column') {\n        singleSeries.draggableX = false;\n      }\n      singleSeries.draggableY = true;\n      singleSeries.cursor = 'move';\n      singleSeries.stickyTracking = false;\n      singleSeries.shared = false;\n      singleSeries.allowPointSelect = true;\n      singleSeries.enableMouseTracking = true;\n      this.showUndoButton = true;\n    } else {\n      singleSeries.draggableX = false;\n      singleSeries.draggableY = false;\n      singleSeries.stickyTracking = false;\n      singleSeries.shared = false;\n      singleSeries.allowPointSelect = false;\n      singleSeries.enableMouseTracking = false;\n    }\n    if (singleSeries.allowPointMouseOver === true) {\n      singleSeries.allowPointSelect = true;\n      singleSeries.enableMouseTracking = true;\n    }\n    if (this.isMousePlotLineOn()) {\n      singleSeries.enableMouseTracking = true;\n    }\n  }\n\n  getZoomType() {\n    return this.mode === 'grading' || this.mode === 'gradingRevision' ? 'xy' : null;\n  }\n\n  clearChartConfig() {\n    this.chartConfig = {\n      chart: {\n        options: {\n          chart: {}\n        }\n      }\n    };\n  }\n\n  createChartConfig(deferred, title, subtitle, xAxis, yAxis, series, zoomType) {\n    const chartConfig = {\n      options: {\n        legend: {\n          enabled: this.isLegendEnabled\n        },\n        tooltip: {\n          formatter: this.createTooltipFormatter()\n        },\n        chart: {\n          width: this.width,\n          height: this.height,\n          type: this.graphType,\n          zoomType: zoomType,\n          plotBackgroundImage: this.backgroundImage,\n          events: {\n            load: function() {\n              deferred.resolve(this);\n            },\n            click: this.createGraphClickHandler()\n          }\n        },\n        plotOptions: {\n          series: {\n            dragSensitivity: 10,\n            stickyTracking: false,\n            events: {\n              legendItemClick: this.createLegendItemClickHandler()\n            },\n            point: {\n              events: {\n                drag: this.createPointDragEventHandler(),\n                drop: this.createPointDropEventHandler()\n              }\n            }\n          }\n        },\n        exporting: {\n          buttons: {\n            contextButton: {\n              enabled: false\n            }\n          }\n        }\n      },\n      series: series,\n      title: {\n        text: title,\n        useHTML: true\n      },\n      subtitle: {\n        text: subtitle,\n        useHTML: true\n      },\n      xAxis: xAxis,\n      yAxis: yAxis,\n      loading: false,\n      func: this.createGraphCallbackHandler()\n    };\n    return chartConfig;\n  }\n\n  createTooltipFormatter() {\n    const thisGraphController = this;\n    return function() {\n      let text = '';\n      if (thisGraphController.isLimitXAxisType(thisGraphController.xAxis)) {\n        text = thisGraphController.getSeriesText(this.series);\n        const xText = thisGraphController.getXTextForLimitGraph(this.series, this.x);\n        const yText = thisGraphController.getYTextForLimitGraph(this.series, this.y);\n        text += thisGraphController.combineXTextAndYText(xText, yText);\n      } else if (thisGraphController.isCategoriesXAxisType(thisGraphController.xAxis)) {\n        text = thisGraphController.getSeriesText(this.series);\n        const xText = thisGraphController.getXTextForCategoriesGraph(this.point, this.x);\n        const yText = thisGraphController.getYTextForCategoriesGraph(this.y);\n        text += xText + ' ' + yText;\n      }\n      if (thisGraphController.pointHasCustomTooltip(this.point)) {\n        text += '<br/>' + this.point.tooltip;\n      }\n      return text;\n    };\n  }\n\n  getXAxisUnits(series) {\n    if (series.xAxis != null && series.xAxis.userOptions != null &&\n        series.xAxis.userOptions.units != null) {\n      return series.xAxis.userOptions.units;\n    } else {\n      return '';\n    }\n  }\n\n  getYAxisUnits(series) {\n    if (series.yAxis != null && series.yAxis.userOptions != null &&\n        series.yAxis.userOptions.units != null) {\n      return series.yAxis.userOptions.units;\n    } else {\n      return '';\n    }\n  }\n\n  isLimitXAxisType(xAxis) {\n    return xAxis.type === 'limits' || xAxis.type == null;\n  }\n\n  isCategoriesXAxisType(xAxis) {\n    return xAxis.type === 'categories';\n  }\n\n  getSeriesText(series) {\n    let text = '';\n    if (series.name !== '') {\n      text = '<b>' + series.name + '</b><br/>';\n    }\n    return text;\n  }\n\n  getXTextForLimitGraph(series, x) {\n    let text = this.performRounding(x);\n    let xAxisUnits = this.getXAxisUnits(series);\n    if (xAxisUnits != null && xAxisUnits !== '') {\n      text += ' ' + xAxisUnits;\n    }\n    return text;\n  }\n\n  getYTextForLimitGraph(series, y) {\n    let text = this.performRounding(y);\n    let yAxisUnits = this.getYAxisUnits(this.series);\n    if (yAxisUnits != null && yAxisUnits !== '') {\n      text += ' ' + yAxisUnits;\n    }\n    return text;\n  }\n\n  combineXTextAndYText(xText, yText) {\n    let text = xText;\n    if (xText !== '') {\n      text += ', ';\n    }\n    text += yText;\n    return text;\n  }\n\n  getXTextForCategoriesGraph(point, x) {\n    const category = this.getCategoryByIndex(point.index);\n    if (category != null) {\n      return category;\n    } else {\n      return this.performRounding(x);\n    }\n  }\n\n  getYTextForCategoriesGraph(y) {\n    return this.performRounding(y);\n  }\n\n  pointHasCustomTooltip(point) {\n    return point.tooltip != null && point.tooltip !== '';\n  }\n\n  createGraphClickHandler() {\n    const thisGraphController = this;\n    return function(event) {\n      if (thisGraphController.graphType === 'line' || thisGraphController.graphType === 'scatter') {\n        if (thisGraphController.isIgnoreClickEvent()) {\n          return;\n        } else {\n          thisGraphController.handleGraphClickEvent(event, this.series);\n        }\n      }\n    };\n  }\n\n  /*\n   * Check if the last drop event was within the last 100 milliseconds so we will not register the\n   * click. We need to do this because when students drag points, a click event is fired when they\n   * release the mouse button. we don't want that click event to create a new point so we need to\n   * ignore it.\n   */\n  isIgnoreClickEvent() {\n    const currentTime = new Date().getTime();\n    return this.lastDropTime != null && ((currentTime - this.lastDropTime) < 100);\n  }\n\n  handleGraphClickEvent(event, series) {\n    if (!this.isDisabled) {\n      const activeSeries = this.activeSeries;\n      if (activeSeries != null && this.canEdit(activeSeries)) {\n        const activeSeriesId = activeSeries.id;\n        for (const singleSeries of series) {\n          if (activeSeriesId === singleSeries.options.id && !singleSeries.visible) {\n            // the series is not visible so we will not add the point\n            alert(this.$translate('graph.studentAddingPointToHiddenSeriesMessage'));\n            return;\n          }\n        }\n        const x = this.performRounding(event.xAxis[0].value);\n        const y = this.performRounding(event.yAxis[0].value);\n        this.addPointToSeries(activeSeries, x, y);\n        this.addNextComponentStateToUndoStack = true;\n        this.studentDataChanged();\n      } else {\n        if (!this.isMousePlotLineOn()) {\n          // the student is trying to add a point to a series that can't be edited\n          alert(this.$translate('graph.youCanNotEditThisSeriesPleaseChooseASeriesThatCanBeEdited'));\n        }\n      }\n    }\n  }\n\n  createLegendItemClickHandler() {\n    const thisGraphController = this;\n    return function(event) {\n      const canHideSeries =\n        thisGraphController.componentContent.canStudentHideSeriesOnLegendClick === true;\n      if (canHideSeries) {\n        /*\n         * Update the show field in all the series depending on whether each line is active\n         * in the legend.\n         */\n        for (const yAxisSeries of this.yAxis.series) {\n          let series = thisGraphController.getSeriesById(yAxisSeries.userOptions.id);\n          if (this.userOptions.id === series.id) {\n            series.show = !yAxisSeries.visible;\n          } else {\n            series.show = yAxisSeries.visible;\n          }\n        }\n        thisGraphController.studentDataChanged();\n      }\n      return canHideSeries;\n    };\n  }\n\n  createPointDragEventHandler() {\n    const thisGraphController = this;\n    return function(event) {\n      if (!thisGraphController.isDisabled) {\n        const activeSeries = thisGraphController.activeSeries;\n        if (thisGraphController.canEdit(activeSeries)) {\n          thisGraphController.dragging = true;\n        }\n      }\n    };\n  }\n\n  createPointDropEventHandler() {\n    const thisGraphController = this;\n    return function(event) {\n      // the student has stopped dragging the point and dropped the point\n      if (!thisGraphController.isDisabled && thisGraphController.dragging) {\n        const activeSeries = thisGraphController.activeSeries;\n        thisGraphController.dragging = false;\n        thisGraphController.lastDropTime = new Date().getTime();\n        const target = event.target;\n        const x = thisGraphController.performRounding(target.x);\n        const y = thisGraphController.performRounding(target.y);\n        const index = target.index;\n        const data = activeSeries.data;\n        if (thisGraphController.isLimitXAxisType(thisGraphController.xAxis)) {\n          data[index] = [x, y];\n        } else if (thisGraphController.isCategoriesXAxisType(thisGraphController.xAxis)) {\n          data[index] = y;\n        }\n        thisGraphController.addNextComponentStateToUndoStack = true;\n        thisGraphController.studentDataChanged();\n      }\n    };\n  }\n\n  createGraphCallbackHandler() {\n    const thisGraphController = this;\n    return function(chart) {\n      thisGraphController.$timeout(function () {\n        thisGraphController.showXPlotLineIfOn('Drag Me');\n        thisGraphController.showYPlotLineIfOn('Drag Me');\n        if (thisGraphController.isMouseXPlotLineOn() ||\n          thisGraphController.isMouseYPlotLineOn() ||\n          thisGraphController.isSaveMouseOverPoints()) {\n          thisGraphController.setupMouseMoveListener();\n        }\n        chart.reflow();\n      }, 1000);\n    };\n  }\n\n  /**\n   * Overwrite the existing legend with the custom authored legend.\n   */\n  setCustomLegend() {\n    if (!this.hasCustomLegendBeenSet) {\n      if ($('.highcharts-legend').length > 0) {\n        // move the legend to the very left by setting the x position to 0\n        const userAgent = navigator.userAgent;\n        if (userAgent.indexOf('Firefox') !== -1) {\n          /*\n           * Regex to split the transform string into three groups. We will use\n           * this to replace the x value of the translate.\n           * Example\n           * \"translate(227, 294)\"\n           * The regex will create three groups\n           * group 1 = \"translate(\"\n           * group 2 = \"227\"\n           * group 3 = \", 294)\"\n           * The x value of the translate is captured in group 2.\n           */\n          const matrixRegEx = /(translate\\()(\\d*)(,\\s*\\d*\\))/;\n          const currentTransform = $('.highcharts-legend').attr('transform');\n          // replace the second group with 0\n          const newTransform = currentTransform.replace(matrixRegEx, '$10$3');\n          $('.highcharts-legend').attr('transform', newTransform);\n        } else {\n          /*\n           * Regex to split the transform string into three groups. We will use\n           * this to replace the x value of the matrix.\n           * Example\n           * \"matrix(1, 0, 0, 1, 227, 294)\"\n           * The regex will create three groups\n           * group 1 = \"matrix(1, 0, 0, 1, \"\n           * group 2 = \"227\"\n           * group 3 = \", 294)\"\n           * The x value of the matrix is captured in group 2.\n           */\n          const matrixRegEx = /(matrix\\(\\d*,\\s*\\d*,\\s*\\d*,\\s*\\d*,\\s*)(\\d*)(,\\s*\\d*\\))/;\n          const currentTransform = $('.highcharts-legend').css('transform');\n          // replace the second group with 0\n          const newTransform = currentTransform.replace(matrixRegEx, '$10$3');\n          $('.highcharts-legend').css('transform', newTransform);\n        }\n        $('.highcharts-legend').html(this.componentContent.customLegend);\n      }\n      this.hasCustomLegendBeenSet = true;\n    }\n  }\n\n  addPointToSeries(series, x, y) {\n    const data = series.data;\n    if (this.isCategoriesXAxisType(this.componentContent.xAxis)) {\n      data[x] = y;\n    } else {\n      data.push([x, y]);\n    }\n  }\n\n  /**\n   * Remove a point from a series. We will remove all points that have the given x value.\n   * @param series the series to remove the point from\n   * @param x the x value of the point to remove\n   */\n  removePointFromSeries(series, x) {\n    const data = series.data;\n    for (let d = 0; d < data.length; d++) {\n      const dataPoint = data[d];\n      const tempDataXValue = dataPoint[0];\n      if (x === tempDataXValue) {\n        data.splice(d, 1);\n        d--;\n      }\n    }\n  }\n\n  canEdit(series) {\n    return series.canEdit;\n  }\n\n  setSeries(series) {\n    this.series = series;\n  }\n\n  getSeries() {\n    return this.series;\n  }\n\n  setSeriesByIndex(series, index) {\n    this.series[index] = series;\n  }\n\n  getSeriesByIndex(index) {\n    return this.series[index];\n  }\n\n  setTrials(trials) {\n    this.trials = trials;\n  }\n\n  getTrials() {\n    return this.trials;\n  }\n\n  /**\n   * Get the index of the trial\n   * @param trial the trial object\n   * @return the index of the trial within the trials array\n   */\n  getTrialIndex(trial) {\n    for (let t = 0; t < this.trials.length; t++) {\n      const tempTrial = this.trials[t];\n      if (trial === tempTrial) {\n        return t;\n      }\n    }\n    return -1;\n  }\n\n  setActiveTrialByIndex(index) {\n    this.activeTrial = this.trials[index];\n  }\n\n  canEditTrial(trial) {\n    let series = trial.series;\n    for (const singleSeries of series) {\n      if (singleSeries.canEdit) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Set whether to show the active trial select menu\n   * @return whether to show the active trial select menu\n   */\n  showSelectActiveTrials() {\n    let editableTrials = 0;\n    for (const trial of this.trials) {\n      if (this.canEditTrial(trial) && trial.show) {\n        editableTrials++;\n        if (editableTrials > 1) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  setXAxis(xAxis) {\n    this.xAxis = this.UtilService.makeCopyOfJSONObject(xAxis);\n  }\n\n  getXAxis() {\n    return this.xAxis;\n  }\n\n  setYAxis(yAxis) {\n    this.yAxis = this.UtilService.makeCopyOfJSONObject(yAxis);\n  }\n\n  getYAxis() {\n    return this.yAxis;\n  }\n\n  setActiveSeries(series) {\n    this.activeSeries = series;\n  }\n\n  setActiveSeriesByIndex(index) {\n    const series = this.getSeriesByIndex(index);\n    this.setActiveSeries(series);\n  }\n\n  resetGraph() {\n    this.setSeries(this.UtilService.makeCopyOfJSONObject(this.componentContent.series));\n    if (this.componentContent.xAxis != null) {\n      this.setXAxis(this.componentContent.xAxis);\n    }\n    if (this.componentContent.yAxis != null) {\n      this.setYAxis(this.componentContent.yAxis);\n    }\n    // set the active series to null so that the default series will become selected later\n    this.setActiveSeries(null);\n    this.backgroundImage = this.componentContent.backgroundImage;\n    this.addNextComponentStateToUndoStack = true;\n    this.studentDataChanged();\n  }\n\n  resetSeries() {\n    let confirmMessage = '';\n    const seriesName = this.activeSeries.name;\n    if (seriesName === '') {\n      confirmMessage = this.$translate('graph.areYouSureYouWantToResetTheSeries');\n    } else {\n      confirmMessage = this.$translate('graph.areYouSureYouWantToResetTheNamedSeries', { seriesName: seriesName });\n    }\n    if (confirm(confirmMessage)) {\n      this.resetSeriesHelper();\n    }\n  }\n\n  resetSeriesHelper() {\n    if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n      this.newTrial();\n      const isReset = true;\n      this.handleConnectedComponents(isReset);\n    } else {\n      const activeSeriesIndex = this.getSeriesIndex(this.activeSeries);\n      let originalSeries = this.componentContent.series[activeSeriesIndex];\n      if (originalSeries != null) {\n        originalSeries = this.UtilService.makeCopyOfJSONObject(originalSeries);\n        this.setSeriesByIndex(originalSeries, activeSeriesIndex);\n        this.setActiveSeriesByIndex(activeSeriesIndex);\n        if (this.componentContent.xAxis != null) {\n          this.setXAxis(this.componentContent.xAxis);\n        }\n        if (this.componentContent.yAxis != null) {\n          this.setYAxis(this.componentContent.yAxis);\n        }\n        this.backgroundImage = this.componentContent.backgroundImage;\n        this.addNextComponentStateToUndoStack = true;\n        this.studentDataChanged();\n      }\n    }\n  }\n\n  setStudentWork(componentState) {\n    const studentData = componentState.studentData;\n    if (this.isStudentDataVersion1(studentData.version)) {\n      this.studentDataVersion = 1;\n      this.setSeries(this.UtilService.makeCopyOfJSONObject(studentData.series));\n    } else {\n      this.studentDataVersion = studentData.version;\n      if (studentData.trials != null && studentData.trials.length > 0) {\n        const trialsCopy = this.UtilService.makeCopyOfJSONObject(studentData.trials);\n        this.setTrials(trialsCopy);\n        const activeTrialIndex = studentData.activeTrialIndex;\n        if (activeTrialIndex == null) {\n          if (trialsCopy.length > 0) {\n            this.setActiveTrialByIndex(studentData.trials.length - 1);\n          }\n        } else {\n          this.setActiveTrialByIndex(activeTrialIndex);\n        }\n        if (this.activeTrial != null && this.activeTrial.series != null) {\n          this.series = this.activeTrial.series;\n        }\n      }\n    }\n    this.setTrialIdsToShow();\n    if (studentData.xAxis != null) {\n      this.setXAxis(studentData.xAxis);\n    }\n    if (studentData.yAxis != null) {\n      this.setYAxis(studentData.yAxis);\n    }\n    this.setActiveSeriesByIndex(studentData.activeSeriesIndex);\n    if (studentData.backgroundImage != null) {\n      this.backgroundImage = studentData.backgroundImage;\n    }\n    const submitCounter = studentData.submitCounter;\n    if (submitCounter != null) {\n      this.submitCounter = submitCounter;\n    }\n    if (studentData.mouseOverPoints != null &&\n      studentData.mouseOverPoints.length > 0) {\n      this.mouseOverPoints = studentData.mouseOverPoints;\n    }\n    this.processLatestStudentWork();\n  }\n\n  activeSeriesChanged() {\n    const useTimeoutSetupGraph = true;\n    this.studentDataChanged(useTimeoutSetupGraph);\n  }\n\n  studentDataChanged(useTimeoutSetupGraph) {\n    this.isDirty = true;\n    this.emitComponentDirty(true);\n    this.isSubmitDirty = true;\n    this.emitComponentSubmitDirty(true);\n    this.clearSaveText();\n    this.drawGraph(useTimeoutSetupGraph);\n    /*\n     * the student work in this component has changed so we will tell\n     * the parent node that the student data will need to be saved.\n     * this will also notify connected parts that this component's student\n     * data has changed.\n     */\n    const action = 'change';\n    this.createComponentState(action).then((componentState) => {\n      if (this.addNextComponentStateToUndoStack) {\n        if (this.previousComponentState != null) {\n          this.undoStack.push(this.previousComponentState);\n        }\n        /*\n         * Remember this current component state for the next time\n         * studentDataChanged() is called. The next time\n         * studentDataChanged() is called, this will be the previous\n         * component state and we will add it to the undoStack. We do not\n         * want to put the current component state onto the undoStack\n         * because if the student clicks undo and this current component\n         * state is on the top of the stack, the graph won't change.\n         * Basically the undoStack contains the component states from the\n         * current visit except for the current component state.\n         */\n        this.previousComponentState = componentState;\n        this.addNextComponentStateToUndoStack = false;\n      }\n      /*\n       * fire the componentStudentDataChanged event after a short timeout\n       * so that the other component handleConnectedComponentStudentDataChanged()\n       * listeners can initialize before this and are then able to process\n       * this componentStudentDataChanged event\n       */\n      this.$timeout(() => {\n        this.emitComponentStudentDataChanged(componentState);\n      }, 100);\n    });\n  }\n\n  /**\n   * Create a new component state populated with the student data\n   * @param action the action that is triggering creating of this component state\n   * e.g. 'submit', 'save', 'change'\n   * @return a promise that will return a component state\n   */\n  createComponentState(action) {\n    const deferred = this.$q.defer();\n    const componentState = this.NodeService.createNewComponentState();\n    const studentData = {};\n    studentData.version = this.studentDataVersion;\n    if (this.isStudentDataVersion1()) {\n      studentData.series = this.UtilService.makeCopyOfJSONObject(this.getSeries());\n    } else {\n      if (this.trials != null) {\n        studentData.trials = this.UtilService.makeCopyOfJSONObject(this.trials);\n        const activeTrialIndex = this.getTrialIndex(this.activeTrial);\n        studentData.activeTrialIndex = activeTrialIndex;\n      }\n    }\n    studentData.xAxis = this.UtilService.makeCopyOfJSONObject(this.getXAxis());\n    delete studentData.xAxis.plotBands;\n    if (this.componentContent.xAxis != null &&\n        this.componentContent.xAxis.plotBands != null) {\n      studentData.xAxis.plotBands = this.componentContent.xAxis.plotBands;\n    }\n    studentData.yAxis = this.getYAxis();\n    const activeSeriesIndex  = this.getSeriesIndex(this.activeSeries);\n    if (activeSeriesIndex != null) {\n      studentData.activeSeriesIndex = activeSeriesIndex;\n    }\n    const uploadedFileName = this.getUploadedFileName();\n    if (uploadedFileName != null) {\n      studentData.uploadedFileName = uploadedFileName;\n    }\n    if (this.backgroundImage != null) {\n      studentData.backgroundImage = this.backgroundImage;\n    }\n    studentData.submitCounter = this.submitCounter;\n    if (this.mouseOverPoints.length !== 0) {\n      studentData.mouseOverPoints = this.mouseOverPoints;\n    }\n    componentState.isSubmit = this.isSubmit;\n    componentState.studentData = studentData;\n    componentState.componentType = 'Graph';\n    componentState.nodeId = this.nodeId;\n    componentState.componentId = this.componentId;\n    this.isSubmit = false;\n    this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n    return deferred.promise;\n  }\n\n  /**\n   * Perform any additional processing that is required before returning the component state\n   * Note: this function must call deferred.resolve() otherwise student work will not be saved\n   * @param deferred a deferred object\n   * @param componentState the component state\n   * @param action the action that we are creating the component state for\n   * e.g. 'submit', 'save', 'change'\n   */\n  createComponentStateAdditionalProcessing(deferred, componentState, action) {\n    if (this.ProjectService.hasAdditionalProcessingFunctions(this.nodeId, this.componentId)) {\n      const additionalProcessingFunctions = this.ProjectService.getAdditionalProcessingFunctions(this.nodeId, this.componentId);\n      let allPromises = [];\n      for (const additionalProcessingFunction of additionalProcessingFunctions) {\n        const defer = this.$q.defer();\n        const promise = defer.promise;\n        allPromises.push(promise);\n        additionalProcessingFunction(defer, componentState, action);\n      }\n      this.$q.all(allPromises).then(() => {\n        deferred.resolve(componentState);\n      });\n    } else {\n      deferred.resolve(componentState);\n    }\n  }\n\n  showPrompt() {\n    return this.isPromptVisible === true;\n  }\n\n  showResetGraphButton() {\n    return this.isResetGraphButtonVisible === true;\n  }\n\n  showResetSeriesButton() {\n    return this.isResetSeriesButtonVisible === true;\n  }\n\n  getSeriesIndex(series) {\n    const multipleSeries = this.getSeries();\n    for (let s = 0; s < multipleSeries.length; s++) {\n      const singleSeries = multipleSeries[s];\n      if (series === singleSeries) {\n        return s;\n      }\n    }\n    return null;\n  }\n\n  getSeriesByIndex(index) {\n    const series = this.getSeries();\n    return series[index];\n  }\n\n  getSeriesById(id) {\n    for (const singleSeries of this.getSeries()) {\n      if (singleSeries.id === id) {\n        return singleSeries;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Get the trials from classmates\n   * @param nodeId the node id\n   * @param componentId the component id\n   * @param showClassmateWorkSource Whether to get the work only from the\n   * period the student is in or from all the periods. The possible values\n   * are \"period\" or \"class\".\n   * @return a promise that will return all the trials from the classmates\n   */\n  getTrialsFromClassmates(nodeId, componentId, periodId) {\n    const deferred = this.$q.defer();\n    this.StudentDataService.getClassmateStudentWork(nodeId, componentId, periodId)\n        .then((componentStates) => {\n      const promises = [];\n      for (const componentState of componentStates) {\n        promises.push(this.getTrialsFromComponentState(nodeId, componentId, componentState));\n      }\n      this.$q.all(promises).then((promiseResults) => {\n        const mergedTrials = [];\n        for (const trials of promiseResults) {\n          for (const trial of trials) {\n            mergedTrials.push(trial);\n          }\n        }\n        deferred.resolve(mergedTrials);\n      });\n    });\n    return deferred.promise;\n  }\n\n  /**\n   * Get the trials from a component state.\n   * Note: The code in this function doesn't actually require usage of a\n   * promise. It's just the code that calls this function that utilizes\n   * promise functionality. It's possible to refactor the code so that this\n   * function doesn't need to return a promise.\n   * @param nodeId the node id\n   * @param componentId the component id\n   * @param componentState the component state\n   * @return a promise that will return the trials from the component state\n   */\n  getTrialsFromComponentState(nodeId, componentId, componentState) {\n    const deferred = this.$q.defer();\n    const mergedTrials = [];\n    const nodePositionAndTitle = this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n    const studentData = componentState.studentData;\n    if (this.isStudentDataVersion1(studentData.version)) {\n      const series = studentData.series;\n      const newTrial = {\n        id: this.UtilService.generateKey(10),\n        name: nodePositionAndTitle,\n        show: true,\n        series: series\n      };\n      mergedTrials.push(newTrial);\n    } else {\n      const trials = studentData.trials;\n      if (trials != null) {\n        for (const trial of trials) {\n          const newTrial = this.UtilService.makeCopyOfJSONObject(trial);\n          newTrial.name = nodePositionAndTitle;\n          newTrial.show = true;\n          mergedTrials.push(newTrial);\n        }\n      }\n    }\n    deferred.resolve(mergedTrials);\n    return deferred.promise;\n  }\n\n  /**\n   * Handle importing external data (we only support csv for now)\n   * @param studentAsset CSV file student asset\n   */\n  attachStudentAsset(studentAsset) {\n    this.StudentAssetService.copyAssetForReference(studentAsset).then( (copiedAsset) => {\n      this.StudentAssetService.getAssetContent(copiedAsset).then( (assetContent) => {\n        const rowData = this.StudentDataService.CSVToArray(assetContent);\n        const params = {\n          skipFirstRow: true,\n          xColumn: 0,\n          yColumn: 1\n        };\n        const seriesData = this.convertRowDataToSeriesData(rowData, params);\n        const newSeriesIndex = this.series.length;\n        const series = {\n          name: copiedAsset.fileName,\n          color: this.seriesColors[newSeriesIndex],\n          marker: {\n            'symbol': this.seriesMarkers[newSeriesIndex]\n          },\n          canEdit: false\n        };\n        this.series[newSeriesIndex] = series;\n        series.data = seriesData;\n        this.isDirty = true;\n        this.addNextComponentStateToUndoStack = true;\n        this.studentDataChanged();\n      });\n    });\n  }\n\n  /**\n   * Convert the table data into series data\n   * @param componentState the component state to get table data from\n   * @param params (optional) the params to specify what columns\n   * and rows to use from the table data\n   */\n  convertRowDataToSeriesData(rows, params) {\n    const data = [];\n    let skipFirstRow = this.getSkipFirstRowValue(params);\n    let xColumn = this.getXColumnValue(params);\n    let yColumn = this.getYColumnValue(params);\n    for (let r = 0; r < rows.length; r++) {\n      if (skipFirstRow && r === 0) {\n        continue;\n      }\n      const row = rows[r];\n      const xCell = row[xColumn];\n      const yCell = row[yColumn];\n      if (xCell != null && yCell != null) {\n        this.addPointFromTableIntoData(xCell, yCell, data);\n      }\n    }\n    return data;\n  }\n\n  getSkipFirstRowValue(params) {\n    if (params == null) {\n      return false;\n    } else {\n      return params.skipFirstRow;\n    }\n  }\n\n  getXColumnValue(params) {\n    if (params == null || params.xColumn == null) {\n      return 0;\n    } else {\n      return params.xColumn;\n    }\n  }\n\n  getYColumnValue(params) {\n    if (params == null || params.yColumn == null) {\n      return 1;\n    } else {\n      return params.yColumn;\n    }\n  }\n\n  addPointFromTableIntoData(xCell, yCell, data) {\n    let xText = xCell.text;\n    let yText = yCell.text;\n    if (xText != null && xText !== '' && yText != null && yText !== '') {\n      const xNumber = Number(xText);\n      const yNumber = Number(yText);\n      const point = [];\n      if (!isNaN(xNumber)) {\n        point.push(xNumber);\n      } else {\n        point.push(xText);\n      }\n      if (!isNaN(yNumber)) {\n        point.push(yNumber);\n      } else {\n        point.push(yText);\n      }\n      data.push(point);\n    }\n  }\n\n  setSeriesIds(allSeries) {\n    const usedSeriesIds = this.getAllUsedSeriesIds(allSeries);\n    for (const singleSeries of allSeries) {\n      if (singleSeries.id == null) {\n        const nextSeriesId = this.getNextSeriesId(usedSeriesIds);\n        singleSeries.id = nextSeriesId;\n        usedSeriesIds.push(nextSeriesId);\n      }\n    }\n  }\n\n  getAllUsedSeriesIds(allSeries) {\n    const usedSeriesIds = [];\n    for (const singleSeries of allSeries) {\n      usedSeriesIds.push(singleSeries.id);\n    }\n    return usedSeriesIds;\n  }\n\n  /**\n   * Get the next available series id\n   * @param usedSeriesIds an array of used series ids\n   * @returns the next available series id\n   */\n  getNextSeriesId(usedSeriesIds) {\n    let nextSeriesId = null;\n    let currentSeriesNumber = 0;\n    let foundNextSeriesId = false;\n    while (!foundNextSeriesId) {\n      const tempSeriesId = 'series-' + currentSeriesNumber;\n      if (usedSeriesIds.indexOf(tempSeriesId) === -1) {\n        nextSeriesId = tempSeriesId;\n        foundNextSeriesId = true;\n      } else {\n        currentSeriesNumber++;\n      }\n    }\n    return nextSeriesId;\n  }\n\n  handleDeleteKeyPressed() {\n    const series = this.activeSeries;\n    if (this.canEdit(series)) {\n      const chart = $('#' + this.chartId).highcharts();\n      const selectedPoints = chart.getSelectedPoints();\n      let index = null;\n      if (selectedPoints != null) {\n        const indexesToDelete = [];\n        const data = series.data;\n        for (const selectedPoint of selectedPoints) {\n          index = selectedPoint.index;\n          const dataPoint = data[index];\n          if (dataPoint != null) {\n            /*\n             * make sure the x and y values match the selected point\n             * that we are going to delete\n             */\n            if (dataPoint[0] === selectedPoint.x || dataPoint[1] === selectedPoint.y) {\n              indexesToDelete.push(index);\n            }\n          }\n        }\n        /*\n         * order the array from largest to smallest. we are doing this\n         * so that we delete the points from the end first. if we delete\n         * points starting from lower indexes first, then the indexes\n         * will shift and we will end up deleting the wrong points.\n         */\n        indexesToDelete.sort().reverse();\n        // loop through all the indexes and remove them from the series data\n        for (let i = 0; i < indexesToDelete.length; i++) {\n          data.splice(indexesToDelete[i], 1);\n        }\n        this.addNextComponentStateToUndoStack = true;\n        this.studentDataChanged();\n      }\n    }\n  }\n\n  createNewSeries() {\n    return {\n      name: '',\n      data: [],\n      marker: {\n        symbol: 'circle'\n      },\n      canEdit: true\n    };\n  }\n\n  isActiveSeries(series) {\n    const seriesIndex = this.getSeriesIndex(series);\n    return this.isActiveSeriesIndex(seriesIndex);\n  }\n\n  isActiveSeriesIndex(seriesIndex) {\n    return this.series.indexOf(this.activeSeries) === seriesIndex;\n  }\n\n  isShowSelectSeriesInput() {\n    return this.trialIdsToShow.length && this.hasEditableSeries() &&\n        this.isSelectSeriesVisible && this.series.length > 1;\n  }\n\n  newTrialButtonClicked() {\n    this.newTrial();\n    this.addNextComponentStateToUndoStack = true;\n    this.studentDataChanged();\n  }\n\n  newTrial() {\n    const activeSeriesIndex = this.getSeriesIndex(this.activeSeries);\n    const trialNumbers = this.getTrialNumbers();\n    let maxTrialNumber = 0;\n    if (trialNumbers.length > 0) {\n      maxTrialNumber = trialNumbers[trialNumbers.length - 1];\n    }\n    if (this.hideAllTrialsOnNewTrial) {\n      for (const trial of this.trials) {\n        trial.show = false;\n      }\n    }\n    const series = this.UtilService.makeCopyOfJSONObject(this.componentContent.series);\n    const trial = {\n      name: this.$translate('graph.trial') + ' ' + (maxTrialNumber + 1),\n      series: series,\n      show: true,\n      id: this.UtilService.generateKey(10)\n    };\n    this.trials.push(trial);\n    this.activeTrial = trial;\n    this.series = series;\n    if (this.activeSeries == null) {\n      this.setDefaultActiveSeries();\n    } else {\n      this.setActiveSeriesByIndex(activeSeriesIndex);\n    }\n    this.setTrialIdsToShow();\n  }\n\n  getTrialNumbers() {\n    const trialNumbers = [];\n    const trialNumberRegex = /Trial (\\d*)/;\n    for (const trial of this.trials) {\n      const tempTrialName = trial.name;\n      const match = trialNumberRegex.exec(tempTrialName);\n      if (match != null && match.length > 0) {\n        const tempTrialNumber = match[1];\n        trialNumbers.push(parseInt(tempTrialNumber));\n      }\n    }\n    trialNumbers.sort();\n    return trialNumbers;\n  }\n\n  deleteTrial(trialIndex) {\n    const trialToRemove = this.trials[trialIndex];\n    const trialToRemoveId = trialToRemove.id;\n    this.trials.splice(trialIndex, 1);\n    for (let t = 0; t < this.trialIdsToShow.length; t++) {\n      if (trialToRemoveId === this.trialIdsToShow[t]) {\n        this.trialIdsToShow.splice(t, 1);\n      }\n    }\n    if (this.trials.length === 0) {\n      // there are no more trials so we will create a new empty trial\n      this.newTrial();\n      this.setXAxis(this.componentContent.xAxis);\n      this.setYAxis(this.componentContent.yAxis);\n    } else if (this.trials.length > 0) {\n      if (trialToRemove === this.activeTrial) {\n        this.makeHighestTrialActive();\n      }\n    }\n    this.setTrialIdsToShow();\n    this.addNextComponentStateToUndoStack = true;\n    this.studentDataChanged();\n    this.selectedTrialsText = this.getSelectedTrialsText();\n  }\n\n  makeHighestTrialActive() {\n    this.activeTrial = null;\n    this.activeSeries = null;\n    this.series = [];\n    const highestTrial = this.getHighestTrial();\n    if (highestTrial != null) {\n      const seriesIndex = this.getSeriesIndex(this.activeSeries);\n      this.activeTrial = highestTrial;\n      this.setSeries(this.activeTrial.series);\n      if (seriesIndex != null) {\n        this.setActiveSeriesByIndex(seriesIndex);\n      }\n    }\n  }\n\n  getHighestTrial() {\n    let highestTrialIndex = null;\n    let highestTrial = null;\n    for (const trialId of this.trialIdsToShow) {\n      const trial = this.getTrialById(trialId);\n      const trialIndex = this.getTrialIndex(trial);\n      if (highestTrialIndex == null || trialIndex > highestTrialIndex) {\n        highestTrialIndex = trialIndex;\n        highestTrial = trial;\n      }\n    }\n    return highestTrial;\n  }\n\n  activeTrialChanged() {\n    const seriesIndex = this.getSeriesIndex(this.activeSeries);\n    const activeTrial = this.activeTrial;\n    this.series = activeTrial.series;\n    this.setActiveSeriesByIndex(seriesIndex);\n    this.addNextComponentStateToUndoStack = true;\n    this.studentDataChanged();\n  }\n\n  trialIdsToShowChanged() {\n    this.showOrHideTrials(this.trialIdsToShow);\n    this.setActiveTrialAndSeriesByTrialIdsToShow(this.trialIdsToShow);\n    // hack: for some reason, the ids to show model gets out of sync when deleting a trial, for example\n    // TODO: figure out why this check is sometimes necessary and remove\n    for (let a = 0; a < this.trialIdsToShow.length; a++) {\n      const idToShow = this.trialIdsToShow[a];\n      if (!this.getTrialById(idToShow)) {\n        this.trialIdsToShow.splice(a, 1);\n      }\n    }\n    /*\n     * Make sure the trialIdsToShow has actually changed. Sometimes\n     * trialIdsToShowChanged() gets called even if trialIdsToShow\n     * does not change because the model for the trial checkbox\n     * select is graphController.trials. This means trialIdsToShowChanged()\n     * will be called when we replace the trials in createComponentState()\n     * but this does not necessarily mean the trialIdsToShow has changed.\n     * We do this check to minimize the number of times studentDataChanged()\n     * is called.\n     */\n    if (!this.UtilService.arraysContainSameValues(this.previousTrialIdsToShow, this.trialIdsToShow)) {\n      this.trialIdsToShow = this.trialIdsToShow;\n      this.studentDataChanged();\n    }\n    /*\n     * Remember the trial ids to show so we can use it to make sure the\n     * trialIdsToShow actually change the next time trialIdsToShowChanged()\n     * is called.\n     */\n    this.previousTrialIdsToShow = this.UtilService.makeCopyOfJSONObject(this.trialIdsToShow);\n    this.selectedTrialsText = this.getSelectedTrialsText();\n  }\n\n  showOrHideTrials(trialIdsToShow) {\n    for (const trial of this.trials) {\n      if (trialIdsToShow.indexOf(trial.id) !== -1) {\n        trial.show = true;\n      } else {\n        trial.show = false;\n        if (this.activeTrial != null && this.activeTrial.id === trial.id) {\n          this.activeTrial = null;\n          this.activeSeries = null;\n          this.series = [];\n        }\n      }\n    }\n  }\n\n  setActiveTrialAndSeriesByTrialIdsToShow(trialIdsToShow) {\n    if (trialIdsToShow.length > 0) {\n      const lastShownTrialId = trialIdsToShow[trialIdsToShow.length - 1];\n      const lastShownTrial = this.getTrialById(lastShownTrialId);\n      if (this.hasEditableSeries(lastShownTrial.series)) {\n        this.activeTrial = lastShownTrial;\n        let seriesIndex = this.getSeriesIndex(this.activeSeries);\n        if (!this.isSeriesEditable(this.activeTrial.series, seriesIndex)) {\n          seriesIndex = this.getLatestEditableSeriesIndex(this.activeTrial.series);\n        }\n        this.setSeries(this.activeTrial.series);\n        if (seriesIndex != null) {\n          this.setActiveSeriesByIndex(seriesIndex);\n        }\n      }\n    }\n  }\n\n  isSeriesEditable(multipleSeries, index) {\n    if (multipleSeries[index] != null) {\n      return multipleSeries[index].canEdit;\n    }\n    return false;\n  }\n\n  getLatestEditableSeriesIndex(multipleSeries) {\n    for (let s = multipleSeries.length - 1; s >= 0; s--) {\n      if (multipleSeries[s].canEdit) {\n        return s;\n      }\n    }\n    return null;\n  }\n\n  setTrialIdsToShow() {\n    const idsToShow = [];\n    for (const trial of this.trials) {\n      if (trial.show) {\n        idsToShow.push(trial.id);\n      }\n    }\n    this.trialIdsToShow = idsToShow;\n  }\n\n  getSelectedTrialsText() {\n    if (this.trialIdsToShow.length === 1) {\n      const id = this.trialIdsToShow[0];\n      return this.getTrialById(id).name;\n    } else if (this.trialIdsToShow.length > 1) {\n      return this.trialIdsToShow.length + ' ' + this.$translate('graph.trialsShown');\n    } else {\n      return this.$translate('graph.selectTrialsToShow');\n    }\n  }\n\n  /**\n   * Process the student data that we have received from a connected component.\n   * @param studentData The student data from a connected component.\n   * @param params The connected component params.\n   */\n  processConnectedComponentStudentData(studentData, params) {\n    if (params.fields == null) {\n      /*\n       * we do not need to look at specific fields so we will directly\n       * parse the the trial data from the student data.\n       */\n      this.parseLatestTrial(studentData, params);\n    } else {\n      // we need to process specific fields in the student data\n      for (const field of params.fields) {\n        const name = field.name;\n        const when = field.when;\n        const action = field.action;\n        const firstTime = false;\n        if (when === 'firstTime' && firstTime === true) {\n          if (action === 'write') {\n            // TODO\n          } else if (action === 'read') {\n            // TODO\n          }\n        } else if (when === 'always') {\n          if (action === 'write') {\n            // TODO\n          } else if (action === 'read') {\n            this.readConnectedComponentFieldFromStudentData(studentData, params, name);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Read the field from the new student data and perform any processing on our\n   * existing student data based upon the new student data.\n   * @param studentData The new student data from the connected component.\n   * @param params The connected component params.\n   * @param name The field name to read and process.\n   */\n  readConnectedComponentFieldFromStudentData(studentData, params, name) {\n    if (name === 'selectedCells') {\n      // only show the trials that are specified in the selectedCells array\n      let selectedCells = studentData[name];\n      if (selectedCells != null) {\n        let selectedTrialIds = this.convertSelectedCellsToTrialIds(selectedCells);\n        for (let trial of this.trials) {\n          if (selectedTrialIds.includes(trial.id)) {\n            trial.show = true;\n          } else {\n            trial.show = false;\n          }\n        }\n      }\n    } else if (name === 'trial') {\n      this.parseLatestTrial(studentData, params);\n    } else if (name === 'trialIdsToDelete') {\n      this.deleteTrialsByTrialId(studentData.trialIdsToDelete);\n    }\n  }\n\n  /**\n   * Delete the trials\n   * @param trialIdsToDelete An array of trial ids to delete\n   */\n  deleteTrialsByTrialId(trialIdsToDelete) {\n    if (trialIdsToDelete != null) {\n      for (let trialIdToDelete of trialIdsToDelete) {\n        this.deleteTrialId(trialIdToDelete);\n      }\n    }\n  }\n\n  /**\n   * Delete a trial\n   * @param trialId The trial id string to delete\n   */\n  deleteTrialId(trialId) {\n    for (let t = 0; t < this.trials.length; t++) {\n      let trial = this.trials[t];\n      if (trial.id === trialId) {\n        this.trials.splice(t, 1);\n        break;\n      }\n    }\n  }\n\n  /**\n   * Parse the latest trial and set it into the component\n   * @param studentData the student data object that has a trials field\n   * @param params (optional) parameters that specify what to use from the\n   * student data\n   */\n  parseLatestTrial(studentData, params) {\n    const latestStudentDataTrial = this.getLatestStudentDataTrial(studentData);\n    const latestStudentDataTrialId = latestStudentDataTrial.id;\n    this.removeDefaultTrialIfNecessary(latestStudentDataTrialId);\n    const latestTrial = this.createNewTrialIfNecessary(latestStudentDataTrialId);\n    this.copySeriesIntoTrial(latestStudentDataTrial, latestTrial, studentData, params);\n    this.copyTrialNameIntoTrial(latestStudentDataTrial, latestTrial);\n    this.copyPlotBandsIntoTrial(latestStudentDataTrial, latestTrial);\n    this.setLastTrialToActive();\n    if (studentData.xPlotLine != null) {\n      this.showXPlotLine(studentData.xPlotLine);\n    }\n    this.setTrialIdsToShow();\n    this.activeTrialChanged();\n  }\n\n  getLatestStudentDataTrial(studentData) {\n    let latestStudentDataTrial = null;\n    if (studentData.trial != null) {\n      latestStudentDataTrial = studentData.trial;\n    }\n    if (studentData.trials != null && studentData.trials.length > 0) {\n      latestStudentDataTrial = studentData.trials[studentData.trials.length - 1];\n    }\n    return latestStudentDataTrial;\n  }\n\n  hideAllTrials() {\n    for (const trial of this.trials) {\n      trial.show = false;\n    }\n  }\n\n  createNewTrial(id) {\n    return {\n      id: id,\n      name: '',\n      series: [],\n      show: true\n    };\n  }\n\n  copySeries(series) {\n    const newSeries = {\n      name: series.name,\n      data: series.data,\n      color: series.color,\n      canEdit: false,\n      allowPointSelect: false\n    };\n    if (series.marker != null) {\n      newSeries.marker = series.marker;\n    }\n    if (series.dashStyle != null) {\n      newSeries.dashStyle = series.dashStyle;\n    }\n    if (series.allowPointMouseOver != null) {\n      newSeries.allowPointMouseOver = series.allowPointMouseOver;\n    }\n    return newSeries;\n  }\n\n  removeDefaultTrialIfNecessary(latestStudentDataTrialId) {\n    /*\n     * remove the first default trial that is automatically created\n     * when the student first visits the component otherwise there\n     * will be a blank trial.\n     */\n    if (this.trials.length > 0) {\n      const firstTrial = this.trials[0];\n      /*\n       * check if the trial has any series. if the trial doesn't\n       * have any series it means it was automatically created by\n       * the component.\n       */\n      if (this.isTrialHasEmptySeries(firstTrial)) {\n        if (firstTrial.id == null || firstTrial.id !== latestStudentDataTrialId) {\n          this.deleteFirstTrial(this.trials);\n        }\n      }\n    }\n  }\n\n  isTrialHasEmptySeries(trial) {\n    return trial.series == null || trial.series.length === 0 || this.isSeriesEmpty(trial.series);\n  }\n\n  isSeriesEmpty(series) {\n    return series.length === 1 && series[0].data.length === 0;\n  }\n\n  deleteFirstTrial(trials) {\n    trials.shift();\n  }\n\n  createNewTrialIfNecessary(trialId) {\n    let trial = this.getTrialById(trialId);\n    if (trial == null) {\n      if (this.hideAllTrialsOnNewTrial) {\n        this.hideAllTrials();\n      }\n      trial = this.createNewTrial(trialId);\n      trial.show = true;\n      this.setXAxis(this.componentContent.xAxis);\n      this.setYAxis(this.componentContent.yAxis);\n      this.trials.push(trial);\n    }\n    return trial;\n  }\n\n  copySeriesIntoTrial(oldTrial, newTrial, studentData, params) {\n    newTrial.series = [];\n    const series = oldTrial.series;\n    for (let s = 0; s < series.length; s++) {\n      if (this.isAddSeries(params, s)) {\n        newTrial.series.push(this.copySeries(series[s]));\n        if (params.highlightLatestPoint) {\n          this.$timeout(() => {\n            this.highlightPointOnX(studentData.trial.id, studentData.xPointToHighlight);\n          }, 1);\n        }\n      }\n    }\n  }\n\n  isAddSeries(params, seriesIndex) {\n    return params == null || params.seriesNumbers == null || params.seriesNumbers.length === 0 ||\n      (params.seriesNumbers != null && params.seriesNumbers.indexOf(seriesIndex) !== -1);\n  }\n\n  copyTrialNameIntoTrial(oldTrial, newTrial) {\n    if (oldTrial.name != null) {\n      newTrial.name = oldTrial.name;\n    }\n  }\n\n  copyPlotBandsIntoTrial(oldTrial, newTrial) {\n    if (oldTrial.xAxis != null && oldTrial.xAxis.plotBands != null) {\n      if (newTrial.xAxis == null) {\n        newTrial.xAxis = {};\n      }\n      newTrial.xAxis.plotBands = oldTrial.xAxis.plotBands;\n    }\n  }\n\n  setLastTrialToActive() {\n    if (this.trials.length > 0) {\n      this.activeTrial = this.trials[this.trials.length - 1];\n      this.activeTrial.show = true;\n    }\n  }\n\n  getTrialById(id) {\n    for (const trial of this.trials) {\n      if (trial.id === id) {\n        return trial;\n      }\n    }\n    return null;\n  }\n\n  hasEditableSeries(series = this.getSeries()) {\n    for (const singleSeries of series) {\n      if (singleSeries.canEdit) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Update the x and y axis min and max values if necessary to make sure\n   * all points are visible in the graph view.\n   * @param series the an array of series\n   * @param xAxis the x axis object\n   * @param yAxis the y axis object\n   */\n  updateMinMaxAxisValues(series, xAxis, yAxis) {\n    const minMaxValues = this.getMinMaxValues(series);\n    this.updateXAxisMinMaxIfNecessary(xAxis, minMaxValues);\n    this.updateYAxisMinMaxIfNecessary(yAxis, minMaxValues);\n  }\n\n  updateXAxisMinMaxIfNecessary(xAxis, minMaxValues) {\n    if (xAxis != null && !xAxis.locked) {\n      if (minMaxValues.xMin < xAxis.min) {\n        // set the value to null so highcharts will automatically set the value\n        xAxis.min = null;\n        xAxis.minPadding = 0.2;\n      }\n      if (minMaxValues.xMax >= xAxis.max) {\n        // set the value to null so highcharts will automatically set the value\n        xAxis.max = null;\n        xAxis.maxPadding = 0.2;\n      }\n    }\n  }\n\n  updateYAxisMinMaxIfNecessary(yAxis, minMaxValues) {\n    if (yAxis != null && !yAxis.locked) {\n      if (minMaxValues.yMin < yAxis.min) {\n        // set the value to null so highcharts will automatically set the value\n        yAxis.min = null;\n        yAxis.minPadding = 0.2;\n      }\n      if (minMaxValues.yMax >= yAxis.max) {\n        // set the value to null so highcharts will automatically set the value\n        yAxis.max = null;\n        yAxis.maxPadding = 0.2;\n      }\n    }\n  }\n\n  getMinMaxValues(series) {\n    let xMin = 0;\n    let xMax = 0;\n    let yMin = 0;\n    let yMax = 0;\n    for (const singleSeries of series) {\n      const data = singleSeries.data;\n      for (const dataPoint of data) {\n        if (dataPoint != null) {\n          let tempX = null;\n          let tempY = null;\n          if (dataPoint.constructor.name === 'Object') {\n            tempX = dataPoint.x;\n            tempY = dataPoint.y;\n          } else if (dataPoint.constructor.name === 'Array') {\n            tempX = dataPoint[0];\n            tempY = dataPoint[1];\n          } else if (dataPoint.constructor.name === 'Number') {\n            tempY = dataPoint;\n          }\n          if (tempX > xMax) {\n            xMax = tempX;\n          }\n          if (tempX < xMin) {\n            xMin = tempX;\n          }\n          if (tempY > yMax) {\n            yMax = tempY;\n          }\n          if (tempY < yMin) {\n            yMin = tempY;\n          }\n        }\n      }\n    }\n    const result = {\n      xMin: xMin,\n      xMax: xMax,\n      yMin: yMin,\n      yMax: yMax\n    };\n    return result;\n  }\n\n  clearSeriesIds(series) {\n    for (const singleSeries of series) {\n      singleSeries.id = null;\n    }\n  }\n\n  snipGraph($event) {\n    const chart = $('#' + this.chartId).highcharts();\n    const svgString = chart.getSVG();\n    const hiddenCanvas = document.getElementById(this.hiddenCanvasId);\n    canvg(hiddenCanvas, svgString, { renderCallback: () => {\n        const base64Image = hiddenCanvas.toDataURL('image/png');\n        const imageObject = this.UtilService.getImageObjectFromBase64String(base64Image);\n        this.NotebookService.addNote($event, imageObject);\n      }\n    });\n  }\n\n  readCSVIntoActiveSeries(csvString) {\n    const lines = csvString.split(/\\r\\n|\\n/);\n    this.activeSeries.data = [];\n    for (const line of lines) {\n      const values = line.split(',');\n      const x = parseFloat(values[0]);\n      const y = parseFloat(values[1]);\n      if (!isNaN(x) && !isNaN(y)) {\n        const dataPoint = [x, y];\n        this.activeSeries.data.push(dataPoint);\n      }\n    }\n  }\n\n  setUploadedFileName(fileName) {\n    this.uploadedFileName = fileName;\n  }\n\n  getUploadedFileName() {\n    return this.uploadedFileName;\n  }\n\n  /**\n   * Convert all the data points in the series\n   * @param series convert the data points in the series\n   * @param xAxisType the new x axis type to convert to\n   */\n  convertSeriesDataPoints(series, xAxisType) {\n    const data = series.data;\n    const convertedData = [];\n    for (let d = 0; d < data.length; d++) {\n      const oldDataPoint = data[d];\n      if (xAxisType == null || xAxisType === '' || xAxisType === 'limits') {\n        if (!Array.isArray(oldDataPoint)) {\n          convertedData.push([(d + 1), oldDataPoint]);\n        } else {\n          convertedData.push(oldDataPoint);\n        }\n      } else if (xAxisType === 'categories') {\n        if (Array.isArray(oldDataPoint)) {\n          convertedData.push(oldDataPoint[1]);\n        } else {\n          convertedData.push(oldDataPoint);\n        }\n      }\n    }\n    series.data = convertedData;\n  }\n\n  /**\n   * Round the number according to the authoring settings\n   * @param number a number\n   * @return the rounded number\n   */\n  performRounding(number) {\n    if (this.componentContent.roundValuesTo === 'integer') {\n      number = this.roundToNearestInteger(number);\n    } else if (this.componentContent.roundValuesTo === 'tenth') {\n      number = this.roundToNearestTenth(number);\n    } else if (this.componentContent.roundValuesTo === 'hundredth') {\n      number = this.roundToNearestHundredth(number);\n    }\n    return number;\n  }\n\n  roundToNearestInteger(x) {\n    x = parseFloat(x);\n    x = Math.round(x);\n    return x;\n  }\n\n  roundToNearestTenth(x) {\n    x = parseFloat(x);\n    x = Math.round(x * 10) / 10;\n    return x;\n  }\n\n  roundToNearestHundredth(x) {\n    x = parseFloat(x);\n    x = Math.round(x * 100) / 100;\n    return x;\n  }\n\n  /**\n   * Set the active series to the first series that the student can edit\n   * or if there are no series the student can edit, set the active series\n   * to the first series.\n   */\n  setDefaultActiveSeries() {\n    for (let s = 0; s < this.series.length; s++) {\n      const singleSeries = this.series[s];\n      if (singleSeries.canEdit) {\n        this.setActiveSeriesByIndex(s);\n        break;\n      }\n    }\n    if (this.activeSeries == null && this.series.length > 0) {\n      /*\n       * we did not find any series that the student can edit so we will\n       * just set the active series to be the first series\n       */\n      this.setActiveSeriesByIndex(0);\n    }\n  }\n\n  setVerticalPlotLine(x) {\n    const plotLine = {\n      color: 'red',\n      width: 2,\n      value: x,\n      zIndex: 5\n    };\n    this.plotLines = [\n      plotLine\n    ];\n    /*\n     * Call $apply() so that the red plot line position gets updated. If we\n     * don't call this, the line position won't get updated unless the student\n     * moves their mouse around which forces angular to update.\n     */\n    this.$timeout(() => {\n      this.$scope.$apply();\n    });\n  }\n\n  /**\n   * Import any work we need from connected components\n   * @param {boolean} isReset (optional) Whether this function call was\n   * triggered by the student clicking the reset button.\n   */\n  handleConnectedComponents(isReset) {\n    /*\n     * This will hold all the promises that will return the trials that we want. The trials will\n     * either be from this student or from classmates.\n     */\n    const promises = [];\n    /*\n     * this will end up containing the background from the last\n     * connected component\n     */\n    let connectedComponentBackgroundImage = null;\n    for (const connectedComponent of this.componentContent.connectedComponents) {\n      const type = connectedComponent.type;\n      if (type === 'showClassmateWork') {\n        connectedComponentBackgroundImage =\n            this.handleShowClassmateWorkConnectedComponent(connectedComponent, promises);\n      } else if (type === 'showWork' || type === 'importWork' || type == null) {\n        connectedComponentBackgroundImage =\n            this.handleShowOrImportWorkConnectedComponent(connectedComponent, promises);\n      }\n    }\n\n    /*\n     * wait for all the promises to resolve because we may need to request the classmate work from\n     * the server\n     */\n    this.$q.all(promises).then(\n        this.handleConnectedComponentPromiseResults(connectedComponentBackgroundImage, isReset));\n  }\n\n  handleShowClassmateWorkConnectedComponent(connectedComponent, promises) {\n    const nodeId = connectedComponent.nodeId;\n    const componentId = connectedComponent.componentId;\n    let connectedComponentBackgroundImage = null;\n    this.isDisabled = true;\n    if (this.ConfigService.isPreview()) {\n      const latestComponentState = this.StudentDataService.\n          getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n      if (latestComponentState != null) {\n        promises.push(this.getTrialsFromComponentState(nodeId, componentId, latestComponentState));\n        if (latestComponentState != null &&\n            latestComponentState.studentData != null &&\n            latestComponentState.studentData.backgroundImage != null) {\n          connectedComponentBackgroundImage = latestComponentState.studentData.backgroundImage;\n        }\n      }\n    } else {\n      let periodId = null;\n      if (connectedComponent.showClassmateWorkSource === 'period') {\n        periodId = this.ConfigService.getPeriodId();\n      }\n      promises.push(this.getTrialsFromClassmates(nodeId, componentId, periodId));\n      let component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n      component = this.ProjectService.injectAssetPaths(component);\n      connectedComponentBackgroundImage = component.backgroundImage;\n    }\n    return connectedComponentBackgroundImage;\n  }\n\n  handleShowOrImportWorkConnectedComponent(connectedComponent, promises) {\n    const nodeId = connectedComponent.nodeId;\n    const componentId = connectedComponent.componentId;\n    let connectedComponentBackgroundImage = null;\n    let latestComponentState =\n        this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n    if (latestComponentState != null) {\n      if (latestComponentState.componentType === 'ConceptMap' ||\n          latestComponentState.componentType === 'Draw' ||\n          latestComponentState.componentType === 'Label') {\n        let connectedComponentOfComponentState = this.UtilService.\n            getConnectedComponentByComponentState(this.componentContent, latestComponentState);\n        if (connectedComponentOfComponentState.importWorkAsBackground === true) {\n          promises.push(this.setComponentStateAsBackgroundImage(latestComponentState));\n        }\n      } else {\n        if (connectedComponent.type === 'showWork') {\n          latestComponentState = this.UtilService.makeCopyOfJSONObject(latestComponentState);\n          const canEdit = false;\n          this.setCanEditForAllSeriesInComponentState(latestComponentState, canEdit);\n        }\n        promises.push(this.getTrialsFromComponentState(nodeId, componentId, latestComponentState));\n        if (latestComponentState != null &&\n          latestComponentState.studentData != null &&\n          latestComponentState.studentData.backgroundImage != null) {\n          connectedComponentBackgroundImage = latestComponentState.studentData.backgroundImage;\n        }\n      }\n    }\n    return connectedComponentBackgroundImage;\n  }\n\n  handleConnectedComponentPromiseResults(connectedComponentBackgroundImage, isReset) {\n    return (promiseResults) => {\n      /*\n       * First we will accumulate all the trials into one new component state and then we will\n       * perform connected component processing.\n       */\n      const mergedTrials = [];\n      /*\n       * Loop through all the promise results. There will be a promise result for each component we\n       * are importing from. Each promiseResult is an array of trials or an image url.\n       */\n      let trialCount = 0;\n      let activeTrialIndex = 0;\n      let activeSeriesIndex = 0;\n      for (const promiseResult of promiseResults) {\n        if (promiseResult instanceof Array) {\n          const trials = promiseResult;\n          for (const trial of trials) {\n            if (this.canEditTrial(trial)) {\n              activeTrialIndex = trialCount;\n            }\n            mergedTrials.push(trial);\n            trialCount++;\n          }\n        } else if (typeof(promiseResult) === 'string') {\n          connectedComponentBackgroundImage = promiseResult;\n        }\n      }\n      activeTrialIndex =\n          this.addTrialFromThisComponentIfNecessary(mergedTrials, trialCount, activeTrialIndex);\n      let newComponentState = this.NodeService.createNewComponentState();\n      newComponentState.studentData = {\n        trials: mergedTrials,\n        activeTrialIndex: activeTrialIndex,\n        activeSeriesIndex: activeSeriesIndex,\n        version: 2\n      };\n      if (this.componentContent.backgroundImage != null &&\n          this.componentContent.backgroundImage !== '') {\n        newComponentState.studentData.backgroundImage = this.componentContent.backgroundImage;\n      } else if (connectedComponentBackgroundImage != null) {\n        newComponentState.studentData.backgroundImage = connectedComponentBackgroundImage;\n      }\n      newComponentState = this.handleConnectedComponentsHelper(newComponentState, isReset);\n      this.setStudentWork(newComponentState);\n      this.studentDataChanged();\n    };\n  }\n\n  addTrialFromThisComponentIfNecessary(mergedTrials, trialCount, activeTrialIndex) {\n    if (this.componentContent.series.length > 0) {\n      const trial = this.createNewTrial(this.UtilService.generateKey(10));\n      trial.name = this.$translate('graph.trial') + ' ' + trialCount;\n      trial.series = this.UtilService.makeCopyOfJSONObject(this.componentContent.series);\n      mergedTrials.push(trial);\n      if (this.canEditTrial(trial)) {\n        activeTrialIndex = trialCount;\n      }\n    }\n    return activeTrialIndex;\n  }\n\n  /**\n   * Create an image from a component state and set the image as the background.\n   * @param componentState A component state.\n   * @return A promise that returns the url of the image that is generated from the component state.\n   */\n  setComponentStateAsBackgroundImage(componentState) {\n    return this.UtilService.generateImageFromComponentState(componentState).then((image) => {\n      return image.url;\n    });\n  }\n\n  /**\n   * Perform additional connected component processing.\n   * @param newComponentState The new component state generated by accumulating the trials from all\n   * the connected component student data.\n   */\n  handleConnectedComponentsHelper(newComponentState, isReset) {\n    let mergedComponentState = this.$scope.componentState;\n    let firstTime = true;\n    if (mergedComponentState == null || isReset ||\n        !this.GraphService.componentStateHasStudentWork(mergedComponentState)) {\n      mergedComponentState = newComponentState;\n    } else {\n      /*\n       * This component has previous student data so this is not the first time this component is\n       * being loaded.\n       */\n      firstTime = false;\n    }\n    for (const connectedComponent of this.componentContent.connectedComponents) {\n      const nodeId = connectedComponent.nodeId;\n      const componentId = connectedComponent.componentId;\n      const type = connectedComponent.type;\n      if (type === 'showClassmateWork') {\n        mergedComponentState = newComponentState;\n      } else if (type === 'importWork' || type == null) {\n        const connectedComponentState =\n            this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n        const fields = connectedComponent.fields;\n        if (connectedComponentState != null) {\n          if (connectedComponentState.componentType !== 'Graph') {\n            mergedComponentState = this.mergeComponentState(\n                mergedComponentState, connectedComponentState, fields, firstTime);\n          }\n        } else {\n          mergedComponentState = this.mergeNullComponentState(mergedComponentState, fields, firstTime);\n        }\n      }\n    }\n    if (mergedComponentState.studentData.version == null) {\n      mergedComponentState.studentData.version = this.studentDataVersion;\n    }\n    if (newComponentState.studentData.backgroundImage != null) {\n      mergedComponentState.studentData.backgroundImage = newComponentState.studentData.backgroundImage;\n    }\n    return mergedComponentState;\n  }\n\n  /**\n   * Merge the component state from the connected component into the component\n   * state from this component.\n   * @param baseComponentState The component state from this component.\n   * @param connectedComponentState The component state from the connected component.\n   * @param mergeFields (optional) An array of objects that specify which fields\n   * to look at in the connectedComponentState. Each object can contain 3 fields which\n   * are \"name\", \"when\", \"action\".\n   * - \"name\" is the name of the field in the connectedComponentState.studentData object\n   *   For example, if connectedComponentState is from a Graph component, we may author the value to be \"trials\"\n   * - \"when\" possible values\n   *     \"firstTime\" means we merge the \"name\" field only the first time we visit the component\n   *     \"always\" means we merge the \"name\" field every time we visit the component\n   * - \"action\" possible values\n   *     \"read\" means we look at the value of the \"name\" field and perform processing on it to generate\n   *       some value that we will set into the baseComponentState\n   *     \"write\" means we copy the value of the \"name\" field from connectedComponentState.studentData to\n   *       baseComponentState.studentData\n   * @param firstTime Whether this is the first time this component is being\n   * visited.\n   * @return The merged component state.\n   */\n  mergeComponentState(baseComponentState, connectedComponentState, mergeFields, firstTime) {\n    if (mergeFields == null) {\n      if (connectedComponentState.componentType === 'Graph' && firstTime) {\n        // there are no merge fields specified so we will get all of the fields\n        baseComponentState.studentData = this.UtilService.makeCopyOfJSONObject(connectedComponentState.studentData);\n      }\n    } else {\n      // we will merge specific fields\n      for (const mergeField of mergeFields) {\n        const name = mergeField.name;\n        const when = mergeField.when;\n        const action = mergeField.action;\n        if (when === 'firstTime' && firstTime) {\n          if (action === 'write') {\n            baseComponentState.studentData[name] = connectedComponentState.studentData[name];\n          } else if (action === 'read') {\n            // TODO\n          }\n        } else if (when === 'always') {\n          if (action === 'write') {\n            baseComponentState.studentData[name] = connectedComponentState.studentData[name];\n          } else if (action === 'read') {\n            this.readConnectedComponentField(baseComponentState, connectedComponentState, name);\n          }\n        }\n      }\n    }\n    return baseComponentState;\n  }\n\n  /**\n   * We want to merge the component state from the connected component into this\n   * component but the connected component does not have any work. We will\n   * instead use default values.\n   * @param baseComponentState The component state from this component.\n   * @param mergeFields (optional) An array of objects that specify which fields\n   * to look at. (see comment for mergeComponentState() for more information).\n   * @param firstTime Whether this is the first time this component is being\n   * visited.\n   * @return The merged component state.\n   */\n  mergeNullComponentState(baseComponentState, mergeFields, firstTime) {\n    if (mergeFields == null) {\n      // TODO\n    } else {\n      for (const mergeField of mergeFields) {\n        const name = mergeField.name;\n        const when = mergeField.when;\n        const action = mergeField.action;\n        if (when === 'firstTime' && firstTime == true) {\n          if (action === 'write') {\n            // TODO\n          } else if (action === 'read') {\n            // TODO\n          }\n        } else if (when === 'always') {\n          if (action === 'write') {\n            // TODO\n          } else if (action === 'read') {\n            const connectedComponentState = null;\n            this.readConnectedComponentField(baseComponentState, connectedComponentState, name);\n          }\n        }\n      }\n    }\n    return baseComponentState;\n  }\n\n  /**\n   * Read the field from the connected component's component state.\n   * @param baseComponentState The component state from this component.\n   * @param connectedComponentState The component state from the connected component.\n   * @param field The field to look at in the connected component's component\n   * state.\n   */\n  readConnectedComponentField(baseComponentState, connectedComponentState, field) {\n    if (field === 'selectedCells') {\n      if (connectedComponentState == null) {\n        // we will default to hide all the trials\n        for (const trial of baseComponentState.studentData.trials) {\n          trial.show = false;\n        }\n      } else {\n        // loop through all the trials and show the ones that are in the selected cells array\n        const studentData = connectedComponentState.studentData;\n        const selectedCells = studentData[field];\n        const selectedTrialIds = this.convertSelectedCellsToTrialIds(selectedCells);\n        for (const trial of baseComponentState.studentData.trials) {\n          if (selectedTrialIds.includes(trial.id)) {\n            trial.show = true;\n          } else {\n            trial.show = false;\n          }\n        }\n      }\n    } else if (field === 'trial') {\n      // TODO\n    }\n  }\n\n  setCanEditForAllSeriesInComponentState(componentState, canEdit) {\n    for (const trial of componentState.studentData.trials) {\n      this.setCanEditForAllSeries(trial.series, canEdit);\n    }\n  }\n\n  setCanEditForAllSeries(series, canEdit) {\n    for (const singleSeries of series) {\n      singleSeries.canEdit = canEdit;\n    }\n  }\n\n  undoClicked() {\n    if (this.undoStack.length > 0) {\n      const previousComponentState = this.undoStack.pop();\n      this.setStudentWork(previousComponentState);\n      this.previousComponentState = previousComponentState;\n      this.drawGraph();\n    } else if (this.initialComponentState == null) {\n      this.previousComponentState = null;\n      this.trials = [];\n      this.newTrial();\n      this.resetSeriesHelper();\n      this.drawGraph();\n    }\n  }\n\n  trialCheckboxClicked() {\n    this.addNextComponentStateToUndoStack = true;\n  }\n\n  getCategoryByIndex(index) {\n    if (this.componentContent.xAxis != null &&\n        this.componentContent.xAxis.categories != null &&\n        index < this.componentContent.xAxis.categories.length) {\n      return this.componentContent.xAxis.categories[index];\n    }\n    return null;\n  }\n\n  isMousePlotLineOn() {\n    return this.isMouseXPlotLineOn() || this.isMouseYPlotLineOn();\n  }\n\n  isMouseXPlotLineOn() {\n    return this.componentContent.showMouseXPlotLine;\n  }\n\n  isMouseYPlotLineOn() {\n    return this.componentContent.showMouseYPlotLine;\n  }\n\n  isSaveMouseOverPoints() {\n    return this.componentContent.saveMouseOverPoints;\n  }\n\n  getXValueFromDataPoint(dataPoint) {\n    if (dataPoint.constructor.name === 'Object') {\n      return dataPoint.x;\n    } else if (dataPoint.constructor.name === 'Array') {\n      return dataPoint[0];\n    }\n    return null;\n  }\n\n  getYValueFromDataPoint(dataPoint) {\n    if (dataPoint.constructor.name === 'Object') {\n      return dataPoint.y;\n    } else if (dataPoint.constructor.name === 'Array') {\n      return dataPoint[1];\n    }\n    return null;\n  }\n\n  getLatestMouseOverPointX() {\n    if (this.mouseOverPoints.length > 0) {\n      return this.getXValueFromDataPoint(this.mouseOverPoints[this.mouseOverPoints.length - 1]);\n    }\n    return null;\n  }\n\n  getLatestMouseOverPointY() {\n    if (this.mouseOverPoints.length > 0) {\n      return this.getYValueFromDataPoint(this.mouseOverPoints[this.mouseOverPoints.length - 1]);\n    }\n    return null;\n  }\n\n  showXPlotLineIfOn(text = null) {\n    if (this.isMouseXPlotLineOn()) {\n      let x = this.getLatestMouseOverPointX();\n      if (x == null) {\n        x = 0;\n      }\n      this.showXPlotLine(x, text);\n    }\n  }\n\n  showYPlotLineIfOn(text = null) {\n    if (this.isMouseYPlotLineOn()) {\n      let y = this.getLatestMouseOverPointY();\n      if (y == null) {\n        y = 0;\n      }\n      this.showYPlotLine(y, text);\n    }\n  }\n\n  showTooltipOnX(seriesId, x) {\n    const chart = $('#' + this.chartId).highcharts();\n    if (chart.series.length > 0) {\n      let series = null;\n      if (seriesId == null) {\n        series = chart.series[chart.series.length - 1];\n      } else {\n        for (const singleSeries of chart.series) {\n          if (singleSeries.userOptions.name === seriesId) {\n            series = singleSeries;\n          }\n        }\n      }\n      const points = series.points;\n      for (const point of points) {\n        if (point.x === x) {\n          chart.tooltip.refresh(point);\n        }\n      }\n    }\n  }\n\n  highlightPointOnX(seriesId, x) {\n    const chart = $('#' + this.chartId).highcharts();\n    if (chart.series.length > 0) {\n      let series = null;\n      if (seriesId == null) {\n        series = chart.series[chart.series.length - 1];\n      } else {\n        for (const singleSeries of chart.series) {\n          if (singleSeries.userOptions.name === seriesId) {\n            series = singleSeries;\n          }\n          this.removeHoverStateFromPoints(singleSeries.points);\n        }\n      }\n      this.setHoverStateOnPoint(series.points, x);\n    }\n  }\n\n  removeHoverStateFromPoints(points) {\n    for (const point of points) {\n      point.setState('');\n    }\n  }\n\n  setHoverStateOnPoint(points, x) {\n    for (const point of points) {\n      if (point.x === x) {\n        point.setState('hover');\n      }\n    }\n  }\n\n  showTooltipOnLatestPoint() {\n    const chart = $('#' + this.chartId).highcharts();\n    if (chart.series.length > 0) {\n      const latestSeries = chart.series[chart.series.length - 1];\n      const points = latestSeries.points;\n      if (points.length > 0) {\n        const latestPoint = points[points.length - 1];\n        chart.tooltip.refresh(latestPoint);\n      }\n    }\n  }\n\n  convertSelectedCellsToTrialIds(selectedCells) {\n    const selectedTrialIds = [];\n    if (selectedCells != null) {\n      for (const selectedCell of selectedCells) {\n        const material = selectedCell.material;\n        const bevTemp = selectedCell.bevTemp;\n        const airTemp = selectedCell.airTemp;\n        const selectedTrialId = material + '-' + bevTemp + 'Liquid';\n        selectedTrialIds.push(selectedTrialId);\n      }\n    }\n    return selectedTrialIds;\n  }\n\n  isTrialsEnabled() {\n    return this.componentContent.enableTrials === true;\n  }\n\n  isStudentDataVersion1(version) {\n    if (version == null) {\n      return this.studentDataVersion == null || this.studentDataVersion === 1;\n    } else {\n      return version === 1;\n    }\n  }\n}\n\nGraphController.$inject = [\n  '$filter',\n  '$mdDialog',\n  '$q',\n  '$rootScope',\n  '$scope',\n  '$timeout',\n  'AnnotationService',\n  'ConfigService',\n  'GraphService',\n  'NodeService',\n  'NotebookService',\n  'ProjectService',\n  'StudentAssetService',\n  'StudentDataService',\n  'UtilService'\n];\n\nexport default GraphController;\n"],"file":"graphController.js"}