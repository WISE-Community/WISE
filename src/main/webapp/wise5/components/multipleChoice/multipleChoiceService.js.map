{"version":3,"sources":["multipleChoiceService.es6"],"names":["MultipleChoiceService","$filter","StudentDataService","UtilService","$translate","component","type","choiceType","choices","showFeedback","nodeId","componentId","allPossibleTransitionCriteria","c","length","choice","possibleTransitionCriteria","id","choiceText","text","choiceId","push","criteria","params","constraintChoiceIds","choiceIds","latestComponentState","getLatestComponentStateByNodeIdAndComponentId","studentChoices","studentData","studentChoiceIds","getStudentChoiceIdsFromStudentChoiceObjects","isChoicesSelected","Array","isArray","constraintChoiceId","indexOf","studentChoice","studentChoiceId","componentStates","componentEvents","nodeEvents","node","result","submitRequired","showSubmitButton","showSaveButton","l","componentState","isSubmit","studentDataString","componentContent","isCorrect","ComponentService","$inject"],"mappings":"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","sourcesContent":["import ComponentService from '../componentService';\n\nclass MultipleChoiceService extends ComponentService {\n  constructor($filter, StudentDataService, UtilService) {\n    super($filter, StudentDataService, UtilService);\n  }\n\n  getComponentTypeLabel() {\n    return this.$translate('multipleChoice.componentTypeLabel');\n  }\n\n  createComponent() {\n    const component = super.createComponent();\n    component.type = 'MultipleChoice';\n    component.choiceType = 'radio';\n    component.choices = [];\n    component.showFeedback = true;\n    return component;\n  }\n\n  /**\n   * Returns all possible criteria for this component.\n   * @param component a MultipleChoice component\n   */\n  getPossibleTransitionCriteria(nodeId, componentId, component) {\n    let allPossibleTransitionCriteria = [];\n    if (component.choiceType === 'radio') {\n      // Go through all the choices\n      for (var c = 0; c < component.choices.length; c++) {\n        let choice = component.choices[c];\n        let possibleTransitionCriteria = {\n          'name': 'choiceChosen',\n          'id': 'choiceChosen_' + choice.id,\n          'params': {\n            'nodeId': nodeId,\n            'componentId': componentId,\n            'choiceIds': [choice.id]\n          },\n          'userFriendlyDescription': this.$translate('multipleChoice.userChose', {choiceText: choice.text, choiceId: choice.id})\n        };\n        allPossibleTransitionCriteria.push(possibleTransitionCriteria);\n      }\n    } else if (component.choiceType === 'checkbox') {\n      // TODO: implement meeee!\n    }\n    return allPossibleTransitionCriteria;\n  }\n\n  /**\n   * Check if the student chose a specific choice\n   * @param criteria the criteria object\n   * @returns a boolean value whether the student chose the choice specified in the\n   * criteria object\n   */\n  choiceChosen(criteria) {\n    const nodeId = criteria.params.nodeId;\n    const componentId = criteria.params.componentId;\n    const constraintChoiceIds = criteria.params.choiceIds;\n    const latestComponentState =\n        this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n    if (latestComponentState != null) {\n      const studentChoices = latestComponentState.studentData.studentChoices;\n      const studentChoiceIds = this.getStudentChoiceIdsFromStudentChoiceObjects(studentChoices);\n      return this.isChoicesSelected(studentChoiceIds, constraintChoiceIds);\n    }\n    return false;\n  }\n\n  isChoicesSelected(studentChoiceIds, constraintChoiceIds) {\n    if (typeof constraintChoiceIds === 'string') {\n      return studentChoiceIds.length === 1 && studentChoiceIds[0] === constraintChoiceIds;\n    } else if (Array.isArray(constraintChoiceIds)) {\n      if (studentChoiceIds.length === constraintChoiceIds.length) {\n        for (let constraintChoiceId of constraintChoiceIds) {\n          if (studentChoiceIds.indexOf(constraintChoiceId) === -1) {\n            return false;\n          }\n        }\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Get the student choice ids from the student choice objects\n   * @param studentChoices an array of student choice objects. these objects contain\n   * an id and text fields\n   * @returns an array of choice id strings\n   */\n  getStudentChoiceIdsFromStudentChoiceObjects(studentChoices) {\n    let choiceIds = [];\n\n    if (studentChoices != null) {\n\n      // loop through all the student choice objects\n      for (let c = 0; c < studentChoices.length; c++) {\n\n        // get a student choice object\n        let studentChoice = studentChoices[c];\n\n        if (studentChoice != null) {\n\n          // get the student choice id\n          let studentChoiceId = studentChoice.id;\n\n          choiceIds.push(studentChoiceId);\n        }\n      }\n    }\n\n    return choiceIds;\n  };\n\n  isCompleted(component, componentStates, componentEvents, nodeEvents, node) {\n    let result = false;\n\n    if (componentStates && componentStates.length) {\n      let submitRequired = node.showSubmitButton || (component.showSubmitButton && !node.showSaveButton);\n\n      // loop through all the component states\n      for (let c = 0, l = componentStates.length; c < l; c++) {\n\n        // the component state\n        let componentState = componentStates[c];\n\n        // get the student data from the component state\n        let studentData = componentState.studentData;\n\n        if (studentData != null) {\n          let studentChoices = studentData.studentChoices;\n\n          if (studentChoices != null) {\n            // there is a student choice so the component has saved work\n            if (submitRequired) {\n              // completion requires a submission, so check for isSubmit\n              if (componentState.isSubmit) {\n                result = true;\n                break;\n              }\n            } else {\n              result = true;\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    return result;\n  };\n\n  /**\n   * Get the human readable student data string\n   * @param componentState the component state\n   * @return a human readable student data string\n   */\n  getStudentDataString(componentState) {\n\n    var studentDataString = '';\n\n    if (componentState != null) {\n      var studentData = componentState.studentData;\n\n      if (studentData != null) {\n\n        // get the choices the student chose\n        var studentChoices = studentData.studentChoices;\n\n        if (studentChoices != null) {\n\n          // loop through all the choices the student chose\n          for (var c = 0; c < studentChoices.length; c++) {\n            var studentChoice = studentChoices[c];\n\n            if (studentChoice != null) {\n\n              // get the choice text\n              var text = studentChoice.text;\n\n              if (text != null) {\n                if (studentDataString != '') {\n                  // separate the choices with a comma\n                  studentDataString += ', ';\n                }\n\n                // append the choice text\n                studentDataString += text;\n              }\n            }\n          }\n        }\n      }\n    }\n    return studentDataString;\n  }\n\n  componentStateHasStudentWork(componentState, componentContent) {\n    if (componentState != null) {\n      let studentData = componentState.studentData;\n      if (studentData != null) {\n        let studentChoices = studentData.studentChoices;\n        if (studentChoices != null && studentChoices.length > 0) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  componentHasCorrectAnswer(component) {\n    for (const choice of component.choices) {\n      if (choice.isCorrect) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\nMultipleChoiceService.$inject = [\n  '$filter',\n  'StudentDataService',\n  'UtilService'\n];\n\nexport default MultipleChoiceService;\n"],"file":"multipleChoiceService.js"}