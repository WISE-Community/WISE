{"version":3,"sources":["conceptMapController.es6"],"names":["ConceptMapController","$anchorScroll","$filter","$location","$mdDialog","$q","$rootScope","$scope","$timeout","AnnotationService","ConceptMapService","ConfigService","CRaterService","NodeService","NotebookService","ProjectService","StudentAssetService","StudentDataService","UtilService","width","height","availableNodes","availableLinks","nodes","links","displayLinkTypeChooser","displayLinkTypeChooserModalOverlay","selectedLinkType","initializedDisplayLinkTypeChooserModalOverlay","modalWidth","modalHeight","autoFeedbackString","selectedNode","tempOffsetX","tempOffsetY","setBackgroundImage","componentContent","background","stretchBackground","setIdsWithNodeIdComponentId","initialize","isStudentMode","isGradingMode","isGradingRevisionMode","componentState","mode","setIdsWithNodeIdComponentIdWorkgroupIdComponentStateIdPrefix","setIdsWithNodeIdComponentIdWorkgroupIdComponentStateId","setIdsWithNodeIdComponentIdWorkgroupId","isOnlyShowWorkMode","setSVGId","nodeId","componentId","workgroupId","componentStateId","angular","bind","initializeSVG","initializeScopeGetComponentState","initializeWidth","initializeHeight","initializeShowNodeLabels","showNodeLabels","setConceptMapContainerId","setSelectNodeBarId","setFeedbackContainerId","id","prefix","svgId","conceptMapContainerId","selectNodeBarId","feedbackContainerId","submit","setupSVG","hasShowWorkConnectedComponent","handleConnectedComponents","componentStateHasStudentWork","injectAssetPaths","setStudentWork","hasConnectedComponent","componentContentHasStarterConceptMap","conceptMapData","starterConceptMap","populateConceptMapData","populateStarterConceptMap","hasMaxSubmitCount","hasSubmitsLeft","disableSubmitButton","enableNodeDragging","disableComponentIfNecessary","broadcastDoneRenderingComponent","studentData","submitCounter","processLatestStudentWork","populateNodes","populateLinks","backgroundPath","moveLinkTextToFront","moveNodesToFront","refreshLinkLabels","node","instanceId","originalId","filePath","fileName","label","x","y","conceptMapNode","newConceptMapNode","draw","addNode","setNodeMouseEvents","link","sourceNodeId","sourceNodeInstanceId","destinationNodeId","destinationNodeInstanceId","color","curvature","startCurveUp","endCurveUp","sourceNode","destinationNode","getNodeById","conceptMapLink","newConceptMapLink","addLink","setLinkMouseEvents","showLabel","getLabel","setLabel","submitTriggeredBy","isSubmitDirty","performSubmit","numberOfSubmitsLeft","getNumberOfSubmitsLeft","message","alert","$translate","confirm","incrementSubmitCounter","isSubmitButtonDisabled","hasAutoGrading","performAutoGrading","isSubmit","emitComponentSubmitTriggered","customRuleEvaluator","getConceptMapData","thisConceptMapService","thisResult","any","arguments","all","setResult","result","eval","autoFeedbackResult","resultString","showAutoScore","score","hasMaxScore","getMaxScore","showAutoFeedback","feedback","show","clickOutsideToClose","title","htmlContent","ariaLabel","ok","action","deferred","defer","createNewComponentState","hasAutoFeedbackScore","hasAutoFeedbackText","runId","getRunId","periodId","getPeriodId","toWorkgroupId","getWorkgroupId","annotations","data","value","parseFloat","autoGrader","maxAutoScore","scoreAnnotation","createAutoScoreAnnotation","push","isAuthoringMode","latestAnnotations","commentAnnotation","createAutoCommentAnnotation","comment","componentType","createComponentStateAdditionalProcessing","promise","nodeJSON","toJSONObject","linkJSON","getBackgroundFileName","substring","lastIndexOf","annotation","isCRaterEnabled","isCRaterScoreOnSave","isCRaterScoreOnSubmit","isCRaterScoreOnChange","isCRaterScoreOnExit","selectedLink","highlightedElement","constructor","name","setColor","setOriginalId","clearHighlightedElement","studentDataChanged","linksTitle","setLinkTypeChooserOverlayStyle","linkTypeChooserStyle","newlyCreatedLink","SVG","activeNode","activeLink","drawingLink","mousedown","event","svgMouseDown","mouseup","svgMouseUp","mousemove","svgMouseMove","addDragOverListenerIfNecessary","addDropListenerIfNecessary","setLinkTypeChooserStyle","svg","element","addedDragOverListener","addEventListener","preventDefault","addedDropListener","newNodeDropped","getModalWidth","overlayWidth","conceptMapContainer","linkTypeChooserModalOverlayStyle","selectNodeBarWidthString","document","getElementById","css","svgWidthString","selectNodeBarWidth","parseInt","replace","svgWidth","selectNodeBarHeightString","svgHeightString","selectNodeBarHeight","svgHeight","Math","max","remove","hideLinkTypeChooser","target","tagName","coordinates","getRelativeCoordinatesByEvent","x1","y1","x2","y2","startX","activeLinkStartX","startY","activeLinkStartY","distance","calculateDistance","linkCurvatureSet","slope","abs","getSlope","setActiveLinkCurvature","isDragging","updateCoordinates","showDeleteButton","showBorder","hideDeleteButton","hideBorder","offsetX","offsetY","parentOffsetX","parentOffsetY","userAgent","navigator","isUserAgentChrome","matrix","getCTM","e","f","isUserAgentFirefox","createSVGMatrix","bbox","getBBox","parentElement","attributes","returnObject","indexOf","$event","newConceptMapNodeId","getNewConceptMapNodeId","setHighlightedElement","nextAvailableNodeIdNumber","usedNumbers","getId","nodeIdNumber","length","maxNumberUsed","apply","isNaN","nextAvailableLinkIdNumber","linkId","linkIdNumber","setNodeMouseOver","nodeMouseOver","setNodeMouseOut","nodeMouseOut","setConnectorMouseDown","disableNodeDragging","connectorMouseDown","setNodeMouseDown","nodeMouseDown","setNodeMouseUp","nodeMouseUp","setDeleteButtonMouseDown","nodeDeleteButtonMouseDown","setDeleteButtonMouseOver","nodeDeleteButtonMouseOver","setDeleteButtonMouseOut","nodeDeleteButtonMouseOut","setDragMove","nodeDragMove","isHighlighted","showLinkTypeChooser","getOriginalId","group","getGroup","options","minX","minY","maxX","maxY","draggable","moveTextGroupToFront","front","outgoingLinks","getOutgoingLinks","numOutgoingLinks","outgoingLink","removeLink","incomingLinks","getIncomingLinks","numIncomingLinks","incomingLink","n","tempNode","splice","groupId","getGroupId","connectorId","getConnectorId","tempNodeId","l","tempLink","getNodeByGroupId","setActiveNode","clearActiveNode","sourceNodeGroupId","setDestination","connector","getNodeByConnectorId","newConceptMapLinkId","getNewConceptMapLinkId","connectorCX","connectorCY","setLinkMouseDown","linkMouseDown","setLinkTextMouseDown","linkTextMouseDown","setLinkMouseOver","linkMouseOver","setLinkMouseOut","linkMouseOut","setDeleteButtonClicked","linkDeleteButtonClicked","getLinkByGroupId","linkGroupId","nodeName","removeNode","dragMove","currentElement","previousId","removeAllLinks","removeAllNodes","clearConceptMap","parent","querySelector","svgElement","serializer","XMLSerializer","svgString","serializeToString","getHrefToBase64ImageReplacements","then","images","imagePair","imageHref","base64Image","imageRegEx","RegExp","myCanvas","createElement","ctx","getContext","Blob","type","domURL","self","URL","webkitURL","url","createObjectURL","image","Image","thisUtilService","onload","drawImage","toDataURL","imageObject","getImageObjectFromBase64String","addNote","src","componentStates","mergedNodes","mergedLinks","concat","connectedComponent","getConnectedComponentByComponentState","importWorkAsBackground","setComponentStateAsBackgroundImage","mergedComponentState","generateImageFromComponentState","backgroundSize","ComponentController","$inject"],"mappings":"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","file":"conceptMapController.js","sourcesContent":["'use strict';\n\nimport 'svg.js';\nimport 'svg.draggable.js';\nimport ComponentController from '../componentController';\n\nclass ConceptMapController extends ComponentController {\n  constructor($anchorScroll,\n      $filter,\n      $location,\n      $mdDialog,\n      $q,\n      $rootScope,\n      $scope,\n      $timeout,\n      AnnotationService,\n      ConceptMapService,\n      ConfigService,\n      CRaterService,\n      NodeService,\n      NotebookService,\n      ProjectService,\n      StudentAssetService,\n      StudentDataService,\n      UtilService) {\n    super($filter, $mdDialog, $rootScope, $scope,\n        AnnotationService, ConfigService, NodeService,\n        NotebookService, ProjectService, StudentAssetService,\n        StudentDataService, UtilService);\n    this.$anchorScroll = $anchorScroll;\n    this.$location = $location;\n    this.$q = $q;\n    this.$timeout = $timeout;\n    this.ConceptMapService = ConceptMapService;\n    this.CRaterService = CRaterService;\n\n    this.width = 800;\n    this.height = 600;\n    this.availableNodes = [];\n    this.availableLinks = [];\n    this.nodes = [];\n    this.links = [];\n    this.displayLinkTypeChooser = false;\n    this.displayLinkTypeChooserModalOverlay = false;\n    this.selectedLinkType = null;\n    this.initializedDisplayLinkTypeChooserModalOverlay = false;\n    this.modalWidth = 800;\n    this.modalHeight = 600;\n    this.autoFeedbackString = '';\n\n    /*\n     * used to remember the node the student has started dragging to create\n     * so that we know what node to create once they let go off the mouse\n     * on the svg element\n     */\n    this.selectedNode = null;\n\n    /*\n     * used to remember the offset of the mouse relative to the upper left\n     * of the node image the student started dragging to create a new node\n     * instance\n     */\n    this.tempOffsetX = 0;\n    this.tempOffsetY = 0;\n\n    this.setBackgroundImage(this.componentContent.background, this.componentContent.stretchBackground);\n    this.setIdsWithNodeIdComponentId();\n\n    this.initialize();\n\n    if (this.isStudentMode()) {\n      this.availableNodes = this.componentContent.nodes;\n      this.availableLinks = this.componentContent.links;\n    } else if (this.isGradingMode() || this.isGradingRevisionMode()) {\n      const componentState = this.$scope.componentState;\n\n      if (componentState) {\n        if (this.mode === 'gradingRevision') {\n          this.setIdsWithNodeIdComponentIdWorkgroupIdComponentStateIdPrefix(componentState);\n        } else {\n          this.setIdsWithNodeIdComponentIdWorkgroupIdComponentStateId(componentState);\n        }\n      } else {\n        this.setIdsWithNodeIdComponentIdWorkgroupId();\n\n      }\n    } else if (this.isOnlyShowWorkMode()) {\n      const componentState = this.$scope.componentState;\n      if (componentState == null) {\n        this.setSVGId(this.nodeId, this.componentId, this.workgroupId, 'onlyShowWork_');\n      } else {\n        this.setSVGId(this.nodeId, this.componentId, this.workgroupId, this.componentStateId, 'onlyShowWork_');\n      }\n    }\n\n    /*\n     * Call the initializeSVG() after a timeout so that angular has a\n     * chance to set the svg element id before we start using it. If we\n     * don't wait for the timeout, the svg id won't be set when we try\n     * to start referencing the svg element.\n     */\n    this.$timeout(angular.bind(this, this.initializeSVG));\n\n    this.initializeScopeGetComponentState(this.$scope, 'conceptMapController');\n  }\n\n  initialize() {\n    this.initializeWidth();\n    this.initializeHeight();\n    this.initializeShowNodeLabels();\n  }\n\n  initializeWidth() {\n    if (this.componentContent.width != null) {\n      this.width = this.componentContent.width;\n    }\n  }\n\n  initializeHeight() {\n    if (this.componentContent.height != null) {\n      this.height = this.componentContent.height;\n    }\n  }\n\n  initializeShowNodeLabels() {\n    if (this.componentContent.showNodeLabels == null) {\n      this.componentContent.showNodeLabels = true;\n    }\n  }\n\n  setIdsWithNodeIdComponentId() {\n    this.setSVGId(this.nodeId, this.componentId);\n    this.setConceptMapContainerId(this.nodeId, this.componentId);\n    this.setSelectNodeBarId(this.nodeId, this.componentId);\n    this.setFeedbackContainerId(this.nodeId, this.componentId);\n  }\n\n  setIdsWithNodeIdComponentIdWorkgroupId() {\n    this.setSVGId(this.nodeId, this.componentId, this.workgroupId);\n    this.setConceptMapContainerId(this.nodeId, this.componentId, this.workgroupId);\n    this.setSelectNodeBarId(this.nodeId, this.componentId, this.workgroupId);\n    this.setFeedbackContainerId(this.nodeId, this.componentId, this.workgroupId);\n  }\n\n  setIdsWithNodeIdComponentIdWorkgroupIdComponentStateId(componentState) {\n    this.setSVGId(this.nodeId, this.componentId, this.workgroupId, componentState.id);\n    this.setConceptMapContainerId(this.nodeId, this.componentId, this.workgroupId, componentState.id);\n    this.setSelectNodeBarId(this.nodeId, this.componentId, this.workgroupId, componentState.id);\n    this.setFeedbackContainerId(this.nodeId, this.componentId, this.workgroupId, componentState.id);\n  }\n\n  setIdsWithNodeIdComponentIdWorkgroupIdComponentStateIdPrefix(componentState) {\n    this.setSVGId(this.nodeId, this.componentId, this.workgroupId, componentState.id, 'gradingRevision_');\n    this.setConceptMapContainerId(this.nodeId, this.componentId, this.workgroupId, componentState.id, 'gradingRevision_');\n    this.setSelectNodeBarId(this.nodeId, this.componentId, this.workgroupId, componentState.id, 'gradingRevision_');\n    this.setFeedbackContainerId(this.nodeId, this.componentId, this.workgroupId, componentState.id, 'gradingRevision_');\n  }\n\n  setSVGId(nodeId, componentId, workgroupId, componentStateId, prefix = '') {\n    if (nodeId != null && componentId != null && workgroupId != null && componentStateId != null) {\n      this.svgId = 'svg_' + prefix + nodeId + '_' + componentId + '_' + workgroupId + '_' + componentStateId;\n    } else if (nodeId != null && componentId != null && workgroupId != null) {\n      this.svgId = 'svg_' + nodeId + '_' + componentId + '_' + workgroupId;\n    } else if (nodeId != null && componentId != null) {\n      this.svgId = 'svg_' + nodeId + '_' + componentId;\n    }\n  }\n\n  setConceptMapContainerId(nodeId, componentId, workgroupId, componentStateId, prefix = '') {\n    if (nodeId != null && componentId != null && workgroupId != null && componentStateId != null) {\n      this.conceptMapContainerId =\n          'conceptMapContainer_' + nodeId + '_' + componentId + '_' + workgroupId + '_' + componentStateId;\n    } else if (nodeId != null && componentId != null && workgroupId != null) {\n      this.conceptMapContainerId = 'conceptMapContainer_' + nodeId + '_' + componentId + '_' + workgroupId;\n    } else if (nodeId != null && componentId != null) {\n      this.conceptMapContainerId = 'conceptMapContainer_' + nodeId + '_' + componentId;\n    }\n  }\n\n  setSelectNodeBarId(nodeId, componentId, workgroupId, componentStateId, prefix = '') {\n    if (nodeId != null && componentId != null && workgroupId != null && componentStateId != null) {\n      this.selectNodeBarId =\n        'selectNodeBar_' + nodeId + '_' + componentId + '_' + workgroupId + '_' + componentStateId;\n    } else if (nodeId != null && componentId != null && workgroupId != null) {\n      this.selectNodeBarId = 'selectNodeBar_' + nodeId + '_' + componentId + '_' + workgroupId;\n    } else if (nodeId != null && componentId != null) {\n      this.selectNodeBarId = 'selectNodeBar_' + nodeId + '_' + componentId;\n    }\n  }\n\n  setFeedbackContainerId(nodeId, componentId, workgroupId, componentStateId, prefix = '') {\n    if (nodeId != null && componentId != null && workgroupId != null && componentStateId != null) {\n      this.feedbackContainerId =\n        'feedbackContainer_' + nodeId + '_' + componentId + '_' + workgroupId + '_' + componentStateId;\n    } else if (nodeId != null && componentId != null && workgroupId != null) {\n      this.feedbackContainerId = 'feedbackContainer_' + nodeId + '_' + componentId + '_' + workgroupId;\n    } else if (nodeId != null && componentId != null) {\n      this.feedbackContainerId = 'feedbackContainer_' + nodeId + '_' + componentId;\n    }\n  }\n\n  handleNodeSubmit() {\n    this.submit('nodeSubmitButton');\n  }\n\n  initializeSVG() {\n    this.setupSVG();\n    let componentState = this.$scope.componentState;\n\n    if (this.isStudentMode()) {\n      if (this.UtilService.hasShowWorkConnectedComponent(this.componentContent)) {\n        this.handleConnectedComponents();\n      }  else if (this.ConceptMapService.componentStateHasStudentWork(componentState, this.componentContent)) {\n        componentState = this.ProjectService.injectAssetPaths(componentState);\n        this.setStudentWork(componentState);\n      } else if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n        this.handleConnectedComponents();\n      } else if (!this.ConceptMapService.componentStateHasStudentWork(componentState, this.componentContent) &&\n          this.componentContentHasStarterConceptMap()) {\n        const conceptMapData = this.componentContent.starterConceptMap;\n        this.populateConceptMapData(conceptMapData);\n      }\n    } else {\n      if (componentState == null) {\n        this.populateStarterConceptMap();\n      } else {\n        componentState = this.ProjectService.injectAssetPaths(componentState);\n        this.setStudentWork(componentState);\n      }\n    }\n\n    if (this.hasMaxSubmitCount() && !this.hasSubmitsLeft()) {\n      this.disableSubmitButton();\n    }\n\n    this.enableNodeDragging();\n    this.disableComponentIfNecessary();\n    this.broadcastDoneRenderingComponent();\n  }\n\n  componentContentHasStarterConceptMap() {\n    return this.componentContent.starterConceptMap != null;\n  }\n\n  setStudentWork(componentState) {\n    const studentData = componentState.studentData;\n    if (studentData != null) {\n      const conceptMapData = studentData.conceptMapData;\n      const submitCounter = studentData.submitCounter;\n      if (submitCounter != null) {\n        this.submitCounter = submitCounter;\n      }\n      if (conceptMapData != null) {\n        this.populateConceptMapData(conceptMapData);\n      }\n      this.processLatestStudentWork();\n    }\n  }\n\n  populateConceptMapData(conceptMapData) {\n    this.populateNodes(conceptMapData);\n    this.populateLinks(conceptMapData);\n\n    if (conceptMapData.backgroundPath != null && conceptMapData.backgroundPath != '') {\n      this.setBackgroundImage(conceptMapData.backgroundPath,\n        conceptMapData.stretchBackground);\n    }\n\n    this.moveLinkTextToFront();\n    this.moveNodesToFront();\n\n    /*\n     * set a timeout to refresh the link labels so that the rectangles\n     * around the labels are properly resized\n     */\n    this.$timeout(() => {\n      this.refreshLinkLabels();\n    });\n  }\n\n  populateNodes(conceptMapData) {\n    this.nodes = [];\n    for (let node of conceptMapData.nodes) {\n      const instanceId = node.instanceId;\n      const originalId = node.originalId;\n      const filePath = node.fileName;\n      const label = node.label;\n      const x = node.x;\n      const y = node.y;\n      const width = node.width;\n      const height = node.height\n      const conceptMapNode = this.ConceptMapService.newConceptMapNode(\n        this.draw, instanceId, originalId, filePath, label,\n        x, y, width, height, this.componentContent.showNodeLabels);\n      this.addNode(conceptMapNode);\n      this.setNodeMouseEvents(conceptMapNode);\n    }\n  }\n\n  populateLinks(conceptMapData) {\n    this.links = [];\n\n    for (let link of conceptMapData.links) {\n      const instanceId = link.instanceId;\n      const originalId = link.originalId;\n      const sourceNodeId = link.sourceNodeInstanceId;\n      const destinationNodeId = link.destinationNodeInstanceId;\n      const label = link.label;\n      const color = link.color;\n      const curvature = link.curvature;\n      const startCurveUp = link.startCurveUp;\n      const endCurveUp = link.endCurveUp;\n      let sourceNode = null;\n      let destinationNode = null;\n\n      if (sourceNodeId != null) {\n        sourceNode = this.getNodeById(sourceNodeId);\n      }\n\n      if (destinationNodeId != null) {\n        destinationNode = this.getNodeById(destinationNodeId);\n      }\n\n      const conceptMapLink = this.ConceptMapService.newConceptMapLink(\n        this.draw, instanceId, originalId, sourceNode, destinationNode, label, color, curvature,\n        startCurveUp, endCurveUp);\n      this.addLink(conceptMapLink);\n      this.setLinkMouseEvents(conceptMapLink);\n    }\n  }\n\n  /**\n   * Refresh the link labels so that the rectangles around the text\n   * labels are resized to fit the text properly. This is required because\n   * the rectangles are not properly sized when the ConceptMapLinks are\n   * initialized. The rectangles need to be rendered first and then the\n   * labels need to be set in order for the rectangles to be resized properly.\n   * This is why this function is called in a $timeout.\n   */\n  refreshLinkLabels() {\n    for (let node of this.nodes) {\n      if (node.showLabel) {\n        const label = node.getLabel();\n        /*\n         * set the label back into the node so that the rectangle\n         * around the text label is resized to the text\n         */\n        node.setLabel(label);\n      }\n    }\n\n    for (let link of this.links) {\n      const label = link.getLabel();\n      /*\n       * set the label back into the link so that the rectangle\n       * around the text label is resized to the text\n       */\n      link.setLabel(label);\n    }\n  }\n\n  /**\n   * A submit was triggered by the component submit button or node submit button\n   * @param submitTriggeredBy what triggered the submit\n   * e.g. 'componentSubmitButton' or 'nodeSubmitButton'\n   */\n  submit(submitTriggeredBy) {\n    if (this.isSubmitDirty) {\n      let performSubmit = true;\n      if (this.hasMaxSubmitCount()) {\n        const numberOfSubmitsLeft = this.getNumberOfSubmitsLeft();\n        let message = '';\n        if (numberOfSubmitsLeft <= 0) {\n          alert(this.$translate('conceptMap.youHaveNoMoreChances'));\n          performSubmit = false;\n        } else if (numberOfSubmitsLeft === 1) {\n          message = this.$translate('conceptMap.youHaveOneChance', {numberOfSubmitsLeft: numberOfSubmitsLeft});\n          performSubmit = confirm(message);\n        } else if (numberOfSubmitsLeft > 1) {\n          message = this.$translate('conceptMap.youHaveMultipleChances', {numberOfSubmitsLeft: numberOfSubmitsLeft});\n          performSubmit = confirm(message);\n        }\n      }\n\n      if (performSubmit) {\n        this.incrementSubmitCounter();\n        if (this.hasMaxSubmitCount() && !this.hasSubmitsLeft()) {\n          this.isSubmitButtonDisabled = true;\n        }\n        if (this.hasAutoGrading()) {\n          this.performAutoGrading();\n        }\n        this.isSubmit = true;\n        this.emitComponentSubmitTriggered();\n      } else {\n        this.isSubmit = false;\n      }\n    }\n  }\n\n  hasAutoGrading() {\n    return this.componentContent.customRuleEvaluator != null && this.componentContent.customRuleEvaluator != '';\n  }\n\n  performAutoGrading() {\n    const customRuleEvaluator = this.componentContent.customRuleEvaluator;\n    const componentContent = this.componentContent;\n    const conceptMapData = this.getConceptMapData();\n    const thisConceptMapService = this.ConceptMapService;\n    let thisResult = {};\n\n    /*\n     * create the any function that can be called in the custom rule\n     * evaluator code. the arguments to the any function are rule names.\n     * for example if we are looking for any of the links below\n     * Sun (Infrared Radiation) Space\n     * Sun (Heat) Space\n     * Sun (Solar Radiation) Space\n     * we will call the any function like this\n     * any(\"Sun (Infrared Radiation) Space\", \"Sun (Heat) Space\", \"Sun (Solar Radiation) Space\")\n     * these dynamic arguments will be placed in the arguments variable\n     */\n    const any = function() {\n      return thisConceptMapService.any(componentContent, conceptMapData, arguments);\n    };\n\n    /*\n     * create the all function that can be called in the custom rule\n     * evaluator code. the arguments to the all function are rule names.\n     * for example if we are looking for all of the links below\n     * Sun (Infrared Radiation) Space\n     * Sun (Heat) Space\n     * Sun (Solar Radiation) Space\n     * we will call the any function like this\n     * all(\"Sun (Infrared Radiation) Space\", \"Sun (Heat) Space\", \"Sun (Solar Radiation) Space\")\n     * these dynamic arguments will be placed in the arguments variable\n     */\n    const all = function() {\n      return thisConceptMapService.all(componentContent, conceptMapData, arguments);\n    }\n\n    /*\n     * create the setResult function that can be called in the custom rule\n     * evaluator code\n     */\n    const setResult = function(result) {\n      thisResult = result;\n    };\n\n    eval(customRuleEvaluator);\n\n    this.autoFeedbackResult = thisResult;\n    let resultString = '';\n\n    if (this.componentContent.showAutoScore && thisResult.score != null) {\n      resultString += this.$translate('SCORE') + ': ' + thisResult.score;\n      if (this.hasMaxScore()) {\n        resultString += '/' + this.getMaxScore();\n      }\n    }\n\n    if (this.componentContent.showAutoFeedback && thisResult.feedback != null) {\n      if (resultString !== '') {\n        resultString += '<br/>';\n      }\n      resultString += this.$translate('FEEDBACK') + ': ' + thisResult.feedback;\n    }\n\n    if (resultString != '') {\n      this.$mdDialog.show(\n        this.$mdDialog.alert()\n          .clickOutsideToClose(true)\n          .title(this.$translate('FEEDBACK'))\n          .htmlContent(resultString)\n          .ariaLabel(this.$translate('FEEDBACK'))\n          .ok(this.$translate('CLOSE'))\n      );\n    }\n\n    this.autoFeedbackString = resultString;\n  }\n\n  /**\n   * Create a new component state populated with the student data\n   * @param action the action that is triggering creating of this component state\n   * e.g. 'submit', 'save', 'change'\n   * @return a promise that will return a component state\n   */\n  createComponentState(action) {\n    const deferred = this.$q.defer();\n    const componentState = this.NodeService.createNewComponentState();\n    const studentData = {};\n    const conceptMapData = this.getConceptMapData();\n    studentData.conceptMapData = conceptMapData;\n    componentState.isSubmit = this.isSubmit;\n\n    if (this.isSubmit) {\n      this.isSubmit = false;\n      if (this.hasAutoFeedbackScore() || this.hasAutoFeedbackText()) {\n        const runId = this.ConfigService.getRunId();\n        const periodId = this.ConfigService.getPeriodId();\n        const nodeId = this.nodeId;\n        const componentId = this.componentId;\n        const toWorkgroupId = this.ConfigService.getWorkgroupId();\n        componentState.annotations = [];\n\n        if (this.hasAutoFeedbackScore()) {\n          const data = {\n            value: parseFloat(this.autoFeedbackResult.score),\n            autoGrader: 'conceptMap'\n          };\n\n          if (this.hasMaxScore()) {\n            data.maxAutoScore = parseFloat(this.getMaxScore());\n          }\n\n          const scoreAnnotation = this.AnnotationService.createAutoScoreAnnotation(\n              runId, periodId, nodeId, componentId, toWorkgroupId, data);\n          componentState.annotations.push(scoreAnnotation);\n\n          if (this.isAuthoringMode()) {\n            if (this.latestAnnotations == null) {\n              this.latestAnnotations = {};\n            }\n            this.latestAnnotations.score = scoreAnnotation;\n          }\n        }\n\n        if (this.hasAutoFeedbackText()) {\n          const data = {\n            value: this.autoFeedbackResult.feedback,\n            autoGrader: 'conceptMap'\n          };\n          const commentAnnotation = this.AnnotationService.createAutoCommentAnnotation(\n              runId, periodId, nodeId, componentId, toWorkgroupId, data);\n          componentState.annotations.push(commentAnnotation);\n\n          if (this.isAuthoringMode()) {\n            if (this.latestAnnotations == null) {\n              this.latestAnnotations = {};\n            }\n            this.latestAnnotations.comment = commentAnnotation;\n          }\n        }\n      }\n    }\n\n    studentData.submitCounter = this.submitCounter;\n    componentState.studentData = studentData;\n    componentState.componentType = 'ConceptMap';\n    componentState.nodeId = this.nodeId;\n    componentState.componentId = this.componentId;\n    this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n\n    return deferred.promise;\n  }\n\n  hasAutoFeedback() {\n    return this.autoFeedbackResult != null;\n  }\n\n  hasAutoFeedbackScore() {\n    return this.autoFeedbackResult != null && this.autoFeedbackResult.score != null;\n  }\n\n  hasAutoFeedbackText() {\n    return this.autoFeedbackResult != null && this.autoFeedbackResult.feedback != null;\n  }\n\n  getConceptMapData() {\n    const studentData = {\n      nodes: [],\n      links: []\n    };\n\n    for (let node of this.nodes) {\n      const nodeJSON = node.toJSONObject();\n      studentData.nodes.push(nodeJSON);\n    }\n\n    for (let link of this.links) {\n      const linkJSON = link.toJSONObject();\n      studentData.links.push(linkJSON);\n    }\n\n    if (this.background != null) {\n      const background = this.background;\n      studentData.background = this.getBackgroundFileName(background);\n\n      // this is the background path e.g. /wise/curriculum/108/assets/background.png\n      studentData.backgroundPath = background;\n\n      studentData.stretchBackground = this.stretchBackground;\n    }\n\n    return studentData;\n  }\n\n  getBackgroundFileName(background) {\n    return background.substring(background.lastIndexOf('/') + 1);\n  }\n\n  /**\n   * Create an auto score annotation\n   * @param data the annotation data\n   * @returns the auto score annotation\n   */\n  createAutoScoreAnnotation(data) {\n    const runId = this.ConfigService.getRunId();\n    const periodId = this.ConfigService.getPeriodId();\n    const nodeId = this.nodeId;\n    const componentId = this.componentId;\n    const toWorkgroupId = this.ConfigService.getWorkgroupId();\n    const annotation = this.AnnotationService.createAutoScoreAnnotation(\n        runId, periodId, nodeId, componentId, toWorkgroupId, data);\n    return annotation;\n  }\n\n  /**\n   * Create an auto comment annotation\n   * @param data the annotation data\n   * @returns the auto comment annotation\n   */\n  createAutoCommentAnnotation(data) {\n    const runId = this.ConfigService.getRunId();\n    const periodId = this.ConfigService.getPeriodId();\n    const nodeId = this.nodeId;\n    const componentId = this.componentId;\n    const toWorkgroupId = this.ConfigService.getWorkgroupId();\n    const annotation = this.AnnotationService.createAutoCommentAnnotation(\n      runId, periodId, nodeId, componentId, toWorkgroupId, data);\n    return annotation;\n  }\n\n  isCRaterEnabled() {\n    return this.CRaterService.isCRaterEnabled(this.componentContent);\n  }\n\n  isCRaterScoreOnSave() {\n    return this.CRaterService.isCRaterScoreOnSave(this.componentContent);\n  }\n\n  isCRaterScoreOnSubmit() {\n    return this.CRaterService.isCRaterScoreOnSubmit(this.componentContent);\n  }\n\n  isCRaterScoreOnChange() {\n    return this.CRaterService.isCRaterScoreOnChange(this.componentContent);\n  }\n\n  isCRaterScoreOnExit() {\n    return this.CRaterService.isCRaterScoreOnExit(this.componentContent);\n  }\n\n  linkTypeSelected(selectedLink) {\n    if (this.highlightedElement != null &&\n      this.highlightedElement.constructor.name === 'ConceptMapLink') {\n      const link = this.highlightedElement;\n      const label = selectedLink.label;\n      const color = selectedLink.color;\n      const originalId = selectedLink.id;\n      link.setLabel(label);\n      link.setColor(color);\n      link.setOriginalId(originalId);\n    }\n    this.clearHighlightedElement();\n    this.studentDataChanged();\n  }\n\n  getLinksTitle() {\n    return this.componentContent.linksTitle;\n  }\n\n  showLinkTypeChooser() {\n    if (!this.initializedDisplayLinkTypeChooserModalOverlay) {\n      this.setLinkTypeChooserOverlayStyle();\n      this.initializedDisplayLinkTypeChooserModalOverlay = true;\n    }\n    this.linkTypeChooserStyle['top'] = '20px';\n    this.linkTypeChooserStyle['left'] = '600px';\n    this.displayLinkTypeChooser = true;\n  }\n\n  hideLinkTypeChooser() {\n    this.displayLinkTypeChooser = false;\n    this.displayLinkTypeChooserModalOverlay = false;\n    this.newlyCreatedLink = null;\n  }\n\n  setupSVG() {\n    this.draw = SVG(this.svgId);\n    this.draw.width(this.width);\n    this.draw.height(this.height);\n\n    this.highlightedElement = null;\n    this.activeNode = null;\n    this.activeLink = null;\n    this.drawingLink = false;\n    this.newlyCreatedLink = null;\n\n    this.draw.mousedown((event) => {\n      this.svgMouseDown(event);\n    });\n\n    this.draw.mouseup((event) => {\n      this.svgMouseUp(event);\n    });\n\n    this.draw.mousemove((event) => {\n      this.svgMouseMove(event);\n    });\n\n    this.addDragOverListenerIfNecessary();\n    this.addDropListenerIfNecessary();\n    this.setLinkTypeChooserStyle();\n  }\n\n  addDragOverListenerIfNecessary() {\n    const svg = angular.element('#' + this.svgId);\n    /*\n     * check if we have already added the dragover listener so we don't\n     * add multiple listeners for the same event. adding multiple listeners\n     * to the same event may occur in the authoring tool.\n     */\n    if (!this.addedDragOverListener) {\n      /*\n       * listen for the dragover event which occurs when the user is\n       * dragging a node onto the svg\n       */\n      svg[0].addEventListener('dragover', (event) => {\n        /*\n         * prevent the default because if we don't, the user won't\n         * be able to drop a new node instance onto the svg in the\n         * authoring mode\n         */\n        event.preventDefault();\n      });\n\n      this.addedDragOverListener = true;\n    }\n  }\n\n  addDropListenerIfNecessary() {\n    const svg = angular.element('#' + this.svgId);\n    /*\n     * check if we have already added the drop listener so we don't\n     * add multiple listeners for the same event. adding multiple listeners\n     * to the same event may occur in the authoring tool.\n     */\n    if (!this.addedDropListener) {\n      /*\n       * listen for the drop event which occurs when the student drops\n       * a new node onto the svg\n       */\n      svg[0].addEventListener('drop', (event) => {\n\n        /*\n         * the user has dropped a new node onto the svg to create a\n         * new instance of a node\n         */\n        this.newNodeDropped(event);\n      });\n\n      this.addedDropListener = true;\n    }\n  }\n\n  setLinkTypeChooserStyle() {\n    this.linkTypeChooserStyle = {\n      'width': '300px',\n      'position': 'absolute',\n      'left': '600px',\n      'top': '20px',\n      'border': '1px solid black',\n      'backgroundColor': 'white',\n      'cursor': 'pointer',\n      'z-index': 10000,\n      'padding': '16px'\n    };\n  }\n\n  setLinkTypeChooserOverlayStyle() {\n    this.modalWidth = this.getModalWidth();\n    const overlayWidth = this.modalWidth;\n    const conceptMapContainer = angular.element('#' + this.conceptMapContainerId);\n    const height = conceptMapContainer.height();\n    this.linkTypeChooserModalOverlayStyle = {\n      'position': 'absolute',\n      'z-index': 9999,\n      'width': overlayWidth,\n      'height': height,\n      'background-color': '#000000',\n      'opacity': 0.4\n    };\n  }\n\n  getModalWidth() {\n    const selectNodeBarWidthString = angular.element(document.getElementById('#' + this.selectNodeBarId)).css('width');\n    const svgWidthString = angular.element(document.getElementById(this.svgId)).css('width');\n    if (selectNodeBarWidthString != null && svgWidthString != null) {\n      const selectNodeBarWidth = parseInt(selectNodeBarWidthString.replace('px', ''));\n      const svgWidth = parseInt(svgWidthString.replace('px', ''));\n      if (selectNodeBarWidth != null && svgWidth != null) {\n        return selectNodeBarWidth + svgWidth;\n      }\n    }\n    return null;\n  }\n\n  getModalHeight() {\n    const selectNodeBarHeightString = angular.element(document.getElementById('#' + this.selectNodeBarId)).css('height');\n    const svgHeightString = angular.element(document.getElementById(this.svgId)).css('height');\n    if (selectNodeBarHeightString != null && svgHeightString != null) {\n      const selectNodeBarHeight = parseInt(selectNodeBarHeightString.replace('px', ''));\n      const svgHeight = parseInt(svgHeightString.replace('px', ''));\n      if (selectNodeBarHeight != null && svgHeight != null) {\n        return Math.max(selectNodeBarHeight, svgHeight);\n      }\n    }\n    return null;\n  }\n\n  cancelLinkTypeChooser() {\n    if (this.newlyCreatedLink != null) {\n      /*\n       * the student has just created this link and has not yet chosen\n       * a link type so we will remove the link\n       */\n      this.newlyCreatedLink.remove();\n      this.newlyCreatedLink = null;\n    }\n\n    this.hideLinkTypeChooser();\n    this.clearHighlightedElement();\n  }\n\n  svgMouseDown(event) {\n    if (event.target.tagName === 'svg') {\n      this.clearHighlightedElement();\n    }\n  }\n\n  svgMouseUp(event) {\n    if (this.activeLink != null && this.activeNode == null) {\n      /*\n       * the student was creating a link but did not connect the link\n       * to a destination node so we will just remove the link\n       */\n      this.activeLink.remove();\n    }\n\n    this.drawingLink = false;\n    this.activeLink = null;\n    this.enableNodeDragging();\n    this.moveLinkTextToFront();\n    this.moveNodesToFront();\n  }\n\n  svgMouseMove(event) {\n    if (this.activeLink != null) {\n      /*\n       * there is an active link which means the student has created a\n       * new link and is in the process of choosing the link's destination\n       * node\n       */\n\n      // get the coordinates that the link should be updated to\n      const coordinates = this.getRelativeCoordinatesByEvent(event);\n      const x1 = null;\n      const y1 = null;\n      const x2 = coordinates.x;\n      const y2 = coordinates.y;\n\n      /*\n       * get the location of the center of the connector that the link\n       * originated from\n       */\n      const startX = this.activeLinkStartX;\n      const startY = this.activeLinkStartY;\n\n      /*\n       * get the distance from the start to the current position of the\n       * mouse\n       */\n      const distance = this.ConceptMapService.calculateDistance(startX, startY, x2, y2);\n\n      /*\n       * check if we have set the curvature yet and that the mouse\n       * is more than 20 pixels away from the start.\n       *\n       * we will determine the curvature of the link based upon how\n       * the user has dragged the mouse in relation to the center\n       * of the connector. if they start drawing the link horizontally\n       * we will create a straight line with no curvature. if they\n       * start drawing the link by moving the mouse up, we will create\n       * a line that curves up. if they start drawing the link by\n       * moving the mouse down, we will create a line that curves down.\n       */\n      if (!this.linkCurvatureSet && distance > 20) {\n        /*\n         * get the slope of the line from the start to the location\n         * of the mouse\n         */\n        const slope = Math.abs(this.ConceptMapService.getSlope(startX, startY, x2, y2));\n\n        if (y2 < startY) {\n          // the user has moved the mouse above the connector\n          this.setActiveLinkCurvature(slope);\n\n          // make the link curve up\n          this.activeLink.startCurveUp = true;\n          this.activeLink.endCurveUp = true;\n        } else if (y2 > startY) {\n          // the user has moved the mouse below the connector\n          this.setActiveLinkCurvature(slope);\n\n          // make the link curve down\n          this.activeLink.startCurveUp = false;\n          this.activeLink.endCurveUp = false;\n        }\n\n        // remember that we have set the curvature\n        this.linkCurvatureSet = true;\n      }\n\n      const isDragging = true;\n\n      // redraw the link with the new coordinates\n      this.activeLink.updateCoordinates(x1, y1, x2, y2, isDragging);\n    }\n  }\n\n  setActiveLinkCurvature(slope) {\n    if (slope == null) {\n      /*\n       * the slope is infinite so we will default the\n       * curvature to 0.5\n       */\n      this.activeLink.curvature = 0.5;\n    } else if (slope < 1.0) {\n      // make the link straight\n      this.activeLink.curvature = 0.0;\n    } else {\n      // make the link curved\n      this.activeLink.curvature = 0.5;\n    }\n  }\n\n  /**\n   * Set the active node. This is called when the student places the mouse\n   * over a node. When a node becomes active, we show the delete button and\n   * the border.\n   * @param node the node to make active\n   */\n  setActiveNode(node) {\n    node.showDeleteButton();\n    node.showBorder();\n    this.activeNode = node;\n  }\n\n  clearActiveNode() {\n    for (let node of this.nodes) {\n      if (node === this.activeNode && node !== this.highlightedElement) {\n        node.hideDeleteButton();\n        node.hideBorder();\n      }\n    }\n    this.activeNode = null;\n  }\n\n  /**\n   * Get the coordinates of the mouse relative to the svg element\n   * @param event a mouse event\n   * @returns an object containing x and y values\n   */\n  getRelativeCoordinatesByEvent(event) {\n    const offsetX = event.offsetX;\n    const offsetY = event.offsetY;\n    let parentOffsetX = 0;\n    let parentOffsetY = 0;\n    const userAgent = navigator.userAgent;\n    if (event.target.tagName === 'svg') {\n      if (this.isUserAgentChrome(userAgent)) {\n        const matrix = event.target.getCTM();\n        parentOffsetX = matrix.e;\n        parentOffsetY = matrix.f;\n      } else if (this.isUserAgentFirefox(userAgent)) {\n        const matrix = event.target.createSVGMatrix();\n        parentOffsetX = matrix.e;\n        parentOffsetY = matrix.f;\n      } else {\n        const matrix = event.target.getCTM();\n        parentOffsetX = matrix.e;\n        parentOffsetY = matrix.f;\n      }\n    } else if (event.target.tagName === 'circle') {\n      if (this.isUserAgentChrome(userAgent)) {\n\n      } else if (this.isUserAgentFirefox(userAgent)) {\n        const matrix = event.target.getCTM();\n        const bbox = event.target.getBBox();\n        parentOffsetX = matrix.e + bbox.x;\n        parentOffsetY = matrix.f + bbox.y;\n      }\n    } else if (event.target.tagName === 'rect') {\n      if (this.isUserAgentChrome(userAgent)) {\n\n      } else if (this.isUserAgentFirefox(userAgent)) {\n        const matrix = event.target.getCTM();\n        const bbox = event.target.getBBox();\n        const x = bbox.x;\n        const y = bbox.y;\n        parentOffsetX = matrix.e + x;\n        parentOffsetY = matrix.f + y;\n      }\n    } else if (event.target.tagName === 'image') {\n      if (this.isUserAgentChrome(userAgent)) {\n\n      } else if (this.isUserAgentFirefox(userAgent)) {\n        const matrix = event.target.parentElement.getCTM();\n        parentOffsetX = matrix.e;\n        parentOffsetY = matrix.f;\n      }\n    } else if (event.target.tagName === 'path') {\n      if (this.isUserAgentChrome(userAgent)) {\n\n      } else if (this.isUserAgentFirefox(userAgent)) {\n        const x2 = event.target.attributes['x2'];\n        const y2 = event.target.attributes['y2'];\n        if (x2 != null && y2 != null) {\n          parentOffsetX = parseInt(x2.value);\n          parentOffsetY = parseInt(y2.value);\n        }\n      }\n    } else {\n      if (this.isUserAgentChrome(userAgent)) {\n\n      } else if (this.isUserAgentFirefox(userAgent)) {\n        const matrix = event.target.getCTM();\n        parentOffsetX = matrix.e;\n        parentOffsetY = matrix.f;\n      }\n    }\n\n    /*\n     * add the parent offset values to the relative offset values to obtain\n     * the x and y values relative to the upper left corner of the svg\n     */\n    const x = parentOffsetX + offsetX;\n    const y = parentOffsetY + offsetY;\n\n    const returnObject = {\n      x: x,\n      y: y\n    };\n\n    return returnObject;\n  }\n\n  isUserAgentChrome(userAgent) {\n    return userAgent.indexOf('Chrome') !== -1;\n  }\n\n  isUserAgentFirefox(userAgent) {\n    return userAgent.indexOf('Firefox') !== -1;\n  }\n\n  /**\n   * Called when the student clicks down on a node in the left node bar\n   * @param $event the mouse down event\n   * @param node the node the student clicked down on\n   */\n  selectNode($event, node) {\n    this.selectedNode = node;\n\n    /*\n     * remember the offset of the mouse relative to the upper left of the\n     * node's image so that we properly calculate the node position when\n     * the student releases the mouse to put the node in the svg\n     */\n    this.tempOffsetX = $event.offsetX;\n    this.tempOffsetY = $event.offsetY;\n  }\n\n  newNodeDropped(event) {\n    const selectedNode = this.selectedNode;\n    const filePath = selectedNode.fileName;\n    const label = selectedNode.label;\n    const width = selectedNode.width;\n    const height = selectedNode.height;\n    const originalId = selectedNode.id;\n    const coordinates = this.getRelativeCoordinatesByEvent(event);\n    const x = coordinates.x - this.tempOffsetX;\n    const y = coordinates.y - this.tempOffsetY;\n    const newConceptMapNodeId = this.getNewConceptMapNodeId();\n    const conceptMapNode = this.ConceptMapService.newConceptMapNode(\n        this.draw, newConceptMapNodeId, originalId, filePath, label,\n        x, y, width, height, this.componentContent.showNodeLabels);\n    this.addNode(conceptMapNode);\n    this.setNodeMouseEvents(conceptMapNode);\n    this.setHighlightedElement(conceptMapNode);\n    this.studentDataChanged();\n    this.enableNodeDragging();\n  }\n\n  getNewConceptMapNodeId() {\n    let nextAvailableNodeIdNumber = 1;\n    const usedNumbers = [];\n    for (let node of this.nodes) {\n      const nodeId = node.getId();\n      const nodeIdNumber = parseInt(nodeId.replace('studentNode', ''));\n      usedNumbers.push(nodeIdNumber);\n    }\n\n    if (usedNumbers.length > 0) {\n      const maxNumberUsed = Math.max.apply(Math, usedNumbers);\n      if (!isNaN(maxNumberUsed)) {\n        nextAvailableNodeIdNumber = maxNumberUsed + 1;\n      }\n    }\n\n    return 'studentNode' + nextAvailableNodeIdNumber;\n  }\n\n  getNewConceptMapLinkId() {\n    let nextAvailableLinkIdNumber = 1;\n    const usedNumbers = [];\n    for (let link of this.links) {\n      const linkId = link.getId();\n      const linkIdNumber = parseInt(linkId.replace('studentLink', ''));\n      usedNumbers.push(linkIdNumber);\n    }\n\n    if (usedNumbers.length > 0) {\n      const maxNumberUsed = Math.max.apply(Math, usedNumbers);\n      if (!isNaN(maxNumberUsed)) {\n        nextAvailableLinkIdNumber = maxNumberUsed + 1;\n      }\n    }\n\n    return 'studentLink' + nextAvailableLinkIdNumber;\n  }\n\n  setNodeMouseEvents(conceptMapNode) {\n    conceptMapNode.setNodeMouseOver((event) => {\n      this.nodeMouseOver(event);\n    });\n\n    conceptMapNode.setNodeMouseOut((event) => {\n      this.nodeMouseOut(event);\n    });\n\n    conceptMapNode.setConnectorMouseDown((event) => {\n      this.disableNodeDragging();\n      this.connectorMouseDown(event);\n    });\n\n    conceptMapNode.setNodeMouseDown((event) => {\n      this.nodeMouseDown(event);\n    });\n\n    conceptMapNode.setNodeMouseUp((event) => {\n      this.nodeMouseUp(event);\n    });\n\n    conceptMapNode.setDeleteButtonMouseDown((event) => {\n      this.nodeDeleteButtonMouseDown(event);\n    });\n\n    conceptMapNode.setDeleteButtonMouseOver((event) => {\n      this.nodeDeleteButtonMouseOver(event);\n    });\n\n    conceptMapNode.setDeleteButtonMouseOut((event) => {\n      this.nodeDeleteButtonMouseOut(event);\n    });\n\n    conceptMapNode.setDragMove((event) => {\n      this.nodeDragMove(event);\n    });\n  }\n\n  setHighlightedElement(element) {\n    this.clearHighlightedElement();\n    this.hideLinkTypeChooser();\n    this.highlightedElement = element;\n    element.isHighlighted(true);\n    element.showDeleteButton();\n\n    if(element.constructor.name === 'ConceptMapNode') {\n      element.showBorder();\n    } else if (element.constructor.name === 'ConceptMapLink') {\n      this.showLinkTypeChooser();\n      this.selectedLinkType = element.getOriginalId();\n    }\n  }\n\n  clearHighlightedElement() {\n    if (this.highlightedElement != null) {\n      if(this.highlightedElement.constructor.name == 'ConceptMapNode') {\n        this.highlightedElement.hideBorder();\n      } else if (this.highlightedElement.constructor.name == 'ConceptMapLink') {\n        this.hideLinkTypeChooser();\n      }\n      this.highlightedElement.isHighlighted(false);\n      this.highlightedElement.hideDeleteButton();\n      this.highlightedElement = null;\n    }\n  }\n\n  enableNodeDragging() {\n    for (let node of this.nodes) {\n      const group = node.getGroup();\n      // get the bounds that we will allow the node group to be dragged in dragged in\n      const options = {\n        minX: 0,\n        minY: 0,\n        maxX: this.width,\n        maxY: this.height\n      };\n      group.draggable(options);\n    }\n  }\n\n  disableNodeDragging() {\n    for (let node of this.nodes) {\n      const group = node.getGroup();\n      group.draggable(false);\n    }\n  }\n\n  moveLinkTextToFront() {\n    for (let link of this.links) {\n      link.moveTextGroupToFront();\n    }\n  }\n\n  moveNodesToFront() {\n    for (let node of this.nodes) {\n      const group = node.getGroup();\n      group.front();\n    }\n  }\n\n  addNode(node) {\n    this.nodes.push(node);\n  }\n\n  removeNode(node) {\n    const outgoingLinks = node.getOutgoingLinks();\n    let numOutgoingLinks = outgoingLinks.length;\n    while (numOutgoingLinks > 0) {\n      const outgoingLink = outgoingLinks[0];\n      this.removeLink(outgoingLink);\n      numOutgoingLinks--;\n    }\n\n    const incomingLinks = node.getIncomingLinks();\n    let numIncomingLinks = incomingLinks.length;\n    while (numIncomingLinks > 0) {\n      const incomingLink = incomingLinks[0];\n      this.removeLink(incomingLink);\n      numIncomingLinks--;\n    }\n\n    node.remove();\n\n    for (let n = 0; n < this.nodes.length; n++) {\n      let tempNode = this.nodes[n];\n      if (tempNode == node) {\n        this.nodes.splice(n, 1);\n        break;\n      }\n    }\n  }\n\n  removeAllNodes() {\n    for (let node of this.nodes) {\n      node.remove();\n    }\n    this.nodes = [];\n  }\n\n  getNodeById(id) {\n    for (let node of this.nodes) {\n      const nodeId = node.getId();\n      if (id === nodeId) {\n        return node;\n      }\n    }\n    return null;\n  }\n\n  getNodeByGroupId(id) {\n    for (let node of this.nodes) {\n      const groupId = node.getGroupId();\n      if (id === groupId) {\n        return node;\n      }\n    }\n    return null;\n  }\n\n  getLinkById(id) {\n    for (let link of this.links) {\n      const linkId = link.getId();\n      if (id === linkId) {\n        return link;\n      }\n    }\n    return null;\n  }\n\n  getLinkByGroupId(id) {\n    for (let link of this.links) {\n      const groupId = link.getGroupId();\n      if (id === groupId) {\n        return link;\n      }\n    }\n    return null;\n  }\n\n  getNodeByConnectorId(id) {\n    for (let node of this.nodes) {\n      const connectorId = node.getConnectorId();\n      if (id === connectorId) {\n        return node;\n      }\n    }\n    return null;\n  }\n\n  removeNodeById(groupId) {\n    for (let n = 0; n < this.nodes.length; n++) {\n      const tempNode = this.nodes[n];\n      const tempNodeId = tempNode.getId();\n      if (groupId === tempNodeId) {\n        this.nodes.splice(n, 1);\n        break;\n      }\n    }\n  }\n\n  addLink(link) {\n    this.links.push(link);\n  }\n\n  removeLink(link) {\n    link.remove();\n    for (let l = 0; l < this.links.length; l++) {\n      const tempLink = this.links[l];\n      if (link == tempLink) {\n        this.links.splice(l, 1);\n        break;\n      }\n    }\n  }\n\n  removeAllLinks() {\n    for (let link of this.links) {\n      link.remove();\n    }\n    this.links = [];\n  }\n\n  nodeMouseOver(event) {\n    const groupId = event.target.parentElement.id;\n    const node = this.getNodeByGroupId(groupId);\n    if (node != null) {\n      this.setActiveNode(node);\n    }\n  }\n\n  nodeMouseOut(event) {\n    const groupId = event.target.parentElement.id;\n    const node = this.getNodeByGroupId(groupId);\n    if (node != null) {\n      this.clearActiveNode();\n    }\n  }\n\n  nodeMouseDown(event) {\n    if (event.target.parentElement != null) {\n      const groupId = event.target.parentElement.id;\n      const node = this.getNodeByGroupId(groupId);\n      if (node != null) {\n        this.setHighlightedElement(node);\n      }\n    }\n  }\n\n  nodeMouseUp(event) {\n    if (this.drawingLink && this.activeLink != null) {\n      /*\n       * the student is creating a link and has just released the mouse\n       * over a node to connect the destination node of the link\n       */\n\n      const groupId = event.target.parentElement.id;\n      const node = this.getNodeByGroupId(groupId);\n      const sourceNode = this.activeLink.sourceNode;\n      const sourceNodeGroupId = sourceNode.getGroupId();\n\n      if (sourceNodeGroupId === groupId) {\n        /*\n         * if the source of the link is the same as the\n         * destination node, we will not connect the link\n         */\n        this.activeLink.remove();\n        this.activeLink = null;\n      } else {\n        /*\n         * the source node is different than the destination\n         * node so we will connect the link\n         */\n        this.activeLink.setDestination(node);\n        this.addLink(this.activeLink);\n        this.setHighlightedElement(this.activeLink);\n\n        /*\n         * set the link as a newly created link so that if the\n         * student clicks the cancel button, we will remove\n         * the link\n         */\n        this.newlyCreatedLink = this.activeLink;\n        this.displayLinkTypeChooserModalOverlay = true;\n        this.studentDataChanged();\n      }\n    }\n\n    this.drawingLink = false;\n  }\n\n  linkDeleteButtonClicked(event, link) {\n    this.removeLink(link);\n    this.studentDataChanged();\n    this.hideLinkTypeChooser();\n  }\n\n  connectorMouseDown(event) {\n    this.drawingLink = true;\n    const connector = event.target;\n\n    /*\n     * disable node dragging so that the node isn't dragged when the\n     * link head is being dragged\n     */\n    this.disableNodeDragging();\n    const node = this.getNodeByConnectorId(connector.id);\n    const newConceptMapLinkId = this.getNewConceptMapLinkId();\n\n    /*\n     * we will not know what the original id is until the student has\n     * selected a link type\n     */\n    const originalId = null;\n    const link = this.ConceptMapService.newConceptMapLink(this.draw, newConceptMapLinkId, originalId, node);\n    this.setLinkMouseEvents(link);\n    this.activeLink = link;\n    this.linkCurvatureSet = false;\n    this.activeLinkStartX = node.connectorCX();\n    this.activeLinkStartY = node.connectorCY();\n    this.setHighlightedElement(link);\n    this.clearActiveNode();\n    this.setActiveNode(node);\n  }\n\n  setLinkMouseEvents(link) {\n    link.setLinkMouseDown((event) => {\n      this.linkMouseDown(event);\n    });\n\n    link.setLinkTextMouseDown((event) => {\n      this.linkTextMouseDown(event);\n    });\n\n    link.setLinkMouseOver((event) => {\n      this.linkMouseOver(event);\n    });\n\n    link.setLinkMouseOut((event) => {\n      this.linkMouseOut(event);\n    });\n\n    link.setDeleteButtonClicked((event) => {\n      this.linkDeleteButtonClicked(event, link);\n    });\n  }\n\n  linkMouseDown(event) {\n    const groupId = this.getGroupId(event.target);\n    const link = this.getLinkByGroupId(groupId);\n    this.setHighlightedElement(link);\n  }\n\n  linkTextMouseDown(event) {\n    let linkGroupId = null;\n\n    /*\n     * the link group id is set into the text group in the linkGroupId\n     * variable. the text group hierarchy looks like this\n     * text group > text > tspan\n     * text group > rect\n     */\n    if (event.target.nodeName === 'tspan') {\n      linkGroupId = event.target.parentElement.parentElement.linkGroupId;\n    } else if (event.target.nodeName === 'text') {\n      linkGroupId = event.target.parentElement.linkGroupId;\n    } else if (event.target.nodeName === 'rect') {\n      linkGroupId = event.target.parentElement.linkGroupId;\n    }\n\n    if (linkGroupId != null) {\n      const link = this.getLinkByGroupId(linkGroupId);\n      this.setHighlightedElement(link);\n    }\n  }\n\n  linkMouseOver(event) {\n    const groupId = this.getGroupId(event.target);\n    const link = this.getLinkByGroupId(groupId);\n    link.showDeleteButton();\n  }\n\n  linkMouseOut(event) {\n    const groupId = this.getGroupId(event.target);\n    const link = this.getLinkByGroupId(groupId);\n    if (link != null && link != this.highlightedElement) {\n      link.hideDeleteButton();\n    }\n  }\n\n  nodeDeleteButtonMouseDown(event) {\n    if (event.target.parentElement != null) {\n      const groupId = event.target.parentElement.parentElement.id;\n      const node = this.getNodeByGroupId(groupId);\n      this.removeNode(node);\n      this.studentDataChanged();\n    }\n  }\n\n  nodeDeleteButtonMouseOver(event) {\n    const groupId = event.target.parentElement.parentElement.id;\n    const node = this.getNodeByGroupId(groupId);\n    this.setActiveNode(node);\n  }\n\n  nodeDeleteButtonMouseOut(event) {\n    const groupId = event.target.parentElement.parentElement.id;\n    const node = this.getNodeByGroupId(groupId);\n    this.clearActiveNode(node);\n  }\n\n  nodeDragMove(event) {\n    const groupId = event.target.id;\n    const node = this.getNodeByGroupId(groupId);\n    if (node != null) {\n      node.dragMove(event);\n    }\n    this.studentDataChanged();\n  }\n\n  /**\n   * Get the group id of an element. All elements of a node or link are\n   * contained in a group. These groups are the children of the main svg\n   * element.\n   * for example a node's image element will be located here\n   * svg > group > image\n   * for example a link's path element will be located here\n   * svg > group > path\n   *\n   * @param element get the group id of this element\n   * @returns the group id\n   */\n  getGroupId(element) {\n    let groupId = null;\n    let currentElement = element;\n    let previousId = null;\n\n    // loop until we have reached the svg element\n    while (currentElement != null) {\n      if (currentElement.tagName === 'svg') {\n        // base case. we have found the svg element.\n\n        // the group id will be the previous id we saw\n        groupId = previousId;\n\n        // set the current element to null so that the while loop ends\n        currentElement = null;\n      } else {\n        // remember the element id\n        previousId = currentElement.id;\n\n        /*\n         * set the current element to the parent to continue searching\n         * up the hierarchy\n         */\n        currentElement = currentElement.parentElement;\n      }\n    }\n\n    return groupId;\n  }\n\n  populateStarterConceptMap() {\n    if (this.componentContent.starterConceptMap != null) {\n      this.populateConceptMapData(this.componentContent.starterConceptMap);\n    }\n  }\n\n  clearConceptMap() {\n    this.removeAllLinks();\n    this.removeAllNodes();\n  }\n\n  /**\n   * Reset the concept map data. We will clear the concept map data and\n   * if there is starter concept map data we will set it into the concept map.\n   */\n  resetConceptMap() {\n    const message = this.$translate('conceptMap.areYouSureYouWantToResetYourWork');\n    if (confirm(message)) {\n      this.clearConceptMap();\n      if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n        this.handleConnectedComponents();\n      } else if (this.componentContent.starterConceptMap != null) {\n        const conceptMapData = this.componentContent.starterConceptMap;\n        this.populateConceptMapData(conceptMapData);\n      }\n    }\n  }\n\n  /**\n   * Show the auto feedback that was generated when the student previously\n   * clicked \"Check Answer\".\n   */\n  showAutoFeedback() {\n    this.$mdDialog.show(\n      this.$mdDialog.alert()\n      .parent(angular.element(document.querySelector('#' + this.feedbackContainerId)))\n      .clickOutsideToClose(true)\n      .title(this.$translate('FEEDBACK'))\n      .htmlContent(this.autoFeedbackString)\n      .ariaLabel(this.$translate('FEEDBACK'))\n      .ok(this.$translate('CLOSE'))\n    );\n  }\n\n  /**\n   * Snip the concept map by converting it to an image\n   * @param $event the click event\n   */\n  snip($event) {\n    // get the svg element. this will obtain an array.\n    let svgElement = angular.element('#svg_' + this.nodeId + '_' + this.componentId);\n    if (svgElement != null && svgElement.length > 0) {\n      svgElement = svgElement[0];\n\n      // get the svg element as a string\n      const serializer = new XMLSerializer();\n      let svgString = serializer.serializeToString(svgElement);\n\n      // find all the images in the svg and replace them with Base64 images\n      this.ConceptMapService.getHrefToBase64ImageReplacements(svgString).then((images) => {\n        /*\n         * Loop through all the image objects. Each object contains\n         * an image href and a Base64 image.\n         */\n        for (let imagePair of images) {\n          // get the image href e.g. /wise/curriculum/25/assets/Sun.png\n          const imageHref = imagePair.imageHref;\n\n          // get the Base64 image\n          const base64Image = imagePair.base64Image;\n\n          // create a regex to match the image href\n          const imageRegEx = new RegExp(imageHref, 'g');\n\n          /*\n           * replace all the instances of the image href with the\n           * Base64 image\n           */\n          svgString = svgString.replace(imageRegEx, base64Image);\n        }\n\n        // create a canvas to draw the image on\n        const myCanvas = document.createElement('canvas');\n        const ctx = myCanvas.getContext('2d');\n\n        // create an svg blob\n        const svg = new Blob([svgString], {type:'image/svg+xml;charset=utf-8'});\n        const domURL = self.URL || self.webkitURL || self;\n        const url = domURL.createObjectURL(svg);\n        const image = new Image();\n\n        /*\n         * set the UtilService in a local variable so we can access it\n         * in the onload callback function\n         */\n        const thisUtilService = this.UtilService;\n\n        // the function that is called after the image is fully loaded\n        image.onload = (event) => {\n\n          // get the image that was loaded\n          const image = event.target;\n\n          // set the dimensions of the canvas\n          myCanvas.width = image.width;\n          myCanvas.height = image.height;\n          ctx.drawImage(image, 0, 0);\n\n          // get the canvas as a Base64 string\n          const base64Image = myCanvas.toDataURL('image/png');\n\n          // get the image object\n          const imageObject = thisUtilService.getImageObjectFromBase64String(base64Image, false);\n\n          // create a notebook item with the image populated into it\n          this.NotebookService.addNote($event, imageObject);\n        };\n\n        // set the src of the image so that the image gets loaded\n        image.src = url;\n      });\n    }\n  }\n\n  /**\n   * Create a component state with the merged student responses\n   * @param componentStates an array of component states\n   * @return a component state with the merged student responses\n   */\n  createMergedComponentState(componentStates) {\n    let mergedNodes = [];\n    let mergedLinks = [];\n    let backgroundPath = null;\n    let stretchBackground = null;\n    for (let componentState of componentStates) {\n      if (componentState.componentType === 'ConceptMap') {\n        const studentData = componentState.studentData;\n        const conceptMapData = studentData.conceptMapData;\n        mergedNodes = mergedNodes.concat(conceptMapData.nodes);\n        mergedLinks = mergedLinks.concat(conceptMapData.links);\n        if (conceptMapData.backgroundPath != null && conceptMapData.backgroundPath !== '') {\n          backgroundPath = conceptMapData.backgroundPath;\n          stretchBackground = conceptMapData.stretchBackground;\n        }\n      } else if (componentState.componentType === 'Draw' ||\n          componentState.componentType === 'Embedded' ||\n          componentState.componentType === 'Graph' ||\n          componentState.componentType === 'Label' ||\n          componentState.componentType === 'Table') {\n        let connectedComponent =\n          this.UtilService.getConnectedComponentByComponentState(this.componentContent, componentState);\n        if (connectedComponent.importWorkAsBackground === true) {\n          this.setComponentStateAsBackgroundImage(componentState);\n        }\n      }\n    }\n\n    if (this.componentContent.background != null && this.componentContent.background !== '') {\n      backgroundPath = this.componentContent.background;\n      if (this.componentContent.stretchBackground) {\n        stretchBackground = this.componentContent.stretchBackground;\n      }\n    }\n\n    let mergedComponentState = this.NodeService.createNewComponentState();\n    mergedComponentState.studentData = {\n      conceptMapData: {\n        nodes: mergedNodes,\n        links: mergedLinks,\n        backgroundPath: backgroundPath\n      }\n    };\n\n    if (stretchBackground != null) {\n      mergedComponentState.studentData.conceptMapData.stretchBackground = stretchBackground;\n    }\n\n    mergedComponentState = this.ProjectService.injectAssetPaths(mergedComponentState);\n    return mergedComponentState;\n  }\n\n  /**\n   * Create an image from a component state and set the image as the background.\n   * @param componentState A component state.\n   */\n  setComponentStateAsBackgroundImage(componentState) {\n    this.UtilService.generateImageFromComponentState(componentState).then((image) => {\n      this.setBackgroundImage(image.url);\n    });\n  }\n\n  /**\n   * Set the background image on the svg canvas\n   * @param backgroundPath the absolute path to the background image\n   * @param stretchBackground whether to stretch the background to cover the\n   * whole svg background\n   */\n  setBackgroundImage(backgroundPath, stretchBackground) {\n    this.background = backgroundPath;\n    this.stretchBackground = stretchBackground;\n    if (stretchBackground) {\n      // stretch the background to fit the whole svg element\n      this.backgroundSize = '100% 100%';\n    } else {\n      // use the original dimensions of the background image\n      this.backgroundSize = '';\n    }\n  }\n}\n\nConceptMapController.$inject = [\n  '$anchorScroll',\n  '$filter',\n  '$location',\n  '$mdDialog',\n  '$q',\n  '$rootScope',\n  '$scope',\n  '$timeout',\n  'AnnotationService',\n  'ConceptMapService',\n  'ConfigService',\n  'CRaterService',\n  'NodeService',\n  'NotebookService',\n  'ProjectService',\n  'StudentAssetService',\n  'StudentDataService',\n  'UtilService'\n];\n\nexport default ConceptMapController;\n"]}