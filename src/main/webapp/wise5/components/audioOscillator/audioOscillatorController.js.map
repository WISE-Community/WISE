{"version":3,"sources":["audioOscillatorController.es6"],"names":["AudioOscillatorController","$filter","$mdDialog","$q","$rootScope","$scope","$timeout","AnnotationService","AudioOscillatorService","ConfigService","NodeService","NotebookService","ProjectService","StudentAssetService","StudentDataService","UtilService","frequenciesPlayed","frequenciesPlayedSorted","numberOfFrequenciesPlayed","minFrequencyPlayed","maxFrequencyPlayed","oscilloscopeId","componentId","initializeDefaultSettings","setButtonTextToPlay","setParametersFromComponentContent","componentState","isStudentMode","hasShowWorkConnectedComponent","componentContent","handleConnectedComponents","componentStateHasStudentWork","setStudentWork","hasConnectedComponent","hasMaxSubmitCount","hasSubmitsLeft","disableSubmitButton","disableComponentIfNecessary","isGradingMode","isGradingRevisionMode","initializeAudioContext","drawOscilloscopeGridAfterTimeout","initializeScopeGetComponentState","broadcastDoneRenderingComponent","isPlaying","oscillatorType","frequency","oscillatorTypes","oscilloscopeWidth","oscilloscopeHeight","gridCellSize","stopAfterGoodDraw","audioContext","AudioContext","drawOscilloscopeGrid","event","args","stop","close","submit","startingFrequency","length","studentData","submitCounter","attachments","processLatestStudentWork","action","deferred","defer","createNewComponentState","isSubmit","componentType","nodeId","createComponentStateAdditionalProcessing","promise","isAudioPlaying","play","setButtonTextToStop","playStopButtonText","$translate","oscillator","createOscillator","type","value","gain","createGain","destination","analyser","createAnalyser","fftSize","connect","start","goodDraw","drawOscilloscope","addFrequencyPlayed","studentDataChanged","push","makeCopyOfJSONObject","sort","a","b","Math","min","max","startDrawingAudioSignalLine","firstRisingZeroCrossingIndex","drawOscilloscopePoints","isFirstRisingZeroCrossingIndexCloseToZero","isDrawAgain","requestAnimationFrame","bufferLength","frequencyBinCount","timeData","Uint8Array","getByteTimeDomainData","ctx","document","getElementById","getContext","lineWidth","strokeStyle","beginPath","width","canvas","height","getTimeData","sliceWidth","getSliceWidth","x","v","y","foundFirstRisingZeroCrossing","isFirstPointDrawn","i","currentY","nextY","isFirstRisingZeroCrossingPoint","drawPoint","stroke","lineTo","moveTo","fillStyle","fillRect","drawVerticalLines","drawHorizontalLines","drawVerticalLine","drawHorizontalLine","restartPlayer","componentStates","mergedComponentState","mergedStudentData","c","mergeStudentData","existingStudentData","newStudentData","concat","ComponentController","$inject"],"mappings":"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","file":"audioOscillatorController.js","sourcesContent":["'use strict';\n\nimport ComponentController from \"../componentController\";\n\nclass AudioOscillatorController extends ComponentController {\n  constructor($filter,\n      $mdDialog,\n      $q,\n      $rootScope,\n      $scope,\n      $timeout,\n      AnnotationService,\n      AudioOscillatorService,\n      ConfigService,\n      NodeService,\n      NotebookService,\n      ProjectService,\n      StudentAssetService,\n      StudentDataService,\n      UtilService) {\n    super($filter, $mdDialog, $rootScope, $scope,\n        AnnotationService, ConfigService, NodeService,\n        NotebookService, ProjectService, StudentAssetService,\n        StudentDataService, UtilService);\n    this.$q = $q;\n    this.$timeout = $timeout;\n    this.AudioOscillatorService = AudioOscillatorService;\n    this.frequenciesPlayed = [];\n    this.frequenciesPlayedSorted = [];\n    this.numberOfFrequenciesPlayed = 0;\n    this.minFrequencyPlayed = null;\n    this.maxFrequencyPlayed = null;\n    this.oscilloscopeId = 'oscilloscope' + this.componentId;\n\n    this.initializeDefaultSettings();\n    this.setButtonTextToPlay();\n\n    this.setParametersFromComponentContent();\n    const componentState = this.$scope.componentState;\n\n    if (this.isStudentMode()) {\n      if (this.UtilService.hasShowWorkConnectedComponent(this.componentContent)) {\n        this.handleConnectedComponents();\n      }  else if (this.AudioOscillatorService.componentStateHasStudentWork(componentState, this.componentContent)) {\n        this.setStudentWork(componentState);\n      } else if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n        this.handleConnectedComponents();\n      }\n    } else {\n      if (this.AudioOscillatorService.componentStateHasStudentWork(componentState, this.componentContent)) {\n        this.setStudentWork(componentState);\n      }\n    }\n\n    if (this.hasMaxSubmitCount() && !this.hasSubmitsLeft()) {\n      this.disableSubmitButton();\n    }\n\n    this.disableComponentIfNecessary();\n\n    if (!this.isGradingMode() && !this.isGradingRevisionMode()) {\n      this.initializeAudioContext();\n      this.drawOscilloscopeGridAfterTimeout();\n    }\n\n    this.initializeScopeGetComponentState(this.$scope, 'audioOscillatorController');\n    this.broadcastDoneRenderingComponent();\n  }\n\n  initializeDefaultSettings() {\n    this.isPlaying = false;\n    this.oscillatorType = 'sine';\n    this.frequency = 440;\n    this.oscillatorTypes = [];\n    this.oscilloscopeWidth = 800;\n    this.oscilloscopeHeight = 400;\n    this.gridCellSize = 50;\n    this.stopAfterGoodDraw = true;\n  }\n\n  initializeAudioContext() {\n    this.audioContext = new AudioContext();\n  }\n\n  /*\n   * Draw the oscilloscope grid after angular has finished rendering\n   * the view. we need to wait until after angular has set the\n   * canvas width and height to draw the grid because setting the\n   * dimensions of the canvas will erase the canvas.\n   */\n  drawOscilloscopeGridAfterTimeout() {\n    this.$timeout(() => {this.drawOscilloscopeGrid()}, 0);\n  }\n\n  cleanupBeforeExiting(event, args) {\n    if (!this.isGradingMode()) {\n      this.stop();\n      this.audioContext.close();\n    }\n  }\n\n  handleNodeSubmit() {\n    this.submit('nodeSubmitButton');\n  }\n\n  setParametersFromComponentContent() {\n    this.frequency = this.componentContent.startingFrequency;\n    this.oscillatorTypes = this.componentContent.oscillatorTypes;\n    if (this.componentContent.oscillatorTypes.length > 0) {\n      this.oscillatorType = this.componentContent.oscillatorTypes[0];\n    }\n    this.oscilloscopeWidth = this.componentContent.oscilloscopeWidth;\n    this.oscilloscopeHeight = this.componentContent.oscilloscopeHeight;\n    this.gridCellSize = this.componentContent.gridCellSize;\n    this.stopAfterGoodDraw = this.componentContent.stopAfterGoodDraw;\n  }\n\n  setStudentWork(componentState) {\n    const studentData = componentState.studentData;\n    if (studentData != null) {\n      this.frequenciesPlayed = studentData.frequenciesPlayed;\n      if (this.frequenciesPlayed.length > 0) {\n        this.frequency = this.frequenciesPlayed[this.frequenciesPlayed.length - 1];\n      }\n      this.frequenciesPlayedSorted = studentData.frequenciesPlayedSorted;\n      this.numberOfFrequenciesPlayed = studentData.numberOfFrequenciesPlayed;\n      this.minFrequencyPlayed = studentData.minFrequencyPlayed;\n      this.maxFrequencyPlayed = studentData.maxFrequencyPlayed;\n      this.submitCounter = studentData.submitCounter;\n      this.attachments = studentData.attachments;\n      this.processLatestStudentWork();\n    }\n  }\n\n  createComponentState(action) {\n    const deferred = this.$q.defer();\n    const componentState = this.NodeService.createNewComponentState();\n    componentState.isSubmit = this.isSubmit;\n    componentState.componentType = 'AudioOscillator';\n    componentState.nodeId = this.nodeId;\n    componentState.componentId = this.componentId;\n    componentState.studentData = {\n      frequenciesPlayed: this.frequenciesPlayed,\n      frequenciesPlayedSorted: this.frequenciesPlayedSorted,\n      numberOfFrequenciesPlayed: this.numberOfFrequenciesPlayed,\n      minFrequencyPlayed: this.minFrequencyPlayed,\n      maxFrequencyPlayed: this.maxFrequencyPlayed,\n      submitCounter: this.submitCounter\n    };\n    this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n    return deferred.promise;\n  }\n\n  togglePlay() {\n    if (this.isAudioPlaying()) {\n      this.stop();\n      this.setButtonTextToPlay();\n    } else {\n      this.play();\n      this.setButtonTextToStop();\n    }\n  }\n\n  isAudioPlaying() {\n    return this.isPlaying;\n  }\n\n  setButtonTextToPlay() {\n    this.playStopButtonText = this.$translate('audioOscillator.play');\n  }\n\n  setButtonTextToStop() {\n    this.playStopButtonText = this.$translate('audioOscillator.stop');\n  }\n\n  play() {\n    this.oscillator = this.audioContext.createOscillator();\n    this.oscillator.type = this.oscillatorType;\n    this.oscillator.frequency.value = this.frequency;\n    this.gain = this.audioContext.createGain();\n    this.gain.gain.value = 0.5;\n    this.destination = this.audioContext.destination;\n    this.analyser = this.audioContext.createAnalyser();\n    this.analyser.fftSize = 2048;\n    this.oscillator.connect(this.gain);\n    this.gain.connect(this.destination);\n    this.gain.connect(this.analyser);\n    this.oscillator.start();\n    this.goodDraw = false;\n    this.isPlaying = true;\n    this.drawOscilloscope();\n    this.addFrequencyPlayed(this.frequency);\n    this.studentDataChanged();\n  }\n\n  addFrequencyPlayed(frequency) {\n    this.frequenciesPlayed.push(frequency);\n    this.frequenciesPlayedSorted = this.UtilService.makeCopyOfJSONObject(this.frequenciesPlayed);\n    this.frequenciesPlayedSorted.sort((a, b) => (a - b));\n    this.numberOfFrequenciesPlayed = this.frequenciesPlayed.length;\n    this.minFrequencyPlayed = Math.min(...this.frequenciesPlayed);\n    this.maxFrequencyPlayed = Math.max(...this.frequenciesPlayed);\n  }\n\n  stop() {\n    if (this.oscillator != null) {\n      this.oscillator.stop();\n    }\n    this.isPlaying = false;\n  }\n\n  drawOscilloscope() {\n    if (!this.isPlaying) {\n      return;\n    }\n\n    this.drawOscilloscopeGrid();\n    this.startDrawingAudioSignalLine();\n    const firstRisingZeroCrossingIndex = this.drawOscilloscopePoints();\n\n    if (this.isFirstRisingZeroCrossingIndexCloseToZero(firstRisingZeroCrossingIndex)) {\n      /*\n       * we want the first rising zero crossing index to be close to zero\n       * so that the graph spans almost the whole width of the canvas.\n       * if the first rising zero crossing index was close to bufferLength\n       * size then we would see a cut off graph.\n       */\n      this.goodDraw = true;\n    }\n\n    if (this.isDrawAgain()) {\n      requestAnimationFrame(() => {\n        this.drawOscilloscope();\n      });\n    }\n  }\n\n  getTimeData() {\n    const bufferLength = this.analyser.frequencyBinCount;\n    const timeData = new Uint8Array(bufferLength);\n    this.analyser.getByteTimeDomainData(timeData);\n    return timeData;\n  }\n\n  startDrawingAudioSignalLine() {\n    const ctx = document.getElementById(this.oscilloscopeId).getContext('2d');\n    ctx.lineWidth = 2;\n    ctx.strokeStyle = 'rgb(0, 200, 0)';\n    ctx.beginPath();\n  }\n\n  getSliceWidth() {\n    const ctx = document.getElementById(this.oscilloscopeId).getContext('2d');\n    const bufferLength = this.analyser.frequencyBinCount;\n    const width = ctx.canvas.width;\n    return width * 1.0 / bufferLength;\n  }\n\n  drawOscilloscopePoints() {\n    const ctx = document.getElementById(this.oscilloscopeId).getContext('2d');\n    const height = ctx.canvas.height;\n    const timeData = this.getTimeData();\n    const sliceWidth = this.getSliceWidth();\n    let x = 0;\n    let v = 0;\n    let y = 0;\n\n    /*\n     * we want to start drawing the audio signal such that the first point\n     * is at 0,0 on the oscilloscope and the signal rises after that.\n     * e.g. pretend the ascii below is a sine wave\n     *  _       _\n     * / \\     / \\\n     * -------------------\n     *     \\_/     \\_/\n     */\n    let foundFirstRisingZeroCrossing = false;\n    let firstRisingZeroCrossingIndex = null;\n    let isFirstPointDrawn = false;\n\n    /*\n     * loop through all the points and draw the signal from the first\n     * rising zero crossing to the end of the buffer\n     */\n    for (let i = 0; i < timeData.length; i++) {\n      const currentY = timeData[i] - 128;\n      const nextY = timeData[i + 1] - 128;\n\n      if (this.isFirstRisingZeroCrossingPoint(foundFirstRisingZeroCrossing, currentY, nextY)) {\n        foundFirstRisingZeroCrossing = true;\n        firstRisingZeroCrossingIndex = i;\n      }\n\n      if (foundFirstRisingZeroCrossing) {\n        /*\n         * get the height of the point. we need to perform this\n         * subtraction of 128 to flip the value since canvas\n         * positioning is relative to the upper left corner being 0,0.\n         */\n        v = (128 - (timeData[i] - 128)) / 128.0;\n        y = v * height / 2;\n        this.drawPoint(ctx, isFirstPointDrawn, x, y);\n        if (!isFirstPointDrawn) {\n          isFirstPointDrawn = true;\n        }\n        x += sliceWidth;\n      }\n    }\n\n    ctx.stroke();\n\n    return firstRisingZeroCrossingIndex;\n  }\n\n  isFirstRisingZeroCrossingPoint(foundFirstRisingZeroCrossing, currentY, nextY) {\n    return !foundFirstRisingZeroCrossing && (currentY < 0 || currentY == 0) && nextY > 0;\n  }\n\n  drawPoint(ctx, isFirstPointDrawn, x, y) {\n    if (isFirstPointDrawn) {\n      ctx.lineTo(x, y);\n    } else {\n      ctx.moveTo(x, y);\n    }\n  }\n\n  isFirstRisingZeroCrossingIndexCloseToZero(firstRisingZeroCrossingIndex) {\n    return firstRisingZeroCrossingIndex > 0 && firstRisingZeroCrossingIndex < 10;\n  }\n\n  isDrawAgain() {\n    return !this.stopAfterGoodDraw || (this.stopAfterGoodDraw && !this.goodDraw);\n  }\n\n  drawOscilloscopeGrid() {\n    const ctx = document.getElementById(this.oscilloscopeId).getContext('2d');\n    const width = ctx.canvas.width;\n    const height = ctx.canvas.height;\n    const gridCellSize = this.gridCellSize;\n    ctx.fillStyle = 'white';\n    ctx.fillRect(0, 0, width, height);\n    ctx.lineWidth = 2;\n    ctx.strokeStyle = 'lightgrey';\n    ctx.beginPath();\n    this.drawVerticalLines(ctx, width, height, gridCellSize);\n    this.drawHorizontalLines(ctx, width, height, gridCellSize);\n    ctx.stroke();\n  }\n\n  drawVerticalLines(ctx, width, height, gridCellSize) {\n    let x = 0;\n    while (x < width) {\n      this.drawVerticalLine(ctx, x, height);\n      x += gridCellSize;\n    }\n  }\n\n  drawVerticalLine(ctx, x, height) {\n    ctx.moveTo(x, 0);\n    ctx.lineTo(x, height);\n  }\n\n  drawHorizontalLines(ctx, width, height, gridCellSize) {\n    // draw the horizontal lines above and including the middle line\n    let y = height / 2;\n    while (y >= 0) {\n      this.drawHorizontalLine(ctx, y, width);\n      y -= gridCellSize;\n    }\n\n    // draw the horizontal lines below the middle line\n    y = height / 2;\n    while (y < height) {\n      this.drawHorizontalLine(ctx, y, width);\n      y += gridCellSize;\n    }\n  }\n\n  drawHorizontalLine(ctx, y, width) {\n    ctx.moveTo(0, y);\n    ctx.lineTo(width, y);\n  }\n\n  oscillatorTypeChanged() {\n    this.drawOscilloscopeGrid();\n\n    if (this.isAudioPlaying()) {\n      this.restartPlayer();\n    }\n  }\n\n  frequencyChanged() {\n    this.drawOscilloscopeGrid();\n    if (this.isAudioPlaying()) {\n      this.restartPlayer();\n    }\n  }\n\n  restartPlayer() {\n    this.stop();\n    this.play();\n  }\n\n  /**\n   * Create a component state with the merged student responses.\n   * @param componentStates An array of component states.\n   * @return A component state with the merged student responses.\n   */\n  createMergedComponentState(componentStates) {\n    const mergedComponentState = this.NodeService.createNewComponentState();\n    if (componentStates != null) {\n      const mergedStudentData = {};\n      for (let c = 0; c < componentStates.length; c++) {\n        const componentState = componentStates[c];\n        if (componentState != null) {\n          let studentData = componentState.studentData;\n          if (studentData != null) {\n            this.mergeStudentData(mergedStudentData, studentData);\n          }\n        }\n      }\n      mergedComponentState.studentData = mergedStudentData;\n    }\n    return mergedComponentState;\n  }\n\n  /**\n   * Merge the values in the student data.\n   * @param existingStudentData The old student data we will merge into.\n   * @param newStudentData The new student data we will merge.\n   * @return The merged student data.\n   */\n  mergeStudentData(existingStudentData, newStudentData) {\n    if (existingStudentData.frequenciesPlayed == null) {\n      existingStudentData.frequenciesPlayed = newStudentData.frequenciesPlayed;\n    } else {\n      existingStudentData.frequenciesPlayed = existingStudentData.frequenciesPlayed.concat(newStudentData.frequenciesPlayed);\n    }\n\n    if (existingStudentData.frequenciesPlayedSorted == null) {\n      existingStudentData.frequenciesPlayedSorted = newStudentData.frequenciesPlayed;\n    } else {\n      let frequenciesPlayedSorted = this.UtilService.makeCopyOfJSONObject(existingStudentData.frequenciesPlayed);\n      frequenciesPlayedSorted.sort();\n      existingStudentData.frequenciesPlayedSorted = frequenciesPlayedSorted;\n    }\n\n    if (existingStudentData.numberOfFrequenciesPlayed == null) {\n      existingStudentData.numberOfFrequenciesPlayed = newStudentData.numberOfFrequenciesPlayed;\n    } else {\n      existingStudentData.numberOfFrequenciesPlayed = existingStudentData.numberOfFrequenciesPlayed + newStudentData.numberOfFrequenciesPlayed;\n    }\n\n    if (existingStudentData.minFrequencyPlayed == null) {\n      existingStudentData.minFrequencyPlayed = newStudentData.minFrequencyPlayed;\n    } else {\n      existingStudentData.minFrequencyPlayed = Math.min(existingStudentData.minFrequencyPlayed, newStudentData.minFrequencyPlayed);\n    }\n\n    if (existingStudentData.maxFrequencyPlayed == null) {\n      existingStudentData.maxFrequencyPlayed = newStudentData.maxFrequencyPlayed;\n    } else {\n      existingStudentData.maxFrequencyPlayed = Math.max(existingStudentData.maxFrequencyPlayed, newStudentData.maxFrequencyPlayed);\n    }\n    return existingStudentData;\n  }\n};\n\nAudioOscillatorController.$inject = [\n  '$filter',\n  '$mdDialog',\n  '$q',\n  '$rootScope',\n  '$scope',\n  '$timeout',\n  'AnnotationService',\n  'AudioOscillatorService',\n  'ConfigService',\n  'NodeService',\n  'NotebookService',\n  'ProjectService',\n  'StudentAssetService',\n  'StudentDataService',\n  'UtilService'\n];\n\nexport default AudioOscillatorController;\n"]}