{"version":3,"sources":["componentController.es6"],"names":["ComponentController","$filter","$mdDialog","$rootScope","$scope","AnnotationService","ConfigService","NodeService","NotebookService","ProjectService","StudentAssetService","StudentDataService","UtilService","$translate","nodeId","componentContent","componentId","id","componentType","type","idToOrder","mode","authoringComponentContent","isShowPreviousWork","showAdvancedAuthoring","showJSONAuthoring","isDisabled","isDirty","parentStudentWorkIds","attachments","isSubmitDirty","isSubmit","saveMessage","text","time","isStudentAttachmentEnabled","isPromptVisible","isSaveButtonVisible","isSubmitButtonVisible","isSubmitButtonDisabled","submitCounter","isSnipButtonVisible","workgroupId","teacherWorkgroupId","showAddToNotebookButton","isStudentMode","showSaveButton","showSubmitButton","isGradingMode","isGradingRevisionMode","isOnlyShowWorkMode","latestAnnotations","getLatestComponentAnnotations","isAuthoringMode","authoringConstructor","registerListeners","registerComponentWithParentNode","$on","event","args","annotation","isEventTargetThisComponent","handleNodeSubmit","cleanupBeforeExiting","registerStudentWorkSavedToServerListener","scope","childControllerName","getComponentState","deferred","$q","defer","childController","hasDirtyWorkToSendToParent","action","getDirtyWorkToSendToParentAction","createComponentState","then","componentState","resolve","promise","summernoteRubricId","summernoteRubricHTML","rubric","insertAssetString","InsertAssetButton","createInsertAssetButton","summernoteRubricOptions","toolbar","height","disableDragAndDrop","buttons","insertAssetButton","registerAuthoringListeners","updateAdvancedAuthoringView","$watch","newValue","oldValue","handleAuthoringComponentContentChanged","hideJSONValidMessage","assetSelected","injectAssetPaths","fileName","assetsDirectoryPath","getProjectAssetsDirectoryPath","summernoteId","target","$","summernote","fullAssetPath","videoElement","document","createElement","controls","innerHTML","$parent","nodeController","registerComponentController","$broadcast","angular","bind","studentWork","setIsDirty","$emit","getIsDirty","clientSaveTime","convertToClientTimestamp","serverSaveTime","setSubmittedMessage","lockIfNecessary","setIsSubmitDirty","isAutoSave","setAutoSavedMessage","setSavedMessage","prompt","submit","submitTriggeredBy","getIsSubmitDirty","isPerformSubmit","hasMaxSubmitCount","numberOfSubmitsLeft","getNumberOfSubmitsLeft","hasSubmitMessage","confirmSubmit","performSubmit","setIsSubmit","incrementSubmitCounter","hasSubmitsLeft","disableSubmitButton","emitComponentSubmitTriggered","isLockAfterSubmit","componentStates","getComponentStatesByNodeIdAndComponentId","isWorkSubmitted","lockAfterSubmit","clearSaveText","latestComponentState","getLatestComponentStateByNodeIdAndComponentId","emitComponentSubmitDirty","setSaveText","message","getNodeIds","getNodePositionAndTitleByNodeId","getComponentsByNodeId","isApplicationNode","connectedComponents","connectedComponent","push","makeCopyOfJSONObject","length","setStudentWork","createMergedComponentState","handleConnectedComponentsPostProcess","studentDataChanged","isSpaceExists","insertMode","requester","visibleSpace","studentWorkId","getStudentWorkById","setParentStudentWorkIdToCurrentStudentWork","isNotebookEnabled","show","setShowSubmitButtonValue","authoringViewComponentChanged","newConnectedComponent","authoringAutomaticallySetConnectedComponentComponentIdIfPossible","components","numberOfAllowedComponents","allowedComponent","component","isConnectedComponentTypeAllowed","index","answer","confirm","splice","connectedComponentType","getComponentByNodeIdAndComponentId","allowedConnectedComponentTypes","a","allowedConnectedComponentType","tags","tag","indexOfTagToDelete","html","removeAbsoluteAssetPaths","insertWISELinks","nodeAuthoringController","authoringViewNodeChanged","authoringComponentContentJSONString","toJson","editedComponentContent","fromJson","replaceComponent","e","showSaveErrorAdvancedAuthoring","jsonStringChanged","advancedAuthoringViewComponentChanged","getMaxSubmitCount","maxSubmitCount","attachment","indexOf","studentAsset","copyAssetForReference","copiedAsset","studentAssetId","iconURL","maxScore","$inject"],"mappings":"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","file":"componentController.js","sourcesContent":["class ComponentController {\n  constructor(\n      $filter,\n      $mdDialog,\n      $rootScope,\n      $scope,\n      AnnotationService,\n      ConfigService,\n      NodeService,\n      NotebookService,\n      ProjectService,\n      StudentAssetService,\n      StudentDataService,\n      UtilService) {\n    this.$filter = $filter;\n    this.$mdDialog = $mdDialog;\n    this.$rootScope = $rootScope;\n    this.$scope = $scope;\n    this.AnnotationService = AnnotationService;\n    this.ConfigService = ConfigService;\n    this.NodeService = NodeService;\n    this.NotebookService = NotebookService;\n    this.ProjectService = ProjectService;\n    this.StudentAssetService = StudentAssetService;\n    this.StudentDataService = StudentDataService;\n    this.UtilService = UtilService;\n    this.$translate = this.$filter('translate');\n\n    this.nodeId = this.$scope.nodeId;\n    this.componentContent = this.$scope.componentContent;\n    this.componentId = this.componentContent.id;\n    this.componentType = this.componentContent.type;\n    this.idToOrder = this.ProjectService.idToOrder;\n    this.mode = this.$scope.mode;\n    this.authoringComponentContent = this.$scope.authoringComponentContent;\n    this.isShowPreviousWork = false;\n    this.showAdvancedAuthoring = false;\n    this.showJSONAuthoring = false;\n    this.isDisabled = false;\n    this.isDirty = false;\n    this.parentStudentWorkIds = null;\n    this.attachments = [];\n\n    // whether the student work has changed since last submit\n    this.isSubmitDirty = false;\n\n    // whether the student work is for a submit\n    this.isSubmit = false;\n\n    this.saveMessage = {\n      text: '',\n      time: ''\n    };\n\n    this.isStudentAttachmentEnabled = this.componentContent.isStudentAttachmentEnabled;\n\n    this.isPromptVisible = true;\n    this.isSaveButtonVisible = false;\n    this.isSubmitButtonVisible = false;\n    this.isSubmitButtonDisabled = false;\n    this.submitCounter = 0;\n\n    this.isSnipButtonVisible = true;\n\n    this.workgroupId = this.$scope.workgroupId;\n    this.teacherWorkgroupId = this.$scope.teacherWorkgroupId;\n\n    this.showAddToNotebookButton =\n      this.componentContent.showAddToNotebookButton == null ? true : this.componentContent.showAddToNotebookButton;\n\n    if (this.isStudentMode()) {\n      this.isPromptVisible = true;\n      this.isSaveButtonVisible = this.componentContent.showSaveButton;\n      this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n    } else if (this.isGradingMode()) {\n      this.isPromptVisible = false;\n      this.isSaveButtonVisible = false;\n      this.isSubmitButtonVisible = false;\n      this.isDisabled = true;\n    } else if (this.isGradingRevisionMode()) {\n      this.isPromptVisible = false;\n      this.isSaveButtonVisible = false;\n      this.isSubmitButtonVisible = false;\n      this.isDisabled = true;\n    } else if (this.isOnlyShowWorkMode()) {\n      this.isPromptVisible = false;\n      this.isSaveButtonVisible = false;\n      this.isSubmitButtonVisible = false;\n      this.isDisabled = true;\n    }\n\n    if (this.isStudentMode() || this.isGradingMode() || this.isGradingRevisionMode()) {\n      this.latestAnnotations = this.AnnotationService.getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n    }\n\n    if (this.isGradingMode() || this.isGradingRevisionMode() || this.isOnlyShowWorkMode()) {\n      this.showAddToNotebookButton = false;\n    } else if (this.isAuthoringMode()) {\n      if (this.authoringComponentContent.showAddToNotebookButton == null) {\n        this.authoringComponentContent.showAddToNotebookButton = true;\n      }\n      this.authoringConstructor();\n    }\n\n    this.registerListeners();\n    this.registerComponentWithParentNode();\n  }\n\n  isStudentMode() {\n    return this.mode === 'student';\n  }\n\n  isAuthoringMode() {\n    return this.mode === 'authoring';\n  }\n\n  isGradingMode() {\n    return this.mode === 'grading';\n  }\n\n  isGradingRevisionMode() {\n    return this.mode === 'gradingRevision';\n  }\n\n  isOnlyShowWorkMode() {\n    return this.mode === 'onlyShowWork';\n  }\n\n  registerListeners() {\n    this.$scope.$on('annotationSavedToServer', (event, args) => {\n      const annotation = args.annotation;\n      if (this.isEventTargetThisComponent(annotation)) {\n        this.latestAnnotations = this.AnnotationService\n          .getLatestComponentAnnotations(this.nodeId, this.componentId, this.workgroupId);\n      }\n    });\n\n    this.$scope.$on('nodeSubmitClicked', (event, args) => {\n      if (this.nodeId === args.nodeId) {\n        this.handleNodeSubmit();\n      }\n    });\n\n    /**\n     * Listen for the 'exitNode' event which is fired when the student\n     * exits the parent node. This will perform any necessary cleanup\n     * when the student exits the parent node.\n     */\n    this.$scope.$on('exitNode', (event, args) => {\n      this.cleanupBeforeExiting(event, args);\n    });\n\n    this.registerStudentWorkSavedToServerListener();\n  }\n\n  initializeScopeGetComponentState(scope, childControllerName) {\n    scope.getComponentState = (isSubmit) => {\n      const deferred = this.$q.defer();\n      const childController = scope[childControllerName];\n      if (this.hasDirtyWorkToSendToParent(childController, isSubmit)) {\n        const action = this.getDirtyWorkToSendToParentAction(childController, isSubmit);\n        childController.createComponentState(action).then((componentState) => {\n          deferred.resolve(componentState);\n        });\n      } else {\n        deferred.resolve();\n      }\n      return deferred.promise;\n    };\n  }\n\n  hasDirtyWorkToSendToParent(childController, isSubmit) {\n    return (isSubmit && childController.isSubmitDirty) || childController.isDirty;\n  }\n\n  getDirtyWorkToSendToParentAction(childController, isSubmit) {\n    let action = 'change';\n    if (isSubmit && childController.isSubmitDirty) {\n      action = 'submit';\n    } else if (childController.isDirty) {\n      action = 'save';\n    }\n    return action;\n  }\n\n  authoringConstructor() {\n    this.isPromptVisible = true;\n    this.isSaveButtonVisible = this.componentContent.showSaveButton;\n    this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n\n    this.summernoteRubricId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n    this.summernoteRubricHTML = this.componentContent.rubric;\n\n    const insertAssetString = this.$translate('INSERT_ASSET');\n    const InsertAssetButton = this.UtilService.createInsertAssetButton(this, null, this.nodeId, this.componentId, 'rubric', insertAssetString);\n    this.summernoteRubricOptions = {\n      toolbar: [\n        ['style', ['style']],\n        ['font', ['bold', 'underline', 'clear']],\n        ['fontname', ['fontname']],\n        ['fontsize', ['fontsize']],\n        ['color', ['color']],\n        ['para', ['ul', 'ol', 'paragraph']],\n        ['table', ['table']],\n        ['insert', ['link', 'video']],\n        ['view', ['fullscreen', 'codeview', 'help']],\n        ['customButton', ['insertAssetButton']]\n      ],\n      height: 300,\n      disableDragAndDrop: true,\n      buttons: {\n        insertAssetButton: InsertAssetButton\n      }\n    };\n\n    this.registerAuthoringListeners();\n    this.updateAdvancedAuthoringView();\n  }\n\n  registerAuthoringListeners() {\n    this.$scope.$watch(\n        () => {\n          return this.authoringComponentContent\n        },\n        (newValue, oldValue) => {\n          this.handleAuthoringComponentContentChanged(newValue, oldValue);\n        },\n        true\n    );\n\n    this.$scope.$on('componentAdvancedButtonClicked', (event, args) => {\n      if (this.componentId === args.componentId) {\n        this.showAdvancedAuthoring = !this.showAdvancedAuthoring;\n        this.UtilService.hideJSONValidMessage();\n      }\n    });\n\n    this.$scope.$on('assetSelected', (event, args) => {\n      this.assetSelected(event, args);\n    });\n  }\n\n  handleAuthoringComponentContentChanged(newValue, oldValue) {\n    this.componentContent = this.ProjectService.injectAssetPaths(newValue);\n    this.isSaveButtonVisible = this.componentContent.showSaveButton;\n    this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n    this.latestAnnotations = null;\n    this.isDirty = false;\n    this.isSubmitDirty = false;\n    this.submitCounter = 0;\n  }\n\n  getFullAssetPath(fileName) {\n    const assetsDirectoryPath = this.ConfigService.getProjectAssetsDirectoryPath();\n    return assetsDirectoryPath + '/' + fileName;\n  }\n\n  getSummernoteId(args) {\n    let summernoteId = '';\n    if (args.target == 'prompt') {\n      summernoteId = 'summernotePrompt_' + this.nodeId + '_' + this.componentId;\n    } else if (args.target == 'rubric') {\n      summernoteId = 'summernoteRubric_' + this.nodeId + '_' + this.componentId;\n    }\n    return summernoteId;\n  }\n\n  restoreSummernoteCursorPosition(summernoteId) {\n    $('#' + summernoteId).summernote('editor.restoreRange');\n    $('#' + summernoteId).summernote('editor.focus');\n  }\n\n  insertImageIntoSummernote(summernoteId, fullAssetPath, fileName) {\n    $('#' + summernoteId).summernote('insertImage', fullAssetPath, fileName);\n  }\n\n  insertVideoIntoSummernote(summernoteId, fullAssetPath) {\n    var videoElement = document.createElement('video');\n    videoElement.controls = 'true';\n    videoElement.innerHTML = '<source ng-src=\"' + fullAssetPath + '\" type=\"video/mp4\">';\n    $('#' + summernoteId).summernote('insertNode', videoElement);\n  }\n\n  assetSelected(event, args) {\n\n  }\n\n  registerComponentWithParentNode() {\n    if (this.$scope.$parent.nodeController != null) {\n      this.$scope.$parent.nodeController.registerComponentController(this.$scope, this.componentContent);\n    }\n  }\n\n  cleanupBeforeExiting() {\n\n  }\n\n  broadcastDoneRenderingComponent() {\n    this.$rootScope.$broadcast('doneRenderingComponent', { nodeId: this.nodeId, componentId: this.componentId });\n  }\n\n  registerStudentWorkSavedToServerListener() {\n    this.$scope.$on('studentWorkSavedToServer', angular.bind(this, function(event, args) {\n      const componentState = args.studentWork;\n      if (componentState && this.nodeId === componentState.nodeId\n          && this.componentId === componentState.componentId) {\n        this.setIsDirty(false);\n        this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: this.getIsDirty()});\n        const clientSaveTime = this.ConfigService.convertToClientTimestamp(componentState.serverSaveTime);\n        if (componentState.isSubmit) {\n          this.setSubmittedMessage(clientSaveTime);\n          this.lockIfNecessary();\n          this.setIsSubmitDirty(false);\n          this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: this.isSubmitDirty});\n        } else if (componentState.isAutoSave) {\n          this.setAutoSavedMessage(clientSaveTime);\n        } else {\n          this.setSavedMessage(clientSaveTime);\n        }\n      }\n    }));\n  }\n\n  handleNodeSubmit() {\n    this.isSubmit = true;\n  }\n\n  getPrompt() {\n    return this.componentContent.prompt;\n  }\n\n  saveButtonClicked() {\n    this.isSubmit = false;\n\n    // tell the parent node to save\n    this.$scope.$emit('componentSaveTriggered',\n        {nodeId: this.nodeId, componentId: this.componentId});\n  }\n\n  submitButtonClicked() {\n    this.submit('componentSubmitButton');\n  }\n\n  /**\n   * A submit was triggered by the component submit button or node submit button.\n   * @param {string} submitTriggeredBy What triggered the submit.\n   * e.g. 'componentSubmitButton' or 'nodeSubmitButton'\n   */\n  submit(submitTriggeredBy) {\n    if (this.getIsSubmitDirty()) {\n      let isPerformSubmit = true;\n\n      if (this.hasMaxSubmitCount()) {\n        const numberOfSubmitsLeft = this.getNumberOfSubmitsLeft();\n\n        if (this.hasSubmitMessage()) {\n          isPerformSubmit = this.confirmSubmit(numberOfSubmitsLeft);\n        } else {\n          if (numberOfSubmitsLeft <= 0) {\n            isPerformSubmit = false;\n          }\n        }\n      }\n\n      if (isPerformSubmit) {\n        this.performSubmit(submitTriggeredBy);\n      } else {\n        this.setIsSubmit(false);\n      }\n    }\n  }\n\n  disableSubmitButton() {\n    this.isSubmitButtonDisabled = true;\n  }\n\n  performSubmit(submitTriggeredBy) {\n    this.setIsSubmit(true);\n    this.incrementSubmitCounter();\n\n    if (!this.hasSubmitsLeft()) {\n      this.disableSubmitButton();\n    }\n\n    if (this.isAuthoringMode()) {\n      /*\n       * We are in authoring mode so we will set values appropriately\n       * here because the 'componentSubmitTriggered' event won't\n       * work in authoring mode.\n       */\n      this.setIsDirty(false);\n      this.setIsSubmitDirty(false);\n      this.createComponentState('submit');\n    } else {\n      if (submitTriggeredBy == null || submitTriggeredBy === 'componentSubmitButton') {\n        this.emitComponentSubmitTriggered();\n      }\n    }\n  }\n\n  hasSubmitMessage() {\n    return false;\n  }\n\n  incrementSubmitCounter() {\n    this.submitCounter++;\n  }\n\n  emitComponentSubmitTriggered() {\n    this.$scope.$emit('componentSubmitTriggered', {nodeId: this.nodeId, componentId: this.componentId});\n  }\n\n  disableComponentIfNecessary() {\n    if (this.isLockAfterSubmit()) {\n      const componentStates = this.StudentDataService\n          .getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n      if (this.NodeService.isWorkSubmitted(componentStates)) {\n        this.isDisabled = true;\n      }\n    }\n  }\n\n  lockIfNecessary() {\n    if (this.isLockAfterSubmit()) {\n      this.isDisabled = true;\n    }\n  }\n\n  isLockAfterSubmit() {\n    return this.componentContent.lockAfterSubmit;\n  }\n\n  studentDataChanged() {\n    this.setIsDirty(true);\n    this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: true});\n\n    this.setIsSubmitDirty(true);\n    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: true});\n    this.clearSaveText();\n\n    /*\n     * the student work in this component has changed so we will tell\n     * the parent node that the student data will need to be saved.\n     * this will also notify connected parts that this component's student\n     * data has changed.\n     */\n    const action = 'change';\n\n    // create a component state populated with the student data\n    this.createComponentState(action).then((componentState) => {\n      this.$scope.$emit('componentStudentDataChanged', {nodeId: this.nodeId, componentId: this.componentId, componentState: componentState});\n    });\n  }\n\n  processLatestStudentWork() {\n    const latestComponentState =\n        this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n\n    if (latestComponentState) {\n      const serverSaveTime = latestComponentState.serverSaveTime;\n      const clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n      if (latestComponentState.isSubmit) {\n        this.setIsSubmitDirty(false);\n        this.emitComponentSubmitDirty(false);\n        this.setSubmittedMessage(clientSaveTime);\n      } else {\n        this.setIsSubmitDirty(true);\n        this.emitComponentSubmitDirty(true);\n        this.setSavedMessage(clientSaveTime);\n      }\n    }\n  }\n\n  setIsSubmitDirty(isDirty) {\n    this.isSubmitDirty = isDirty;\n  }\n\n  getIsSubmitDirty() {\n    return this.isSubmitDirty;\n  }\n\n  emitComponentDirty(isDirty) {\n    this.$scope.$emit('componentDirty', {componentId: this.componentId, isDirty: isDirty});\n  }\n\n  emitComponentSubmitDirty(isDirty) {\n    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: isDirty});\n  }\n\n  setSavedMessage(time) {\n    this.setSaveText(this.$translate('SAVED'), time);\n  }\n\n  setAutoSavedMessage(time) {\n    this.setSaveText(this.$translate('AUTO_SAVED'), time);\n  }\n\n  setSubmittedMessage(time) {\n    this.setSaveText(this.$translate('SUBMITTED'), time);\n  }\n\n  setSaveText(message, time) {\n    this.saveMessage.text = message;\n    this.saveMessage.time = time;\n  }\n\n  clearSaveText() {\n    this.setSaveText('', null);\n  }\n\n  /**\n   * Get all the step node ids in the project\n   * @returns {array} an array of step node id strings\n   */\n  getStepNodeIds() {\n    return this.ProjectService.getNodeIds();\n  }\n\n  /**\n   * Get the step number and title for a node\n   * @param {string} get the step number and title for this node\n   * @returns {string} the step number and title example \"1.5: Read Information\"\n   */\n  getNodePositionAndTitleByNodeId(nodeId) {\n    return this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n  }\n\n  /**\n   * Get the components in a step\n   * @param {string} id of the step\n   * @returns {array} an array of component objects\n   */\n  getComponentsByNodeId(nodeId) {\n    return this.ProjectService.getComponentsByNodeId(nodeId);\n  }\n\n  /**\n   * Check if a node is a step node\n   * @param {string} nodeId the node id to check\n   * @returns {boolean} whether the node is a step node\n   */\n  isApplicationNode(nodeId) {\n    return this.ProjectService.isApplicationNode(nodeId);\n  }\n\n\n  /**\n   * Create a new component state populated with the student data\n   * @param action the action that is triggering creating of this component state\n   * e.g. 'submit', 'save', 'change'\n   * @return a promise that will return a component state\n   */\n  createComponentState(action) {\n\n  }\n\n  /**\n   * Perform any additional processing that is required before returning the\n   * component state\n   * Note: this function must call deferred.resolve() otherwise student work\n   * will not be saved\n   * @param deferred a deferred object\n   * @param componentState the component state\n   * @param action the action that we are creating the component state for\n   * e.g. 'submit', 'save', 'change'\n   */\n  createComponentStateAdditionalProcessing(deferred, componentState, action) {\n    /*\n     * we don't need to perform any additional processing so we can resolve\n     * the promise immediately\n     */\n    deferred.resolve(componentState);\n  }\n\n  /**\n   * Import any work needed from connected components\n   */\n  handleConnectedComponents() {\n    const connectedComponents = this.componentContent.connectedComponents;\n    if (connectedComponents != null) {\n      const componentStates = [];\n      for (let connectedComponent of connectedComponents) {\n        const componentState =\n            this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(connectedComponent.nodeId, connectedComponent.componentId);\n        if (componentState != null) {\n          componentStates.push(this.UtilService.makeCopyOfJSONObject(componentState));\n        }\n        if (connectedComponent.type == 'showWork') {\n          this.isDisabled = true;\n        }\n      }\n      if (componentStates.length > 0) {\n        this.setStudentWork(this.createMergedComponentState(componentStates));\n        this.handleConnectedComponentsPostProcess();\n        this.studentDataChanged();\n      }\n    }\n  }\n\n  createMergedComponentState(componentStates) {\n    return componentStates[0];\n  }\n\n  handleConnectedComponentsPostProcess() {\n    // overridden by children\n  }\n\n  showCopyPublicNotebookItemButton() {\n    return this.ProjectService.isSpaceExists(\"public\");\n  }\n\n  copyPublicNotebookItemButtonClicked(event) {\n    this.$rootScope.$broadcast('openNotebook',\n      { nodeId: this.nodeId, componentId: this.componentId, insertMode: true, requester: this.nodeId + '-' + this.componentId, visibleSpace: \"public\" });\n  }\n\n  importWorkByStudentWorkId(studentWorkId) {\n    this.StudentDataService.getStudentWorkById(studentWorkId).then((componentState) => {\n      if (componentState != null) {\n        this.setStudentWork(componentState);\n        this.setParentStudentWorkIdToCurrentStudentWork(studentWorkId);\n        this.$rootScope.$broadcast('closeNotebook');\n      }\n    });\n  }\n\n  setParentStudentWorkIdToCurrentStudentWork(studentWorkId) {\n    this.parentStudentWorkIds = [studentWorkId];\n  }\n\n  isNotebookEnabled() {\n    return this.NotebookService.isNotebookEnabled();\n  }\n\n  isAddToNotebookEnabled() {\n    return this.isNotebookEnabled() && this.showAddToNotebookButton;\n  }\n\n  /**\n   * Set the show submit button value\n   * @param show whether to show the submit button\n   */\n  setShowSubmitButtonValue(show) {\n\n    if (show == null || show == false) {\n      // we are hiding the submit button\n      this.authoringComponentContent.showSaveButton = false;\n      this.authoringComponentContent.showSubmitButton = false;\n    } else {\n      // we are showing the submit button\n      this.authoringComponentContent.showSaveButton = true;\n      this.authoringComponentContent.showSubmitButton = true;\n    }\n\n    /*\n     * notify the parent node that this component is changing its\n     * showSubmitButton value so that it can show save buttons on the\n     * step or sibling components accordingly\n     */\n    this.$scope.$emit('componentShowSubmitButtonValueChanged', {nodeId: this.nodeId, componentId: this.componentId, showSubmitButton: show});\n  }\n\n  /**\n   * The showSubmitButton value has changed\n   */\n  showSubmitButtonValueChanged() {\n\n    /*\n     * perform additional processing for when we change the showSubmitButton\n     * value\n     */\n    this.setShowSubmitButtonValue(this.authoringComponentContent.showSubmitButton);\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Add a connected component\n   */\n  authoringAddConnectedComponent() {\n\n    /*\n     * create the new connected component object that will contain a\n     * node id and component id\n     */\n    var newConnectedComponent = {};\n    newConnectedComponent.nodeId = this.nodeId;\n    newConnectedComponent.componentId = null;\n    newConnectedComponent.type = null;\n    this.authoringAutomaticallySetConnectedComponentComponentIdIfPossible(newConnectedComponent);\n\n    // initialize the array of connected components if it does not exist yet\n    if (this.authoringComponentContent.connectedComponents == null) {\n      this.authoringComponentContent.connectedComponents = [];\n    }\n\n    // add the connected component\n    this.authoringComponentContent.connectedComponents.push(newConnectedComponent);\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Automatically set the component id for the connected component if there\n   * is only one viable option.\n   * @param connectedComponent the connected component object we are authoring\n   */\n  authoringAutomaticallySetConnectedComponentComponentIdIfPossible(connectedComponent) {\n    if (connectedComponent != null) {\n      let components = this.getComponentsByNodeId(connectedComponent.nodeId);\n      if (components != null) {\n        let numberOfAllowedComponents = 0;\n        let allowedComponent = null;\n        for (let component of components) {\n          if (component != null) {\n            if (this.isConnectedComponentTypeAllowed(component.type) &&\n              component.id != this.componentId) {\n              // we have found a viable component we can connect to\n              numberOfAllowedComponents += 1;\n              allowedComponent = component;\n            }\n          }\n        }\n\n        if (numberOfAllowedComponents == 1) {\n          /*\n           * there is only one viable component to connect to so we\n           * will use it\n           */\n          connectedComponent.componentId = allowedComponent.id;\n          connectedComponent.type = 'importWork';\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete a connected component\n   * @param index the index of the component to delete\n   */\n  authoringDeleteConnectedComponent(index) {\n\n    // ask the author if they are sure they want to delete the connected component\n    let answer = confirm(this.$translate('areYouSureYouWantToDeleteThisConnectedComponent'));\n\n    if (answer) {\n      // the author answered yes to delete\n\n      if (this.authoringComponentContent.connectedComponents != null) {\n        this.authoringComponentContent.connectedComponents.splice(index, 1);\n      }\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Get the connected component type\n   * @param connectedComponent get the component type of this connected component\n   * @return the connected component type\n   */\n  authoringGetConnectedComponentType(connectedComponent) {\n\n    var connectedComponentType = null;\n\n    if (connectedComponent != null) {\n\n      // get the node id and component id of the connected component\n      var nodeId = connectedComponent.nodeId;\n      var componentId = connectedComponent.componentId;\n\n      // get the component\n      var component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n      if (component != null) {\n        // get the component type\n        connectedComponentType = component.type;\n      }\n    }\n\n    return connectedComponentType;\n  }\n\n  /**\n   * The connected component node id has changed\n   * @param connectedComponent the connected component that has changed\n   */\n  authoringConnectedComponentNodeIdChanged(connectedComponent) {\n    if (connectedComponent != null) {\n      connectedComponent.componentId = null;\n      connectedComponent.type = null;\n      this.authoringAutomaticallySetConnectedComponentComponentIdIfPossible(connectedComponent);\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The connected component component id has changed\n   * @param connectedComponent the connected component that has changed\n   */\n  authoringConnectedComponentComponentIdChanged(connectedComponent) {\n\n    if (connectedComponent != null) {\n\n      // default the type to import work\n      connectedComponent.type = 'importWork';\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The connected component type has changed\n   * @param connectedComponent the connected component that changed\n   */\n  authoringConnectedComponentTypeChanged(connectedComponent) {\n\n    if (connectedComponent != null) {\n\n      if (connectedComponent.type == 'importWork') {\n        /*\n         * the type has changed to import work\n         */\n      } else if (connectedComponent.type == 'showWork') {\n        /*\n         * the type has changed to show work\n         */\n      }\n\n      // the authoring component content has changed so we will save the project\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Check if we are allowed to connect to this component type\n   * @param componentType the component type\n   * @return whether we can connect to the component type\n   */\n  isConnectedComponentTypeAllowed(componentType) {\n\n    if (componentType != null) {\n\n      let allowedConnectedComponentTypes = this.allowedConnectedComponentTypes;\n\n      // loop through the allowed connected component types\n      for (let a = 0; a < allowedConnectedComponentTypes.length; a++) {\n        let allowedConnectedComponentType = allowedConnectedComponentTypes[a];\n\n        if (allowedConnectedComponentType != null) {\n          if (componentType == allowedConnectedComponentType.type) {\n            // the component type is allowed\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  addTag() {\n    if (this.authoringComponentContent.tags == null) {\n      this.authoringComponentContent.tags = [];\n    }\n    this.authoringComponentContent.tags.push('');\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * Move a tag up\n   * @param index the index of the tag to move up\n   */\n  moveTagUp(index) {\n    if (index > 0) {\n      // the index is not at the top so we can move it up\n      let tag = this.authoringComponentContent.tags[index];\n      this.authoringComponentContent.tags.splice(index, 1);\n      this.authoringComponentContent.tags.splice(index - 1, 0, tag);\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * Move a tag down\n   * @param index the index of the tag to move down\n   */\n  moveTagDown(index) {\n    if (index < this.authoringComponentContent.tags.length - 1) {\n      // the index is not at the bottom so we can move it down\n      let tag = this.authoringComponentContent.tags[index];\n      this.authoringComponentContent.tags.splice(index, 1);\n      this.authoringComponentContent.tags.splice(index + 1, 0, tag);\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  deleteTag(indexOfTagToDelete) {\n    if (confirm(this.$translate('areYouSureYouWantToDeleteThisTag'))) {\n      this.authoringComponentContent.tags.splice(indexOfTagToDelete, 1);\n      this.authoringViewComponentChanged();\n    }\n  }\n\n  /**\n   * The author has changed the rubric\n   */\n  summernoteRubricHTMLChanged() {\n\n    // get the summernote rubric html\n    let html = this.summernoteRubricHTML;\n\n    /*\n     * remove the absolute asset paths\n     * e.g.\n     * <img src='https://wise.berkeley.edu/curriculum/3/assets/sun.png'/>\n     * will be changed to\n     * <img src='sun.png'/>\n     */\n    html = this.ConfigService.removeAbsoluteAssetPaths(html);\n\n    /*\n     * replace <a> and <button> elements with <wiselink> elements when\n     * applicable\n     */\n    html = this.UtilService.insertWISELinks(html);\n\n    // update the component rubric\n    this.authoringComponentContent.rubric = html;\n\n    // the authoring component content has changed so we will save the project\n    this.authoringViewComponentChanged();\n  }\n\n  /**\n   * The component has changed in the regular authoring view so we will save the project\n   */\n  authoringViewComponentChanged() {\n\n    // update the JSON string in the advanced authoring view textarea\n    this.updateAdvancedAuthoringView();\n\n    /*\n     * notify the parent node that the content has changed which will save\n     * the project to the server\n     */\n    this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n  };\n\n  /**\n   * Update the component JSON string that will be displayed in the advanced authoring view textarea\n   */\n  updateAdvancedAuthoringView() {\n    this.authoringComponentContentJSONString = angular.toJson(this.authoringComponentContent, 4);\n  };\n\n  /**\n   * The component has changed in the advanced authoring view so we will update\n   * the component and save the project.\n   */\n  advancedAuthoringViewComponentChanged() {\n\n    try {\n      /*\n       * create a new component by converting the JSON string in the advanced\n       * authoring view into a JSON object\n       */\n      var editedComponentContent = angular.fromJson(this.authoringComponentContentJSONString);\n\n      // replace the component in the project\n      this.ProjectService.replaceComponent(this.nodeId, this.componentId, editedComponentContent);\n\n      // set the new component into the controller\n      this.componentContent = editedComponentContent;\n\n      /*\n       * notify the parent node that the content has changed which will save\n       * the project to the server\n       */\n      this.$scope.$parent.nodeAuthoringController.authoringViewNodeChanged();\n    } catch(e) {\n      this.$scope.$parent.nodeAuthoringController.showSaveErrorAdvancedAuthoring();\n    }\n  };\n\n  /**\n   * The show JSON button was clicked to show or hide the JSON authoring\n   */\n  showJSONButtonClicked() {\n    // toggle the JSON authoring textarea\n    this.showJSONAuthoring = !this.showJSONAuthoring;\n\n    if (this.jsonStringChanged && !this.showJSONAuthoring) {\n      /*\n       * the author has changed the JSON and has just closed the JSON\n       * authoring view so we will save the component\n       */\n      this.advancedAuthoringViewComponentChanged();\n\n      // scroll to the top of the component\n      this.$rootScope.$broadcast('scrollToComponent', { componentId: this.componentId });\n\n      this.jsonStringChanged = false;\n    }\n  }\n\n  /**\n   * The author has changed the JSON manually in the advanced view\n   */\n  authoringJSONChanged() {\n    this.jsonStringChanged = true;\n  }\n\n  isEventTargetThisComponent(args) {\n    return this.nodeId == args.nodeId && this.componentId == args.componentId;\n  }\n\n  hasMaxSubmitCount() {\n    return this.getMaxSubmitCount() != null;\n  }\n\n  getMaxSubmitCount() {\n    return this.componentContent.maxSubmitCount;\n  }\n\n  getNumberOfSubmitsLeft() {\n    return this.getMaxSubmitCount() - this.submitCounter;\n  }\n\n  hasSubmitsLeft() {\n    return this.getNumberOfSubmitsLeft() > 0;\n  }\n\n  setIsSubmit(isSubmit) {\n    this.isSubmit = isSubmit;\n  }\n\n  getIsSubmit() {\n    return this.isSubmit;\n  }\n\n  setIsDirty(isDirty) {\n    this.isDirty = isDirty;\n  }\n\n  getIsDirty() {\n    return this.isDirty;\n  }\n\n  removeAttachment(attachment) {\n    if (this.attachments.indexOf(attachment) != -1) {\n      this.attachments.splice(this.attachments.indexOf(attachment), 1);\n      this.studentDataChanged();\n    }\n  }\n\n  attachStudentAsset(studentAsset) {\n    if (studentAsset != null) {\n      this.StudentAssetService.copyAssetForReference(studentAsset).then((copiedAsset) => {\n        if (copiedAsset != null) {\n          const attachment = {\n            studentAssetId: copiedAsset.id,\n            iconURL: copiedAsset.iconURL\n          };\n\n          this.attachments.push(attachment);\n          this.studentDataChanged();\n        }\n      });\n    }\n  }\n\n  hasMaxScore() {\n    return this.componentContent.maxScore != null && this.componentContent.maxScore != '';\n  }\n\n  getMaxScore() {\n    return this.componentContent.maxScore;\n  }\n}\n\nComponentController.$inject = [];\n\nexport default ComponentController;\n"]}