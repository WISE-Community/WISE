{"version":3,"sources":["utilService.es6"],"names":["UtilService","$filter","$injector","$mdDialog","$q","$rootScope","$timeout","componentTypeToLabel","$translate","length","CHARS","key","a","Math","floor","random","str","isNaN","Number","jsonObject","jsonObjectString","angular","toJson","fromJson","img_b64","blob","dataURItoBlob","now","Date","getTime","filename","encodeURIComponent","pngFile","File","lastModified","type","dataURI","byteString","split","indexOf","atob","unescape","mimeString","ia","Uint8Array","i","charCodeAt","Blob","imageElement","imageObject","canvas","document","createElement","width","naturalWidth","height","naturalHeight","ctx","getContext","drawImage","dataURL","toDataURL","getImageObjectFromBase64String","fileName","imageExtensionsRegEx","RegExp","lowerCaseFileName","toLowerCase","matchResult","match","videoExtensionsRegEx","html","insertWISELinkAnchors","insertWISELinkButtons","wiseLinkRegEx","wiseLinkRegExMatchResult","exec","anchorHTML","anchorText","nodeId","getWISELinkNodeId","componentIdAttr","componentId","getWISELinkComponentId","wiselinkHtml","replace","buttonHTML","buttonText","nodeIdRegEx","nodeIdRegExResult","componentIdRegEx","componentIdRegExResult","typeRegEx","typeRegExResult","linkTextRegEx","linkTextRegExResult","replaceWISELinksHelper","regex","wiseLinkHTML","componentHTML","getWISELinkType","linkText","getWISELinkLinkText","newElement","controller","projectId","target","tooltip","thisRootScope","InsertAssetButton","context","ui","$","summernote","button","contents","click","invoke","params","isPopup","$broadcast","render","InsertWISELinkButton","text","subjectString","searchString","position","isFinite","lastIndex","lastIndexOf","object1","object2","serverSaveTime","milliseconds","date","toDateString","toLocaleTimeString","componentType","label","componentService","get","getComponentTypeLabel","array1","array2","array1Copy","makeCopyOfJSONObject","sort","array2Copy","componentContent","connectedComponents","connectedComponent","fields","field","when","arrayToCheck","element","maxWidth","newLineStr","done","res","found","testWhite","charAt","slice","join","x","white","test","trim","events","event","hasXConnectedComponent","connectedComponentType","id","duration","originalBackgroundColor","css","componentState","deferred","defer","show","template","locals","DialogController","$scope","closeDialog","hide","$inject","doneRenderingComponentListener","$on","args","generateImageFromComponentStateHelper","then","image","cancel","destroyDoneRenderingComponentListenerTimeout","resolve","promise","generateImageFromRenderedComponentState","setIsJSONValidMessage","isJSONValid","objects","index","object","splice","summernoteId","fullAssetPath","videoElement","controls","innerHTML","color","opacity","values","parseFloat","r","parseInt","g","b","toString","periodId1","periodId2","isAllPeriods","periodId","Array","prototype","last"],"mappings":"AAAA;;;;;;;;;;;;;IAEMA,W;;;AACJ,uBACIC,OADJ,EAEIC,SAFJ,EAGIC,SAHJ,EAIIC,EAJJ,EAKIC,UALJ,EAMIC,QANJ,EAMc;AAAA;;AACZ,SAAKL,OAAL,GAAeA,OAAf;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKC,EAAL,GAAUA,EAAV;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,oBAAL,GAA4B,EAA5B;AACA,SAAKC,UAAL,GAAkB,KAAKP,OAAL,CAAa,WAAb,CAAlB;AACD;AAED;;;;;;;;;gCAKYQ,M,EAAQ;AAClB,WAAKC,KAAL,GAAa,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,EAAa,GAAb,EAAiB,GAAjB,EAAqB,GAArB,EAAyB,GAAzB,EAA6B,GAA7B,EAAiC,GAAjC,EAAqC,GAArC,EAAyC,GAAzC,EAA6C,GAA7C,EAAiD,GAAjD,EACT,GADS,EACL,GADK,EACD,GADC,EACG,GADH,EACO,GADP,EACY,GADZ,EACgB,GADhB,EACoB,GADpB,EACwB,GADxB,EAC4B,GAD5B,EACgC,GADhC,EACoC,GADpC,EACwC,GADxC,EAET,GAFS,EAEL,GAFK,EAED,GAFC,EAEG,GAFH,EAEO,GAFP,EAEW,GAFX,EAEe,GAFf,EAEmB,GAFnB,EAEuB,GAFvB,EAE2B,GAF3B,CAAb;;AAIA,UAAI,CAACD,MAAL,EAAa;AACXA,QAAAA,MAAM,GAAG,EAAT;AACD;;AAED,UAAIE,GAAG,GAAG,EAAV;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,MAApB,EAA4BG,CAAC,EAA7B,EAAiC;AAC/BD,QAAAA,GAAG,IAAI,KAAKD,KAAL,CAAWG,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiB,KAAKL,KAAL,CAAWD,MAAX,GAAoB,CAArC,CAAX,CAAX,CAAP;AACD;;AAED,aAAOE,GAAP;AACD;;;;AAED;;;;;;0CAMsBK,G,EAAK;AACzB,UAAIA,GAAG,IAAI,IAAP,IAAeA,GAAG,IAAI,EAAtB,IAA4B,CAACC,KAAK,CAACC,MAAM,CAACF,GAAD,CAAP,CAAtC,EAAqD;AACnD,eAAOE,MAAM,CAACF,GAAD,CAAb;AACD;;AACD,aAAOA,GAAP;AACD;;;;AAED;;;;;yCAKqBG,U,EAAY;AAC/B,UAAIA,UAAU,IAAI,IAAlB,EAAwB;AACtB,YAAMC,gBAAgB,GAAGC,OAAO,CAACC,MAAR,CAAeH,UAAf,CAAzB;AACA,eAAOE,OAAO,CAACE,QAAR,CAAiBH,gBAAjB,CAAP;AACD;;AACD,aAAO,IAAP;AACD;;;;AAED;;;;;mDAK+BI,O,EAAS;AACtC;AACA,UAAMC,IAAI,GAAG,KAAKC,aAAL,CAAmBF,OAAnB,CAAb;AAEA,UAAMG,GAAG,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAAZ;AACA,UAAMC,QAAQ,GAAGC,kBAAkB,CAAC,aAAaJ,GAAb,GAAmB,MAApB,CAAnC;AACA,UAAMK,OAAO,GAAG,IAAIC,IAAJ,CAAS,CAACR,IAAD,CAAT,EAAiBK,QAAjB,EAA2B;AACzCI,QAAAA,YAAY,EAAEP,GAD2B;AACtB;AACnBQ,QAAAA,IAAI,EAAE,WAFmC,CAEvB;;AAFuB,OAA3B,CAAhB;AAIA,aAAOH,OAAP;AACD;AAED;;;;;;;;kCAKcI,O,EAAS;AACrB,UAAIC,UAAJ;AACA,UAAID,OAAO,CAACE,KAAR,CAAc,GAAd,EAAmB,CAAnB,EAAsBC,OAAtB,CAA8B,QAA9B,KAA2C,CAA/C,EACEF,UAAU,GAAGG,IAAI,CAACJ,OAAO,CAACE,KAAR,CAAc,GAAd,EAAmB,CAAnB,CAAD,CAAjB,CADF,KAGED,UAAU,GAAGI,QAAQ,CAACL,OAAO,CAACE,KAAR,CAAc,GAAd,EAAmB,CAAnB,CAAD,CAArB,CALmB,CAOrB;;AACA,UAAMI,UAAU,GAAGN,OAAO,CAACE,KAAR,CAAc,GAAd,EAAmB,CAAnB,EAAsBA,KAAtB,CAA4B,GAA5B,EAAiC,CAAjC,EAAoCA,KAApC,CAA0C,GAA1C,EAA+C,CAA/C,CAAnB,CARqB,CAUrB;;AACA,UAAMK,EAAE,GAAG,IAAIC,UAAJ,CAAeP,UAAU,CAAC5B,MAA1B,CAAX;;AACA,WAAK,IAAIoC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,UAAU,CAAC5B,MAA/B,EAAuCoC,CAAC,EAAxC,EAA4C;AAC1CF,QAAAA,EAAE,CAACE,CAAD,CAAF,GAAQR,UAAU,CAACS,UAAX,CAAsBD,CAAtB,CAAR;AACD;;AACD,aAAO,IAAIE,IAAJ,CAAS,CAACJ,EAAD,CAAT,EAAe;AAACR,QAAAA,IAAI,EAACO;AAAN,OAAf,CAAP;AACD;;;;AAED;;;;;mDAK+BM,Y,EAAc;AAC3C,UAAIC,WAAW,GAAG,IAAlB;;AACA,UAAID,YAAY,IAAI,IAApB,EAA0B;AACxB;AACA,YAAME,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAf,CAFwB,CAIxB;;AACAF,QAAAA,MAAM,CAACG,KAAP,GAAeL,YAAY,CAACM,YAA5B;AACAJ,QAAAA,MAAM,CAACK,MAAP,GAAgBP,YAAY,CAACQ,aAA7B,CANwB,CAQxB;;AACA,YAAMC,GAAG,GAAGP,MAAM,CAACQ,UAAP,CAAkB,IAAlB,CAAZ;AACAD,QAAAA,GAAG,CAACE,SAAJ,CAAcX,YAAd,EAA4B,CAA5B,EAA+B,CAA/B;AAEA,YAAMY,OAAO,GAAGV,MAAM,CAACW,SAAP,CAAiB,WAAjB,CAAhB;AACAZ,QAAAA,WAAW,GAAG,KAAKa,8BAAL,CAAoCF,OAApC,CAAd;AACD;;AACD,aAAOX,WAAP;AACD;AAED;;;;;;;;4BAKQc,Q,EAAU;AAChB,UAAIA,QAAQ,IAAI,IAAhB,EAAsB;AACpB,YAAMC,oBAAoB,GACtB,IAAIC,MAAJ,CAAW,qCAAX,CADJ;AAEA,YAAMC,iBAAiB,GAAGH,QAAQ,CAACI,WAAT,EAA1B;AACA,YAAMC,WAAW,GAAGF,iBAAiB,CAACG,KAAlB,CAAwBL,oBAAxB,CAApB;;AAEA,YAAII,WAAW,IAAI,IAAnB,EAAyB;AACvB,iBAAO,IAAP;AACD;AACF;;AACD,aAAO,KAAP;AACD;AAED;;;;;;;;4BAKQL,Q,EAAU;AAChB,UAAIA,QAAQ,IAAI,IAAhB,EAAsB;AACpB,YAAMO,oBAAoB,GACtB,IAAIL,MAAJ,CAAW,4CAAX,CADJ;AAEA,YAAMC,iBAAiB,GAAGH,QAAQ,CAACI,WAAT,EAA1B;AACA,YAAMC,WAAW,GAAGF,iBAAiB,CAACG,KAAlB,CAAwBC,oBAAxB,CAApB;;AAEA,YAAIF,WAAW,IAAI,IAAnB,EAAyB;AACvB,iBAAO,IAAP;AACD;AACF;;AACD,aAAO,KAAP;AACD;AAED;;;;;;;;;oCAMgBG,I,EAAM;AACpBA,MAAAA,IAAI,GAAG,KAAKC,qBAAL,CAA2BD,IAA3B,CAAP;AACAA,MAAAA,IAAI,GAAG,KAAKE,qBAAL,CAA2BF,IAA3B,CAAP;AACA,aAAOA,IAAP;AACD;AAED;;;;;;;;;;0CAOsBA,I,EAAM;AAC1B,UAAIG,aAAa,GAAG,IAAIT,MAAJ,CAAW,oCAAX,CAApB;AACA,UAAIU,wBAAwB,GAAGD,aAAa,CAACE,IAAd,CAAmBL,IAAnB,CAA/B,CAF0B,CAI1B;;AACA,aAAOI,wBAAwB,IAAI,IAAnC,EAAyC;AACvC;AACA,YAAIE,UAAU,GAAGF,wBAAwB,CAAC,CAAD,CAAzC,CAFuC,CAIvC;;AACA,YAAIG,UAAU,GAAGH,wBAAwB,CAAC,CAAD,CAAzC,CALuC,CAOvC;;AACA,YAAII,MAAM,GAAG,KAAKC,iBAAL,CAAuBH,UAAvB,CAAb;;AAEA,YAAIE,MAAM,IAAI,IAAd,EAAoB;AAClBA,UAAAA,MAAM,GAAG,EAAT;AACD;;AAED,YAAIE,eAAe,GAAG,EAAtB;AACA,YAAIC,WAAW,GAAG,KAAKC,sBAAL,CAA4BN,UAA5B,CAAlB;;AACA,YAAIK,WAAW,IAAI,IAAnB,EAAyB;AACvBD,UAAAA,eAAe,GAAG,mBAAmBC,WAAnB,GAAiC,GAAnD;AACD,SAlBsC,CAoBvC;;;AACA,YAAIE,YAAY,GAAG,sCAAsCN,UAAtC,GAAmD,aAAnD,GAAmEC,MAAnE,GAA4E,IAA5E,GAAmFE,eAAnF,GAAqG,IAAxH,CArBuC,CAuBvC;;AACAV,QAAAA,IAAI,GAAGA,IAAI,CAACc,OAAL,CAAaV,wBAAwB,CAAC,CAAD,CAArC,EAA0CS,YAA1C,CAAP,CAxBuC,CA0BvC;;AACAT,QAAAA,wBAAwB,GAAGD,aAAa,CAACE,IAAd,CAAmBL,IAAnB,CAA3B;AACD;;AACD,aAAOA,IAAP;AACD;AAED;;;;;;;;;;0CAOsBA,I,EAAM;AAC1B,UAAMG,aAAa,GAAG,IAAIT,MAAJ,CAAW,8CAAX,CAAtB;AACA,UAAIU,wBAAwB,GAAGD,aAAa,CAACE,IAAd,CAAmBL,IAAnB,CAA/B,CAF0B,CAI1B;;AACA,aAAOI,wBAAwB,IAAI,IAAnC,EAAyC;AACvC;AACA,YAAMW,UAAU,GAAGX,wBAAwB,CAAC,CAAD,CAA3C,CAFuC,CAIvC;;AACA,YAAMY,UAAU,GAAGZ,wBAAwB,CAAC,CAAD,CAA3C,CALuC,CAOvC;;AACA,YAAII,MAAM,GAAG,KAAKC,iBAAL,CAAuBM,UAAvB,CAAb;;AAEA,YAAIP,MAAM,IAAI,IAAd,EAAoB;AAClBA,UAAAA,MAAM,GAAG,EAAT;AACD;;AAED,YAAIE,eAAe,GAAG,EAAtB;AACA,YAAIC,WAAW,GAAG,KAAKC,sBAAL,CAA4BG,UAA5B,CAAlB;;AACA,YAAIJ,WAAW,IAAI,IAAnB,EAAyB;AACvBD,UAAAA,eAAe,GAAG,mBAAmBC,WAAnB,GAAiC,GAAnD;AACD,SAlBsC,CAoBvC;;;AACA,YAAME,YAAY,GAAG,wCAAwCG,UAAxC,GAAqD,aAArD,GAAqER,MAArE,GAA8E,IAA9E,GAAqFE,eAArF,GAAuG,IAA5H,CArBuC,CAuBvC;;AACAV,QAAAA,IAAI,GAAGA,IAAI,CAACc,OAAL,CAAaV,wBAAwB,CAAC,CAAD,CAArC,EAA0CS,YAA1C,CAAP,CAxBuC,CA0BvC;;AACAT,QAAAA,wBAAwB,GAAGD,aAAa,CAACE,IAAd,CAAmBL,IAAnB,CAA3B;AACD;;AACD,aAAOA,IAAP;AACD;AAED;;;;;;;;;;;sCAQkBA,I,EAAM;AACtB,UAAIA,IAAI,IAAI,IAAZ,EAAkB;AAChB,YAAIiB,WAAW,GAAG,IAAIvB,MAAJ,CAAW,wBAAX,EAAqC,GAArC,CAAlB;AACA,YAAIwB,iBAAiB,GAAGD,WAAW,CAACZ,IAAZ,CAAiBL,IAAjB,CAAxB;;AACA,YAAIkB,iBAAiB,IAAI,IAAzB,EAA+B;AAC7B,iBAAOA,iBAAiB,CAAC,CAAD,CAAxB;AACD;AACF;;AACD,aAAO,IAAP;AACD;AAED;;;;;;;;;;;2CAQuBlB,I,EAAM;AAC3B,UAAIA,IAAI,IAAI,IAAZ,EAAkB;AAChB,YAAImB,gBAAgB,GAAG,IAAIzB,MAAJ,CAAW,6BAAX,EAA0C,GAA1C,CAAvB;AACA,YAAI0B,sBAAsB,GAAGD,gBAAgB,CAACd,IAAjB,CAAsBL,IAAtB,CAA7B;;AACA,YAAIoB,sBAAsB,IAAI,IAA9B,EAAoC;AAClC,iBAAOA,sBAAsB,CAAC,CAAD,CAA7B;AACD;AACF;;AACD,aAAO,IAAP;AACD;AAED;;;;;;;;;;;oCAQgBpB,I,EAAM;AACpB,UAAIA,IAAI,IAAI,IAAZ,EAAkB;AAChB,YAAIqB,SAAS,GAAG,IAAI3B,MAAJ,CAAW,qBAAX,EAAkC,GAAlC,CAAhB;AACA,YAAI4B,eAAe,GAAGD,SAAS,CAAChB,IAAV,CAAeL,IAAf,CAAtB;;AACA,YAAIsB,eAAe,IAAI,IAAvB,EAA6B;AAC3B,iBAAOA,eAAe,CAAC,CAAD,CAAtB;AACD;AACF;;AACD,aAAO,IAAP;AACD;AAED;;;;;;;;;;wCAOoBtB,I,EAAM;AACxB,UAAIA,IAAI,IAAI,IAAZ,EAAkB;AAChB,YAAIuB,aAAa,GAAG,IAAI7B,MAAJ,CAAW,0BAAX,EAAuC,GAAvC,CAApB;AACA,YAAI8B,mBAAmB,GAAGD,aAAa,CAAClB,IAAd,CAAmBL,IAAnB,CAA1B;;AACA,YAAIwB,mBAAmB,IAAI,IAA3B,EAAiC;AAC/B,iBAAOA,mBAAmB,CAAC,CAAD,CAA1B;AACD;AACF;;AACD,aAAO,IAAP;AACD;AAED;;;;;;;;qCAKiBxB,I,EAAM;AACrBA,MAAAA,IAAI,GAAG,KAAKyB,sBAAL,CAA4BzB,IAA5B,EAAkC,iBAAlC,CAAP;AACAA,MAAAA,IAAI,GAAG,KAAKyB,sBAAL,CAA4BzB,IAA5B,EAAkC,8BAAlC,CAAP;AACA,aAAOA,IAAP;AACD;AAED;;;;;;;;;;2CAOuBA,I,EAAM0B,K,EAAO;AAClC,UAAIvB,aAAa,GAAG,IAAIT,MAAJ,CAAWgC,KAAX,CAApB;AACA,UAAItB,wBAAwB,GAAGD,aAAa,CAACE,IAAd,CAAmBL,IAAnB,CAA/B,CAFkC,CAIlC;;AACA,aAAOI,wBAAwB,IAAI,IAAnC,EAAyC;AACvC;;;;AAIA,YAAIuB,YAAY,GAAGvB,wBAAwB,CAAC,CAAD,CAA3C,CALuC,CAOvC;;AACA,YAAII,MAAM,GAAG,KAAKC,iBAAL,CAAuBkB,YAAvB,CAAb;AACA,YAAIhB,WAAW,GAAG,KAAKC,sBAAL,CAA4Be,YAA5B,CAAlB;AACA,YAAIC,aAAa,GAAG,EAApB;;AACA,YAAIjB,WAAW,IAAI,IAAf,IAAuBA,WAAW,IAAI,EAA1C,EAA8C;AAC5CiB,UAAAA,aAAa,GAAG,mBAAmBjB,WAAnB,GAAiC,GAAjD;AACD;;AACD,YAAI/C,IAAI,GAAG,KAAKiE,eAAL,CAAqBF,YAArB,CAAX;AACA,YAAIG,QAAQ,GAAG,KAAKC,mBAAL,CAAyBJ,YAAzB,CAAf;AAEA,YAAIK,UAAU,GAAG,IAAjB;;AAEA,YAAIpE,IAAI,IAAI,MAAZ,EAAoB;AAClB;AACAoE,UAAAA,UAAU,GAAG,iCAAiCxB,MAAjC,GAA0C,IAA1C,GAAiDoB,aAAjD,GAAiE,GAAjE,GAAuEE,QAAvE,GAAkF,MAA/F;AACD,SAHD,MAGO,IAAIlE,IAAI,IAAI,QAAZ,EAAsB;AAC3B;AACAoE,UAAAA,UAAU,GAAG,sCAAsCxB,MAAtC,GAA+C,IAA/C,GAAsDoB,aAAtD,GAAsE,GAAtE,GAA4EE,QAA5E,GAAuF,WAApG;AACD,SAHM,MAGA;AACL;AACAE,UAAAA,UAAU,GAAG,iCAAiCxB,MAAjC,GAA0C,IAA1C,GAAiDoB,aAAjD,GAAiE,GAAjE,GAAuEE,QAAvE,GAAkF,MAA/F;AACD;;AAED,YAAIE,UAAU,IAAI,IAAlB,EAAwB;AACtB;AACAhC,UAAAA,IAAI,GAAGA,IAAI,CAACc,OAAL,CAAaa,YAAb,EAA2BK,UAA3B,CAAP;AACD,SAjCsC,CAmCvC;;;AACA5B,QAAAA,wBAAwB,GAAGD,aAAa,CAACE,IAAd,CAAmBL,IAAnB,CAA3B;AACD;;AACD,aAAOA,IAAP;AACD;AAED;;;;;;;;;;;;;;;4CAYwBiC,U,EAAYC,S,EAAW1B,M,EAAQG,W,EAAawB,M,EAAQC,O,EAAS;AACnF,UAAMC,aAAa,GAAG,KAAKvG,UAA3B;;AAEA,UAAMwG,iBAAiB,GAAG,SAApBA,iBAAoB,CAASC,OAAT,EAAkB;AAC1C,YAAMC,EAAE,GAAGC,CAAC,CAACC,UAAF,CAAaF,EAAxB;AAEA,YAAMG,MAAM,GAAGH,EAAE,CAACG,MAAH,CAAU;AACvBC,UAAAA,QAAQ,EAAE,mCADa;AAEvBR,UAAAA,OAAO,EAAEA,OAFc;AAGvBS,UAAAA,KAAK,EAAE,iBAAY;AACjB;AACAN,YAAAA,OAAO,CAACO,MAAR,CAAe,kBAAf,EAFiB,CAIjB;;AACA,gBAAMC,MAAM,GAAG,EAAf;AACAA,YAAAA,MAAM,CAACC,OAAP,GAAiB,IAAjB;;AAEA,gBAAId,SAAS,IAAI,IAAjB,EAAuB;AACrBa,cAAAA,MAAM,CAACb,SAAP,GAAmBA,SAAnB;AACD;;AAED,gBAAI1B,MAAM,IAAI,IAAd,EAAoB;AAClBuC,cAAAA,MAAM,CAACvC,MAAP,GAAgBA,MAAhB;AACD;;AAED,gBAAIG,WAAW,IAAI,IAAnB,EAAyB;AACvBoC,cAAAA,MAAM,CAACpC,WAAP,GAAqBA,WAArB;AACD;;AAEDoC,YAAAA,MAAM,CAACZ,MAAP,GAAgBA,MAAhB,CApBiB,CAsBjB;;AACAE,YAAAA,aAAa,CAACY,UAAd,CAAyB,kBAAzB,EAA6CF,MAA7C;AACD;AA3BsB,SAAV,CAAf;AA6BA,eAAOJ,MAAM,CAACO,MAAP,EAAP,CAhC0C,CAgChB;AAC3B,OAjCD;;AAkCA,aAAOZ,iBAAP;AACD;AAED;;;;;;;;;;;;;;;+CAY2BL,U,EAAYC,S,EAAW1B,M,EAAQG,W,EAAawB,M,EAAQC,O,EAAS;AACtF,UAAMC,aAAa,GAAG,KAAKvG,UAA3B;;AAEA,UAAMqH,oBAAoB,GAAG,SAAvBA,oBAAuB,CAASZ,OAAT,EAAkB;AAC7C,YAAMC,EAAE,GAAGC,CAAC,CAACC,UAAF,CAAaF,EAAxB;AAEA,YAAMG,MAAM,GAAGH,EAAE,CAACG,MAAH,CAAU;AACvBC,UAAAA,QAAQ,EAAE,gCADa;AAEvBR,UAAAA,OAAO,EAAEA,OAFc;AAGvBS,UAAAA,KAAK,EAAE,iBAAY;AACjB;AACAN,YAAAA,OAAO,CAACO,MAAR,CAAe,kBAAf,EAFiB,CAIjB;;AACA,gBAAMC,MAAM,GAAG,EAAf;;AAEA,gBAAIb,SAAS,IAAI,IAAjB,EAAuB;AACrBa,cAAAA,MAAM,CAACb,SAAP,GAAmBA,SAAnB;AACD;;AAED,gBAAI1B,MAAM,IAAI,IAAd,EAAoB;AAClBuC,cAAAA,MAAM,CAACvC,MAAP,GAAgBA,MAAhB;AACD;;AAED,gBAAIG,WAAW,IAAI,IAAnB,EAAyB;AACvBoC,cAAAA,MAAM,CAACpC,WAAP,GAAqBA,WAArB;AACD;;AAEDoC,YAAAA,MAAM,CAACZ,MAAP,GAAgBA,MAAhB,CAnBiB,CAqBjB;;AACAE,YAAAA,aAAa,CAACY,UAAd,CAAyB,qBAAzB,EAAgDF,MAAhD;AACD;AA1BsB,SAAV,CAAf;AA4BA,eAAOJ,MAAM,CAACO,MAAP,EAAP,CA/B6C,CA+BnB;AAC3B,OAhCD;;AAiCA,aAAOC,oBAAP;AACD;AAED;;;;;;;;mCAKenD,I,EAAM;AACnB,UAAIoD,IAAI,GAAG,EAAX;;AACA,UAAIpD,IAAI,IAAI,IAAZ,EAAkB;AAChB;AACAoD,QAAAA,IAAI,GAAGpD,IAAI,CAACc,OAAL,CAAa,iBAAb,EAAgC,GAAhC,CAAP;AACAsC,QAAAA,IAAI,GAAGA,IAAI,CAACtC,OAAL,CAAa,KAAb,EAAoB,GAApB,CAAP;AACAsC,QAAAA,IAAI,GAAGA,IAAI,CAACtC,OAAL,CAAa,KAAb,EAAoB,GAApB,CAAP;AACD;;AACD,aAAOsC,IAAP;AACD;AAED;;;;;;;;;;6BAOSC,a,EAAeC,Y,EAAcC,Q,EAAU;AAC9C,UAAI,OAAOA,QAAP,KAAoB,QAApB,IAAgC,CAACC,QAAQ,CAACD,QAAD,CAAzC,IAAuDjH,IAAI,CAACC,KAAL,CAAWgH,QAAX,MAAyBA,QAAhF,IAA4FA,QAAQ,GAAGF,aAAa,CAACnH,MAAzH,EAAiI;AAC/HqH,QAAAA,QAAQ,GAAGF,aAAa,CAACnH,MAAzB;AACD;;AACDqH,MAAAA,QAAQ,IAAID,YAAY,CAACpH,MAAzB;AACA,UAAMuH,SAAS,GAAGJ,aAAa,CAACK,WAAd,CAA0BJ,YAA1B,EAAwCC,QAAxC,CAAlB;AACA,aAAOE,SAAS,KAAK,CAAC,CAAf,IAAoBA,SAAS,KAAKF,QAAzC;AACD;AAED;;;;;;;;;;;yCAQqBI,O,EAASC,O,EAAS;AACrC,UAAID,OAAO,CAACE,cAAR,GAAyBD,OAAO,CAACC,cAArC,EAAqD;AACnD,eAAO,CAAC,CAAR;AACD,OAFD,MAEO,IAAIF,OAAO,CAACE,cAAR,GAAyBD,OAAO,CAACC,cAArC,EAAqD;AAC1D,eAAO,CAAP;AACD,OAFM,MAEA;AACL,eAAO,CAAP;AACD;AACF;AAED;;;;;;;;;;2DAOuCC,Y,EAAc;AACnD,UAAMC,IAAI,GAAG,IAAI1G,IAAJ,CAASyG,YAAT,CAAb;;AACA,UAAIC,IAAI,IAAI,IAAZ,EAAkB;AAChB,eAAOA,IAAI,CAACC,YAAL,KAAsB,GAAtB,GAA4BD,IAAI,CAACE,kBAAL,EAAnC;AACD;;AACD,aAAO,EAAP;AACD;AAED;;;;;;;;0CAKsBC,a,EAAe;AACnC;;;;AAIA,UAAIC,KAAK,GAAG,KAAKnI,oBAAL,CAA0BkI,aAA1B,CAAZ;;AAEA,UAAIC,KAAK,IAAI,IAAb,EAAmB;AACjB,YAAIC,gBAAgB,GAAG,KAAKzI,SAAL,CAAe0I,GAAf,CAAmBH,aAAa,GAAG,SAAnC,CAAvB;;AACA,YAAIE,gBAAgB,IAAI,IAApB,IAA4BA,gBAAgB,CAACE,qBAAjB,IAA0C,IAA1E,EAAgF;AAC9EH,UAAAA,KAAK,GAAGC,gBAAgB,CAACE,qBAAjB,EAAR;AACA,eAAKtI,oBAAL,CAA0BkI,aAA1B,IAA2CC,KAA3C;AACD;AACF;;AAED,UAAIA,KAAK,IAAI,IAAb,EAAmB;AACjB;;;;AAIAA,QAAAA,KAAK,GAAGD,aAAR;AACD;;AACD,aAAOC,KAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;4CAgBwBI,M,EAAQC,M,EAAQ;AACtC,UAAID,MAAM,IAAI,IAAV,IAAkBC,MAAM,IAAI,IAAhC,EAAsC;AACpC,YAAMC,UAAU,GAAG,KAAKC,oBAAL,CAA0BH,MAA1B,CAAnB;AACAE,QAAAA,UAAU,CAACE,IAAX;AAEA,YAAMC,UAAU,GAAG,KAAKF,oBAAL,CAA0BF,MAA1B,CAAnB;AACAI,QAAAA,UAAU,CAACD,IAAX;;AAEA,YAAI7H,OAAO,CAACC,MAAR,CAAe0H,UAAf,KAA8B3H,OAAO,CAACC,MAAR,CAAe6H,UAAf,CAAlC,EAA8D;AAC5D,iBAAO,IAAP;AACD;AACF;;AACD,aAAO,KAAP;AACD;AAED;;;;;;;;0CAKsBC,gB,EAAkB;AACtC,UAAIA,gBAAgB,IAAI,IAAxB,EAA8B;AAC5B,YAAMC,mBAAmB,GAAGD,gBAAgB,CAACC,mBAA7C;;AACA,YAAIA,mBAAmB,IAAI,IAAvB,IAA+BA,mBAAmB,CAAC5I,MAApB,GAA6B,CAAhE,EAAmE;AACjE,iBAAO,IAAP;AACD;AACF;;AACD,aAAO,KAAP;AACD;AAED;;;;;;;;qDAKiC2I,gB,EAAkB;AACjD,UAAIA,gBAAgB,IAAI,IAAxB,EAA8B;AAC5B,YAAMC,mBAAmB,GAAGD,gBAAgB,CAACC,mBAA7C;;AACA,YAAIA,mBAAmB,IAAI,IAAvB,IAA+BA,mBAAmB,CAAC5I,MAApB,GAA6B,CAAhE,EAAmE;AAAA;AAAA;AAAA;;AAAA;AACjE,iCAA+B4I,mBAA/B,8HAAoD;AAAA,kBAA3CC,kBAA2C;;AAClD,kBAAIA,kBAAkB,CAACC,MAAnB,IAA6B,IAAjC,EAAuC;AAAA;AAAA;AAAA;;AAAA;AACrC,wCAAkBD,kBAAkB,CAACC,MAArC,mIAA6C;AAAA,wBAApCC,KAAoC;;AAC3C,wBAAIA,KAAK,CAACC,IAAN,IAAc,QAAlB,EAA4B;AAC1B,6BAAO,IAAP;AACD;AACF;AALoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMtC;AACF;AATgE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUlE;AACF;;AACD,aAAO,KAAP;AACD;AAED;;;;;;;;kDAK8BL,gB,EAAkB;AAC9C,UAAIA,gBAAgB,IAAI,IAAxB,EAA8B;AAC5B,YAAMC,mBAAmB,GAAGD,gBAAgB,CAACC,mBAA7C;;AACA,YAAIA,mBAAmB,IAAI,IAA3B,EAAiC;AAAA;AAAA;AAAA;;AAAA;AAC/B,kCAA+BA,mBAA/B,mIAAoD;AAAA,kBAA3CC,kBAA2C;;AAClD,kBAAIA,kBAAkB,IAAI,IAA1B,EAAgC;AAC9B,oBAAIA,kBAAkB,CAACnH,IAAnB,IAA2B,UAA/B,EAA2C;AACzC,yBAAO,IAAP;AACD;AACF;AACF;AAP8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQhC;AACF;;AACD,aAAO,KAAP;AACD;AAED;;;;;;;;oDAKgCiH,gB,EAAkB;AAChD,UAAIA,gBAAgB,IAAI,IAAxB,EAA8B;AAC5B,YAAMC,mBAAmB,GAAGD,gBAAgB,CAACC,mBAA7C;;AACA,YAAIA,mBAAmB,IAAI,IAA3B,EAAiC;AAAA;AAAA;AAAA;;AAAA;AAC/B,kCAA+BA,mBAA/B,mIAAoD;AAAA,kBAA3CC,kBAA2C;;AAClD,kBAAIA,kBAAkB,IAAI,IAA1B,EAAgC;AAC9B,oBAAIA,kBAAkB,CAACnH,IAAnB,IAA2B,YAA/B,EAA6C;AAC3C,yBAAO,IAAP;AACD;AACF;AACF;AAP8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQhC;AACF;;AACD,aAAO,KAAP;AACD;AAED;;;;;;;;;2CAMuBuH,Y,EAAc;AAAA;AAAA;AAAA;;AAAA;AACnC,8BAAoBA,YAApB,mIAAkC;AAAA,cAAzBC,OAAyB;;AAChC,cAAIA,OAAO,IAAI,IAAf,EAAqB;AACnB,mBAAO,IAAP;AACD;AACF;AALkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMnC,aAAO,KAAP;AACD;AAED;;;;;;;;;;;;6BASS3I,G,EAAK4I,Q,EAAU;AACtB,UAAI5I,GAAG,CAACP,MAAJ,IAAcmJ,QAAlB,EAA4B;AAC1B,eAAO5I,GAAP;AACD;;AACD,UAAI6I,UAAU,GAAG,IAAjB;AACA,UAAIC,IAAI,GAAG,KAAX;AACA,UAAIC,GAAG,GAAG,EAAV;;AACA,SAAG;AACC,YAAIC,KAAK,GAAG,KAAZ,CADD,CAEC;;AACA,aAAK,IAAInH,CAAC,GAAG+G,QAAQ,GAAG,CAAxB,EAA2B/G,CAAC,IAAI,CAAhC,EAAmCA,CAAC,EAApC,EAAwC;AACpC,cAAI,KAAKoH,SAAL,CAAejJ,GAAG,CAACkJ,MAAJ,CAAWrH,CAAX,CAAf,CAAJ,EAAmC;AAC/BkH,YAAAA,GAAG,GAAGA,GAAG,GAAG,CAAC/I,GAAG,CAACmJ,KAAJ,CAAU,CAAV,EAAatH,CAAb,CAAD,EAAkBgH,UAAlB,EAA8BO,IAA9B,CAAmC,EAAnC,CAAZ;AACApJ,YAAAA,GAAG,GAAGA,GAAG,CAACmJ,KAAJ,CAAUtH,CAAC,GAAG,CAAd,CAAN;AACAmH,YAAAA,KAAK,GAAG,IAAR;AACA;AACH;AACJ,SAVF,CAWC;;;AACA,YAAI,CAACA,KAAL,EAAY;AACRD,UAAAA,GAAG,IAAI,CAAC/I,GAAG,CAACmJ,KAAJ,CAAU,CAAV,EAAaP,QAAb,CAAD,EAAyBC,UAAzB,EAAqCO,IAArC,CAA0C,EAA1C,CAAP;AACApJ,UAAAA,GAAG,GAAGA,GAAG,CAACmJ,KAAJ,CAAUP,QAAV,CAAN;AACH;;AAED,YAAI5I,GAAG,CAACP,MAAJ,GAAamJ,QAAjB,EACIE,IAAI,GAAG,IAAP;AACP,OAnBD,QAmBS,CAACA,IAnBV;;AAqBA,aAAOC,GAAG,GAAG/I,GAAb;AACD;AAED;;;;;;;;8BAKUqJ,C,EAAG;AACX,UAAIC,KAAK,GAAG,IAAIrG,MAAJ,CAAW,MAAX,CAAZ;AACA,aAAOqG,KAAK,CAACC,IAAN,CAAWF,CAAC,CAACH,MAAF,CAAS,CAAT,CAAX,CAAP;AACD;;;;AAED;;;;;8BAKUlJ,G,EAAK;AACb,aAAOA,GAAG,CAACwJ,IAAJ,GAAWlI,KAAX,CAAiB,KAAjB,EAAwB7B,MAA/B;AACD;AAED;;;;;;;;wCAKoBgK,M,EAAQ;AAAA;AAAA;AAAA;;AAAA;AAC1B,8BAAkBA,MAAlB,mIAA0B;AAAA,cAAjBC,KAAiB;;AACxB,cAAIA,KAAK,CAACA,KAAN,IAAe,aAAnB,EAAkC;AAChC,mBAAO,IAAP;AACD;AACF;AALyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAM1B,aAAO,KAAP;AACD;AAED;;;;;;;;oDAKgCtB,gB,EAAkB;AAChD,aAAO,KAAKuB,sBAAL,CAA4BvB,gBAA5B,EAA8C,YAA9C,CAAP;AACD;AAED;;;;;;;;kDAK8BA,gB,EAAkB;AAC9C,aAAO,KAAKuB,sBAAL,CAA4BvB,gBAA5B,EAA8C,UAA9C,CAAP;AACD;AAED;;;;;;;;2DAKuCA,gB,EAAkB;AACvD,aAAO,KAAKuB,sBAAL,CAA4BvB,gBAA5B,EAA8C,mBAA9C,CAAP;AACD;AAED;;;;;;;;;2CAMuBA,gB,EAAkBwB,sB,EAAwB;AAC/D,UAAIxB,gBAAgB,CAACC,mBAAjB,IAAwC,IAA5C,EAAkD;AAChD,YAAIA,mBAAmB,GAAGD,gBAAgB,CAACC,mBAA3C,CADgD,CAEhD;;AAFgD;AAAA;AAAA;;AAAA;AAGhD,gCAA+BA,mBAA/B,mIAAoD;AAAA,gBAA3CC,kBAA2C;;AAClD,gBAAIA,kBAAkB,CAACnH,IAAnB,IAA2ByI,sBAA/B,EAAuD;AACrD;AACA,qBAAO,IAAP;AACD;AACF;AAR+C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASjD;;AACD,aAAO,KAAP;AACD;AAED;;;;;;;;gDAK4BC,E,EAAqB;AAAA;;AAAA,UAAjBC,QAAiB,uEAAN,IAAM;AAC/C,UAAInB,OAAO,GAAG3C,CAAC,CAAC,MAAM6D,EAAP,CAAf;AACA,UAAIE,uBAAuB,GAAGpB,OAAO,CAACqB,GAAR,CAAY,iBAAZ,CAA9B;AACArB,MAAAA,OAAO,CAACqB,GAAR,CAAY,kBAAZ,EAAgC,SAAhC;AAEA;;;;;;;AAMA,WAAK1K,QAAL,CAAc,YAAM;AAClB;AACAqJ,QAAAA,OAAO,CAACqB,GAAR,CAAY;AACV,wBAAc,iCADJ;AAEV,8BAAoBD;AAFV,SAAZ;AAKA;;;;;;AAKA,QAAA,KAAI,CAACzK,QAAL,CAAc,YAAM;AAClBqJ,UAAAA,OAAO,CAACqB,GAAR,CAAY;AACV,0BAAc,EADJ;AAEV,gCAAoB;AAFV,WAAZ;AAID,SALD,EAKG,IALH;AAMD,OAlBD,EAkBGF,QAlBH;AAmBD;AAED;;;;;;;;oDAKgCG,c,EAAgB;AAAA;;AAC9C,UAAIC,QAAQ,GAAG,KAAK9K,EAAL,CAAQ+K,KAAR,EAAf;AACA,WAAKhL,SAAL,CAAeiL,IAAf,CAAoB;AAClBC,QAAAA,QAAQ,urBADU;AAclBC,QAAAA,MAAM,EAAE;AACNvG,UAAAA,MAAM,EAAEkG,cAAc,CAAClG,MADjB;AAENG,UAAAA,WAAW,EAAE+F,cAAc,CAAC/F,WAFtB;AAGN+F,UAAAA,cAAc,EAAEA;AAHV,SAdU;AAmBlBzE,QAAAA,UAAU,EAAE+E;AAnBM,OAApB;;AAqBA,eAASA,gBAAT,CAA0BC,MAA1B,EAAkCrL,SAAlC,EAA6C4E,MAA7C,EAAqDG,WAArD,EAAkE+F,cAAlE,EAAkF;AAChFO,QAAAA,MAAM,CAACzG,MAAP,GAAgBA,MAAhB;AACAyG,QAAAA,MAAM,CAACtG,WAAP,GAAqBA,WAArB;AACAsG,QAAAA,MAAM,CAACP,cAAP,GAAwBA,cAAxB;;AACAO,QAAAA,MAAM,CAACC,WAAP,GAAqB,YAAW;AAC9BtL,UAAAA,SAAS,CAACuL,IAAV;AACD,SAFD;AAGD;;AACDH,MAAAA,gBAAgB,CAACI,OAAjB,GAA2B,CAAC,QAAD,EAAW,WAAX,EAAwB,QAAxB,EAAkC,aAAlC,EAAiD,gBAAjD,CAA3B,CA/B8C,CAgC9C;;AACA,UAAIC,8BAA8B,GAAG,KAAKvL,UAAL,CAAgBwL,GAAhB,CAAoB,wBAApB,EAA8C,UAACnB,KAAD,EAAQoB,IAAR,EAAiB;AAClG,YAAIb,cAAc,CAAClG,MAAf,IAAyB+G,IAAI,CAAC/G,MAA9B,IAAwCkG,cAAc,CAAC/F,WAAf,IAA8B4G,IAAI,CAAC5G,WAA/E,EAA4F;AAC1F,UAAA,MAAI,CAAC5E,QAAL,CAAc,YAAM;AAClB,YAAA,MAAI,CAACyL,qCAAL,CAA2Cd,cAA3C,EAA2De,IAA3D,CAAgE,UAACC,KAAD,EAAW;AACzE;;;;AAIAL,cAAAA,8BAA8B;;AAC9B,cAAA,MAAI,CAACtL,QAAL,CAAc4L,MAAd,CAAqBC,4CAArB;;AACAjB,cAAAA,QAAQ,CAACkB,OAAT,CAAiBH,KAAjB;AACD,aARD;AASD,WAVD,EAUG,IAVH;AAWD;AACF,OAdoC,CAArC;AAeA;;;;;AAIA,UAAIE,4CAA4C,GAAG,KAAK7L,QAAL,CAAc,YAAM;AACrE;AACAsL,QAAAA,8BAA8B;AAC/B,OAHkD,EAGhD,KAHgD,CAAnD;AAIA,aAAOV,QAAQ,CAACmB,OAAhB;AACD;AAED;;;;;;;;;0DAMsCpB,c,EAAgB;AAAA;;AACpD,UAAIC,QAAQ,GAAG,KAAK9K,EAAL,CAAQ+K,KAAR,EAAf;AACA,UAAIxC,gBAAgB,GAAG,KAAKzI,SAAL,CAAe0I,GAAf,CAAmBqC,cAAc,CAACxC,aAAf,GAA+B,SAAlD,CAAvB;AACAE,MAAAA,gBAAgB,CAAC2D,uCAAjB,CAAyDrB,cAAzD,EAAyEe,IAAzE,CAA8E,UAACC,KAAD,EAAW;AACvFf,QAAAA,QAAQ,CAACkB,OAAT,CAAiBH,KAAjB;;AACA,QAAA,MAAI,CAAC9L,SAAL,CAAeuL,IAAf;AACD,OAHD;AAIA,aAAOR,QAAQ,CAACmB,OAAhB;AACD;AAED;;;;;;;;;0DAMsCjD,gB,EAAkB6B,c,EAAgB;AACtE,UAAIlG,MAAM,GAAGkG,cAAc,CAAClG,MAA5B;AACA,UAAIG,WAAW,GAAG+F,cAAc,CAAC/F,WAAjC;AACA,UAAImE,mBAAmB,GAAGD,gBAAgB,CAACC,mBAA3C;AAHsE;AAAA;AAAA;;AAAA;AAItE,8BAA+BA,mBAA/B,mIAAoD;AAAA,cAA3CC,kBAA2C;;AAClD,cAAIA,kBAAkB,CAACvE,MAAnB,IAA6BA,MAA7B,IAAuCuE,kBAAkB,CAACpE,WAAnB,IAAkCA,WAA7E,EAA0F;AACxF,mBAAOoE,kBAAP;AACD;AACF;AARqE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAStE,aAAO,IAAP;AACD;;;2CAEsB;AACrB,WAAKiD,qBAAL,CAA2B,IAA3B;AACD;;;6CAEwB;AACvB,WAAKA,qBAAL,CAA2B,KAA3B;AACD;;;2CAEsB;AACrB,WAAKA,qBAAL,CAA2B,IAA3B;AACD;AAED;;;;;;;;;;0CAOsBC,W,EAAa;AACjC,WAAKnM,UAAL,CAAgBmH,UAAhB,CAA2B,gBAA3B,EAA6C;AAAEgF,QAAAA,WAAW,EAAEA;AAAf,OAA7C;AACD;;;iCAEYC,O,EAASC,K,EAAO;AAC3B,UAAIA,KAAK,KAAK,CAAd,EAAiB;AACf,YAAMC,MAAM,GAAGF,OAAO,CAACC,KAAD,CAAtB;AACAD,QAAAA,OAAO,CAACG,MAAR,CAAeF,KAAf,EAAsB,CAAtB;AACAD,QAAAA,OAAO,CAACG,MAAR,CAAeF,KAAK,GAAG,CAAvB,EAA0B,CAA1B,EAA6BC,MAA7B;AACD;AACF;;;mCAEcF,O,EAASC,K,EAAO;AAC7B,UAAIA,KAAK,KAAKD,OAAO,CAAChM,MAAR,GAAiB,CAA/B,EAAkC;AAChC,YAAMkM,MAAM,GAAGF,OAAO,CAACC,KAAD,CAAtB;AACAD,QAAAA,OAAO,CAACG,MAAR,CAAeF,KAAf,EAAsB,CAAtB;AACAD,QAAAA,OAAO,CAACG,MAAR,CAAeF,KAAK,GAAG,CAAvB,EAA0B,CAA1B,EAA6BC,MAA7B;AACD;AACF;;;oDAE+BE,Y,EAAc;AAC5C7F,MAAAA,CAAC,CAAC,MAAM6F,YAAP,CAAD,CAAsB5F,UAAtB,CAAiC,qBAAjC;AACAD,MAAAA,CAAC,CAAC,MAAM6F,YAAP,CAAD,CAAsB5F,UAAtB,CAAiC,cAAjC;AACD;;;8CAEyB4F,Y,EAAcC,a,EAAe/I,Q,EAAU;AAC/DiD,MAAAA,CAAC,CAAC,MAAM6F,YAAP,CAAD,CAAsB5F,UAAtB,CAAiC,aAAjC,EAAgD6F,aAAhD,EAA+D/I,QAA/D;AACD;;;8CAEyB8I,Y,EAAcC,a,EAAe;AACrD,UAAMC,YAAY,GAAG5J,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAArB;AACA2J,MAAAA,YAAY,CAACC,QAAb,GAAwB,MAAxB;AACAD,MAAAA,YAAY,CAACE,SAAb,GAAyB,qBAAqBH,aAArB,GAAqC,qBAA9D;AACA9F,MAAAA,CAAC,CAAC,MAAM6F,YAAP,CAAD,CAAsB5F,UAAtB,CAAiC,YAAjC,EAA+C8F,YAA/C;AACD;;;6BAEQG,K,EAAOC,O,EAAS;AACvB,UAAIC,MAAM,GAAGF,KAAK,CACf7H,OADU,CACF,QADE,EACQ,EADR,EAEVA,OAFU,CAEF,IAFE,EAEI,EAFJ,EAGVA,OAHU,CAGF,QAHE,EAGQ,EAHR,EAIV/C,KAJU,CAIJ,GAJI,CAAb;AAKA,UAAI1B,CAAC,GAAGyM,UAAU,CAACF,OAAO,IAAI,CAAZ,CAAlB;AAAA,UACEG,CAAC,GAAGzM,IAAI,CAACC,KAAL,CAAWF,CAAC,GAAG2M,QAAQ,CAACH,MAAM,CAAC,CAAD,CAAP,CAAZ,GAA0B,CAAC,IAAIxM,CAAL,IAAU,GAA/C,CADN;AAAA,UAEE4M,CAAC,GAAG3M,IAAI,CAACC,KAAL,CAAWF,CAAC,GAAG2M,QAAQ,CAACH,MAAM,CAAC,CAAD,CAAP,CAAZ,GAA0B,CAAC,IAAIxM,CAAL,IAAU,GAA/C,CAFN;AAAA,UAGE6M,CAAC,GAAG5M,IAAI,CAACC,KAAL,CAAWF,CAAC,GAAG2M,QAAQ,CAACH,MAAM,CAAC,CAAD,CAAP,CAAZ,GAA0B,CAAC,IAAIxM,CAAL,IAAU,GAA/C,CAHN;AAIA,aAAO,MACL,CAAC,MAAM0M,CAAC,CAACI,QAAF,CAAW,EAAX,CAAP,EAAuBvD,KAAvB,CAA6B,CAAC,CAA9B,CADK,GAEL,CAAC,MAAMqD,CAAC,CAACE,QAAF,CAAW,EAAX,CAAP,EAAuBvD,KAAvB,CAA6B,CAAC,CAA9B,CAFK,GAGL,CAAC,MAAMsD,CAAC,CAACC,QAAF,CAAW,EAAX,CAAP,EAAuBvD,KAAvB,CAA6B,CAAC,CAA9B,CAHF;AAID;;;sCAEiBwD,S,EAAWC,S,EAAW;AACtC,aAAO,KAAKC,YAAL,CAAkBF,SAAlB,KAAgC,KAAKE,YAAL,CAAkBD,SAAlB,CAAhC,IAAgED,SAAS,IAAIC,SAApF;AACD;;;iCAEYE,Q,EAAU;AACrB,aAAOA,QAAQ,IAAI,IAAZ,IAAoBA,QAAQ,KAAK,CAAC,CAAzC;AACD;;;;KAGH;;;AACA,IAAI,CAACC,KAAK,CAACC,SAAN,CAAgBC,IAArB,EAA2B;AACzBF,EAAAA,KAAK,CAACC,SAAN,CAAgBC,IAAhB,GAAuB,YAAW;AAChC,WAAO,KAAK,KAAKxN,MAAL,GAAc,CAAnB,CAAP;AACD,GAFD;AAGD;;AAEDT,WAAW,CAAC2L,OAAZ,GAAsB,CACpB,SADoB,EAEpB,WAFoB,EAGpB,WAHoB,EAIpB,IAJoB,EAKpB,YALoB,EAMpB,UANoB,CAAtB;eASe3L,W","sourcesContent":["'use strict';\n\nclass UtilService {\n  constructor(\n      $filter,\n      $injector,\n      $mdDialog,\n      $q,\n      $rootScope,\n      $timeout) {\n    this.$filter = $filter;\n    this.$injector = $injector;\n    this.$mdDialog = $mdDialog;\n    this.$q = $q;\n    this.$rootScope = $rootScope;\n    this.$timeout = $timeout;\n    this.componentTypeToLabel = {};\n    this.$translate = this.$filter('translate');\n  }\n\n  /**\n   * Generates and returns a random key of the given length if\n   * specified. If length is not specified, returns a key 10\n   * characters in length.\n   */\n  generateKey(length) {\n    this.CHARS = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\n        \"n\",\"o\",\"p\",\"q\",\"r\", \"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",\n        \"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"];\n\n    if (!length) {\n      length = 10;\n    }\n\n    let key = '';\n    for (let a = 0; a < length; a++) {\n      key += this.CHARS[Math.floor(Math.random() * (this.CHARS.length - 1))];\n    }\n\n    return key;\n  };\n\n  /**\n   * Try to convert a string to a number\n   * @param str the string to convert\n   * @returns a number if we were able to convert the string to a number.\n   * if we couldn't convert the string to a number we will just return the string.\n   */\n  convertStringToNumber(str) {\n    if (str != null && str != '' && !isNaN(Number(str))) {\n      return Number(str);\n    }\n    return str;\n  };\n\n  /**\n   * Create a copy of a JSON object\n   * @param jsonObject the JSON object to get a copy of\n   * @return a copy of the JSON object that was passed in\n   */\n  makeCopyOfJSONObject(jsonObject) {\n    if (jsonObject != null) {\n      const jsonObjectString = angular.toJson(jsonObject);\n      return angular.fromJson(jsonObjectString);\n    }\n    return null;\n  };\n\n  /**\n   * Get the image object\n   * @params img_b64 the base64 image string\n   * @returns an image object\n   */\n  getImageObjectFromBase64String(img_b64) {\n    // create a blob from the base64 image string\n    const blob = this.dataURItoBlob(img_b64);\n\n    const now = new Date().getTime();\n    const filename = encodeURIComponent('picture_' + now + '.png');\n    const pngFile = new File([blob], filename, {\n      lastModified: now, // optional - default = now\n      type: 'image/png' // optional - default = ''\n    });\n    return pngFile;\n  }\n\n  /**\n   * Convert base64/URLEncoded data component to raw binary data held in a string\n   * @param dataURI base64/URLEncoded data\n   * @returns a Blob object\n   */\n  dataURItoBlob(dataURI) {\n    let byteString;\n    if (dataURI.split(',')[0].indexOf('base64') >= 0)\n      byteString = atob(dataURI.split(',')[1]);\n    else\n      byteString = unescape(dataURI.split(',')[1]);\n\n    // separate out the mime component\n    const mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];\n\n    // write the bytes of the string to a typed array\n    const ia = new Uint8Array(byteString.length);\n    for (let i = 0; i < byteString.length; i++) {\n      ia[i] = byteString.charCodeAt(i);\n    }\n    return new Blob([ia], {type:mimeString});\n  };\n\n  /**\n   * Get an image object from an image element\n   * @param imageElement an image element (<img src='abc.jpg'/>)\n   * @returns an image object\n   */\n  getImageObjectFromImageElement(imageElement) {\n    let imageObject = null;\n    if (imageElement != null) {\n      // create a canvas element that we will use to generate a base64 string\n      const canvas = document.createElement(\"canvas\");\n\n      // set the width and height of the canvas to match the image dimensions\n      canvas.width = imageElement.naturalWidth;\n      canvas.height = imageElement.naturalHeight;\n\n      // draw the image onto the canvas\n      const ctx = canvas.getContext(\"2d\");\n      ctx.drawImage(imageElement, 0, 0);\n\n      const dataURL = canvas.toDataURL(\"image/png\");\n      imageObject = this.getImageObjectFromBase64String(dataURL);\n    }\n    return imageObject;\n  }\n\n  /**\n   * Check if the asset is an image\n   * @param fileName the file name of the asset\n   * @return whether the asset is an image or not\n   */\n  isImage(fileName) {\n    if (fileName != null) {\n      const imageExtensionsRegEx =\n          new RegExp('.*\\.(png|jpg|jpeg|bmp|gif|tiff|svg)');\n      const lowerCaseFileName = fileName.toLowerCase();\n      const matchResult = lowerCaseFileName.match(imageExtensionsRegEx);\n\n      if (matchResult != null) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Check if the asset is a video\n   * @param fileName the file name of the asset\n   * @return whether the asset is a video or not\n   */\n  isVideo(fileName) {\n    if (fileName != null) {\n      const videoExtensionsRegEx =\n          new RegExp('.*\\.(mp4|mpg|mpeg|m4v|m2v|avi|gifv|mov|qt)');\n      const lowerCaseFileName = fileName.toLowerCase();\n      const matchResult = lowerCaseFileName.match(videoExtensionsRegEx);\n\n      if (matchResult != null) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Replace <a> and <button> elements with <wiselink> elements where\n   * applicable\n   * @param html the html\n   * @return the modified html with <wiselink> elements\n   */\n  insertWISELinks(html) {\n    html = this.insertWISELinkAnchors(html);\n    html = this.insertWISELinkButtons(html);\n    return html;\n  }\n\n  /**\n   * Replace <a> elements that have the parameter wiselink=true with\n   * <wiselink> elements\n   * @param html the html\n   * @return the modified html with certain <a> elements replaced with\n   * <wiselink> elements\n   */\n  insertWISELinkAnchors(html) {\n    let wiseLinkRegEx = new RegExp(/<a.*?wiselink=\"true\".*?>(.*?)<\\/a>/);\n    let wiseLinkRegExMatchResult = wiseLinkRegEx.exec(html);\n\n    // loop until we have replaced all the matches\n    while (wiseLinkRegExMatchResult != null) {\n      // get the whole <a> element\n      let anchorHTML = wiseLinkRegExMatchResult[0];\n\n      // get the inner html of the <a> element\n      let anchorText = wiseLinkRegExMatchResult[1];\n\n      // get the node id parameter of the <a> element\n      let nodeId = this.getWISELinkNodeId(anchorHTML);\n\n      if (nodeId == null) {\n        nodeId = '';\n      }\n\n      let componentIdAttr = \"\";\n      let componentId = this.getWISELinkComponentId(anchorHTML);\n      if (componentId != null) {\n        componentIdAttr = \"component-id='\" + componentId + \"'\";\n      }\n\n      // create the <wiselink> element\n      let wiselinkHtml = \"<wiselink type='link' link-text='\" + anchorText + \"' node-id='\" + nodeId + \"' \" + componentIdAttr + \"/>\";\n\n      // replace the <a> element with the <wiselink> element\n      html = html.replace(wiseLinkRegExMatchResult[0], wiselinkHtml);\n\n      // search for the next <a> element with the parameter wiselink=true\n      wiseLinkRegExMatchResult = wiseLinkRegEx.exec(html);\n    }\n    return html;\n  }\n\n  /**\n   * Replace <button> elements that have the parameter wiselink=true\n   * with <wiselink> elements\n   * @param html the html\n   * @return the modified html with certain <button> elements replaced with\n   * <wiselink> elements\n   */\n  insertWISELinkButtons(html) {\n    const wiseLinkRegEx = new RegExp(/<button.*?wiselink=\"true\".*?>(.*?)<\\/button>/);\n    let wiseLinkRegExMatchResult = wiseLinkRegEx.exec(html);\n\n    // loop until we have replaced all the matches\n    while (wiseLinkRegExMatchResult != null) {\n      // get the whole <button> element\n      const buttonHTML = wiseLinkRegExMatchResult[0];\n\n      // get the inner html of the <button> element\n      const buttonText = wiseLinkRegExMatchResult[1];\n\n      // get the node id parameter of the <button> element\n      let nodeId = this.getWISELinkNodeId(buttonHTML);\n\n      if (nodeId == null) {\n        nodeId = '';\n      }\n\n      let componentIdAttr = \"\";\n      let componentId = this.getWISELinkComponentId(buttonHTML);\n      if (componentId != null) {\n        componentIdAttr = \"component-id='\" + componentId + \"'\";\n      }\n\n      // create the <wiselink> element\n      const wiselinkHtml = \"<wiselink type='button' link-text='\" + buttonText + \"' node-id='\" + nodeId + \"' \" + componentIdAttr + \"/>\";\n\n      // replace the <button> element with the <wiselink> element\n      html = html.replace(wiseLinkRegExMatchResult[0], wiselinkHtml);\n\n      // search for the next <button> element with the parameter wiselink=true\n      wiseLinkRegExMatchResult = wiseLinkRegEx.exec(html);\n    }\n    return html;\n  }\n\n  /**\n   * Get the node id from the wiselink element\n   * e.g.\n   * <wiselink node-id='node5'/>\n   * the node id in this case is 'node5'\n   * @param html the html for the element\n   * @return the node id from the node id parameter in the element\n   */\n  getWISELinkNodeId(html) {\n    if (html != null) {\n      let nodeIdRegEx = new RegExp(/node-id=[\"'b](.*?)[\"']/, 'g');\n      let nodeIdRegExResult = nodeIdRegEx.exec(html);\n      if (nodeIdRegExResult != null) {\n        return nodeIdRegExResult[1];\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Get the component id from the wiselink element\n   * e.g.\n   * <wiselink node-id='node5' component-id='xyzabc' />\n   * the component id in this case is 'xyzabc'\n   * @param html the html for the element\n   * @return the component id from the component id parameter in the element\n   */\n  getWISELinkComponentId(html) {\n    if (html != null) {\n      let componentIdRegEx = new RegExp(/component-id=[\"'b](.*?)[\"']/, 'g');\n      let componentIdRegExResult = componentIdRegEx.exec(html);\n      if (componentIdRegExResult != null) {\n        return componentIdRegExResult[1];\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Get the link type from the wiselink element\n   * e.g.\n   * <wiselink type='button'/>\n   * the type in this case is 'button'\n   * @param html the html for the element\n   * @return the link type from the type parameter in the element\n   */\n  getWISELinkType(html) {\n    if (html != null) {\n      let typeRegEx = new RegExp(/type=[\"'b](.*?)[\"']/, 'g');\n      let typeRegExResult = typeRegEx.exec(html);\n      if (typeRegExResult != null) {\n        return typeRegExResult[1];\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Get the link text from the wiselink element\n   * <wiselink link-text='Go to here'/>\n   * the link text in this case is 'Go to here'\n   * @param html the html for the element\n   * @return the link text from the link text parameter in the element\n   */\n  getWISELinkLinkText(html) {\n    if (html != null) {\n      let linkTextRegEx = new RegExp(/link-text=[\"'b](.*?)[\"']/, 'g');\n      let linkTextRegExResult = linkTextRegEx.exec(html);\n      if (linkTextRegExResult != null) {\n        return linkTextRegExResult[1];\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Replace <wiselink> elements with <a> and <button> elements\n   * @param html the html\n   * @return the modified html without <wiselink> elements\n   */\n  replaceWISELinks(html) {\n    html = this.replaceWISELinksHelper(html, '<wiselink.*?\\/>');\n    html = this.replaceWISELinksHelper(html, '<wiselink.*?>.*?<\\/wiselink>');\n    return html;\n  }\n\n  /**\n   * Helper function for replacing <wiselink> elements with <a> and <button>\n   * elements\n   * @param html the html\n   * @param regex the regex string to search for\n   * @return the html without <wiselink> elements\n   */\n  replaceWISELinksHelper(html, regex) {\n    let wiseLinkRegEx = new RegExp(regex);\n    let wiseLinkRegExMatchResult = wiseLinkRegEx.exec(html);\n\n    // loop until we have replaced all the matches\n    while (wiseLinkRegExMatchResult != null) {\n      /*\n       * get the whole match\n       * e.g. <wiselink type='link' node-id='node5' link-text='Go to here'/>\n       */\n      let wiseLinkHTML = wiseLinkRegExMatchResult[0];\n\n      // get the node id, component id (if exists), type and link text from the match\n      let nodeId = this.getWISELinkNodeId(wiseLinkHTML);\n      let componentId = this.getWISELinkComponentId(wiseLinkHTML);\n      let componentHTML = '';\n      if (componentId != null && componentId != '') {\n        componentHTML = \"component-id='\" + componentId + \"'\";\n      }\n      let type = this.getWISELinkType(wiseLinkHTML);\n      let linkText = this.getWISELinkLinkText(wiseLinkHTML);\n\n      let newElement = null;\n\n      if (type == 'link') {\n        // create a link that represents the wiselink\n        newElement = \"<a wiselink='true' node-id='\" + nodeId + \"' \" + componentHTML + \">\" + linkText + \"</a>\";\n      } else if (type == 'button') {\n        // create a button that represents the wiselink\n        newElement = \"<button wiselink='true' node-id='\" + nodeId + \"' \" + componentHTML + \">\" + linkText + \"</button>\";\n      } else {\n        // default to creating a link that represents the wiselink\n        newElement = \"<a wiselink='true' node-id='\" + nodeId + \"' \" + componentHTML + \">\" + linkText + \"</a>\";\n      }\n\n      if (newElement != null) {\n        // replace the wiselink with the new element\n        html = html.replace(wiseLinkHTML, newElement);\n      }\n\n      // find the next match\n      wiseLinkRegExMatchResult = wiseLinkRegEx.exec(html);\n    }\n    return html;\n  }\n\n  /**\n   * Create a custom summernote button that inserts a WISE asset into\n   * summernote\n   * @param controller the controller that is creating the button\n   * e.g. openResponseController\n   * @param nodeId the node id of the component that is creating the button\n   * @param componentId the component id of the component that is creating the button\n   * @param target the target element in the component to insert the asset into\n   * e.g. 'prompt' or 'rubricSummernoteId'\n   * @param tooltip the tooltip text for the custom button\n   * @return custom summernote button\n   */\n  createInsertAssetButton(controller, projectId, nodeId, componentId, target, tooltip) {\n    const thisRootScope = this.$rootScope;\n\n    const InsertAssetButton = function(context) {\n      const ui = $.summernote.ui;\n\n      const button = ui.button({\n        contents: '<i class=\"note-icon-picture\"></i>',\n        tooltip: tooltip,\n        click: function () {\n          // remember the position of the cursor\n          context.invoke('editor.saveRange');\n\n          // create the params for opening the asset chooser\n          const params = {};\n          params.isPopup = true;\n\n          if (projectId != null) {\n            params.projectId = projectId;\n          }\n\n          if (nodeId != null) {\n            params.nodeId = nodeId;\n          }\n\n          if (componentId != null) {\n            params.componentId = componentId;\n          }\n\n          params.target = target;\n\n          // display the asset chooser\n          thisRootScope.$broadcast('openAssetChooser', params);\n        }\n      });\n      return button.render();   // return button as jquery object\n    };\n    return InsertAssetButton;\n  }\n\n  /**\n   * Create a custom summernote button that inserts a WISE link into\n   * summernote\n   * @param controller the controller that is creating the WISE link\n   * e.g. openResponseController\n   * @param nodeId the node id of the component that is creating the WISE link\n   * @param componentId the component id of the component that is creating the WISE link\n   * @param target the target element in the component to insert the WISE link into\n   * e.g. 'prompt' or 'rubricSummernoteId'\n   * @param tooltip the tooltip text for the custom button\n   * @return custom summernote button\n   */\n  createInsertWISELinkButton(controller, projectId, nodeId, componentId, target, tooltip) {\n    const thisRootScope = this.$rootScope;\n\n    const InsertWISELinkButton = function(context) {\n      const ui = $.summernote.ui;\n\n      const button = ui.button({\n        contents: '<i class=\"note-icon-link\"></i>',\n        tooltip: tooltip,\n        click: function () {\n          // remember the position of the cursor\n          context.invoke('editor.saveRange');\n\n          // create the params for opening the WISE Link chooser\n          const params = {};\n\n          if (projectId != null) {\n            params.projectId = projectId;\n          }\n\n          if (nodeId != null) {\n            params.nodeId = nodeId;\n          }\n\n          if (componentId != null) {\n            params.componentId = componentId;\n          }\n\n          params.target = target;\n\n          // display the WISE Link authoring popup\n          thisRootScope.$broadcast('openWISELinkChooser', params);\n        }\n      });\n      return button.render();   // return button as jquery object\n    };\n    return InsertWISELinkButton;\n  }\n\n  /**\n   * Remove html tags from the string. Also remove new lines.\n   * @param html an html string\n   * @return text without html tags\n   */\n  removeHTMLTags(html) {\n    let text = '';\n    if (html != null) {\n      // remove tags\n      text = html.replace(/<\\/?[^>]+(>|$)/g, \" \");\n      text = text.replace(/\\n/g, \" \");\n      text = text.replace(/\\r/g, \" \");\n    }\n    return text;\n  }\n\n  /**\n   * Check if a string ends with a specific string\n   * @param subjectString the main string\n   * @param searchString the potential end of the string\n   * @param position (optional) the position to start searching\n   * @return whether the subjectString ends with the searchString\n   */\n  endsWith(subjectString, searchString, position) {\n    if (typeof position !== 'number' || !isFinite(position) || Math.floor(position) !== position || position > subjectString.length) {\n      position = subjectString.length;\n    }\n    position -= searchString.length;\n    const lastIndex = subjectString.lastIndexOf(searchString, position);\n    return lastIndex !== -1 && lastIndex === position;\n  }\n\n  /**\n   * Sort the objects by server save time\n   * @param object1 an object\n   * @param object2 an object\n   * @return -1 if object1 server save time comes before object2 server save time\n   * 1 if object1 server save time comes after object2 server save time\n   * 0 if object1 server save time is equal to object2 server save time\n   */\n  sortByServerSaveTime(object1, object2) {\n    if (object1.serverSaveTime < object2.serverSaveTime) {\n      return -1;\n    } else if (object1.serverSaveTime > object2.serverSaveTime) {\n      return 1;\n    } else {\n      return 0;\n    }\n  }\n\n  /**\n   * Convert milliseconds since the epoch to a pretty printed date time\n   * @param milliseconds the milliseconds since the epoch\n   * @return a string containing the pretty printed date time\n   * example\n   * Wed Apr 06 2016 9:05:38 AM\n   */\n  convertMillisecondsToFormattedDateTime(milliseconds) {\n    const date = new Date(milliseconds);\n    if (date != null) {\n      return date.toDateString() + \" \" + date.toLocaleTimeString();\n    }\n    return \"\";\n  }\n\n  /**\n   * Get the label for the given component type\n   * @param componentType string\n   * @return string label for the component type\n   */\n  getComponentTypeLabel(componentType) {\n    /*\n     * check if we have already obtained the label for this component type\n     * before\n     */\n    let label = this.componentTypeToLabel[componentType];\n\n    if (label == null) {\n      let componentService = this.$injector.get(componentType + 'Service');\n      if (componentService != null && componentService.getComponentTypeLabel != null) {\n        label = componentService.getComponentTypeLabel();\n        this.componentTypeToLabel[componentType] = label;\n      }\n    }\n\n    if (label == null) {\n      /*\n       * we were unable to find the label so we will just use the\n       * component type as the label\n       */\n      label = componentType;\n    }\n    return label;\n  }\n\n  /**\n   * Check if two arrays contain the same values. This is commonly used to\n   * check if two arrays of ids contain the same values. The order of the\n   * elements is not compared, only the actual values. This means the elements\n   * can be in different orders but still contain the same values.\n   * Example:\n   * array1=['1234567890', 'abcdefghij']\n   * array2=['abcdefghij', '1234567890']\n   * If these two arrays are passed in as the two arguments, this function\n   * will return true.\n   * Note: This may only work if the elements are strings, numbers or\n   * booleans. If the elements are objects, this function may or may not work.\n   * @param array1 an array of strings, numbers, or booleans\n   * @param array2 an array of strings, numbers, or booleans\n   * @return whether the arrays contain the same values\n   */\n  arraysContainSameValues(array1, array2) {\n    if (array1 != null && array2 != null) {\n      const array1Copy = this.makeCopyOfJSONObject(array1);\n      array1Copy.sort();\n\n      const array2Copy = this.makeCopyOfJSONObject(array2);\n      array2Copy.sort();\n\n      if (angular.toJson(array1Copy) == angular.toJson(array2Copy)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Whether there are any connected components\n   * @param componentContent the component content\n   * @return whether there are any connected components\n   */\n  hasConnectedComponent(componentContent) {\n    if (componentContent != null) {\n      const connectedComponents = componentContent.connectedComponents;\n      if (connectedComponents != null && connectedComponents.length > 0) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @param componentContent The component content.\n   * @return Whether there are any connected components with a field we always\n   * want to read or write.\n   */\n  hasConnectedComponentAlwaysField(componentContent) {\n    if (componentContent != null) {\n      const connectedComponents = componentContent.connectedComponents;\n      if (connectedComponents != null && connectedComponents.length > 0) {\n        for (let connectedComponent of connectedComponents) {\n          if (connectedComponent.fields != null) {\n            for (let field of connectedComponent.fields) {\n              if (field.when == \"always\") {\n                return true;\n              }\n            }\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Whether this component shows work from a connected component\n   * @param componentContent the component content\n   * @return whether this component shows work from a connected component\n   */\n  hasShowWorkConnectedComponent(componentContent) {\n    if (componentContent != null) {\n      const connectedComponents = componentContent.connectedComponents;\n      if (connectedComponents != null) {\n        for (let connectedComponent of connectedComponents) {\n          if (connectedComponent != null) {\n            if (connectedComponent.type == 'showWork') {\n              return true;\n            }\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Whether this component imports work from a connected component\n   * @param componentContent the component content\n   * @return whether this component imports work from a connected component\n   */\n  hasImportWorkConnectedComponent(componentContent) {\n    if (componentContent != null) {\n      const connectedComponents = componentContent.connectedComponents;\n      if (connectedComponents != null) {\n        for (let connectedComponent of connectedComponents) {\n          if (connectedComponent != null) {\n            if (connectedComponent.type == 'importWork') {\n              return true;\n            }\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Check if an array has any non null elements.\n   * @param arrayToCheck An array which may have null and non null elements.\n   * @return True if the array has at least one non null element.\n   * False if the array has all null elements.\n   */\n  arrayHasNonNullElement(arrayToCheck) {\n    for (let element of arrayToCheck) {\n      if (element != null) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Takes a string and breaks it up into multiple lines so that the length of\n   * each line does not exceed a certain number of characters. This code was\n   * found on stackoverflow.\n   * https://stackoverflow.com/questions/14484787/wrap-text-in-javascript\n   * @param str The string to break up.\n   * @param maxWidth The max width of a line.\n   * @return A string that has been broken up into multiple lines using \\n.\n   */\n  wordWrap(str, maxWidth) {\n    if (str.length <= maxWidth) {\n      return str;\n    }\n    let newLineStr = \"\\n\";\n    let done = false;\n    let res = '';\n    do {\n        let found = false;\n        // Inserts new line at first whitespace of the line\n        for (let i = maxWidth - 1; i >= 0; i--) {\n            if (this.testWhite(str.charAt(i))) {\n                res = res + [str.slice(0, i), newLineStr].join('');\n                str = str.slice(i + 1);\n                found = true;\n                break;\n            }\n        }\n        // Inserts new line at maxWidth position, the word is too long to wrap\n        if (!found) {\n            res += [str.slice(0, maxWidth), newLineStr].join('');\n            str = str.slice(maxWidth);\n        }\n\n        if (str.length < maxWidth)\n            done = true;\n    } while (!done);\n\n    return res + str;\n  }\n\n  /**\n   * Helper function for wordWrap().\n   * @param x A single character string.\n   * @return Whether the single character is a whitespace character.\n   */\n  testWhite(x) {\n    let white = new RegExp(/^\\s$/);\n    return white.test(x.charAt(0));\n  };\n\n  /**\n   * Get the number of words in the string.\n   * @param str The string.\n   * @return The number of words in the string.\n   */\n  wordCount(str) {\n    return str.trim().split(/\\s+/).length;\n  }\n\n  /**\n   * Check if there is a 'nodeEntered' event in the array of events.\n   * @param events An array of events.\n   * @return Whether there is a 'nodeEntered' event in the array of events.\n   */\n  hasNodeEnteredEvent(events) {\n    for (let event of events) {\n      if (event.event == 'nodeEntered') {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Determine whether the component has been authored to import work.\n   * @param componentContent The component content.\n   * @return Whether to import work in this component.\n   */\n  hasImportWorkConnectedComponent(componentContent) {\n    return this.hasXConnectedComponent(componentContent, 'importWork');\n  }\n\n  /**\n   * Determine whether the component has been authored to show work.\n   * @param componentContent The component content.\n   * @return Whether to show work in this component.\n   */\n  hasShowWorkConnectedComponent(componentContent) {\n    return this.hasXConnectedComponent(componentContent, 'showWork');\n  }\n\n  /**\n   * Determine whether the component has been authored to show classmate work.\n   * @param componentContent The component content.\n   * @return Whether to show classmate work in this component.\n   */\n  hasShowClassmateWorkConnectedComponent(componentContent) {\n    return this.hasXConnectedComponent(componentContent, 'showClassmateWork');\n  }\n\n  /**\n   * Determine whether the component has a connected component of the given type.\n   * @param componentContent The component content.\n   * @param connectedComponentType The connected component type.\n   * @return Whether the component has a connected component of the given type.\n   */\n  hasXConnectedComponent(componentContent, connectedComponentType) {\n    if (componentContent.connectedComponents != null) {\n      let connectedComponents = componentContent.connectedComponents;\n      // loop through all the connected components\n      for (let connectedComponent of connectedComponents) {\n        if (connectedComponent.type == connectedComponentType) {\n          // the connected component is the type we're looking for\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Temporarily highlight an element in the DOM.\n   * @param id The id of the element.\n   * @param duration The number of milliseconds to keep the element highlighted.\n   */\n  temporarilyHighlightElement(id, duration = 1000) {\n    let element = $('#' + id);\n    let originalBackgroundColor = element.css('backgroundColor');\n    element.css('background-color', '#FFFF9C');\n\n    /*\n     * Use a timeout before starting to transition back to\n     * the original background color. For some reason the\n     * element won't get highlighted in the first place\n     * unless this timeout is used.\n     */\n    this.$timeout(() => {\n      // slowly fade back to the original background color\n      element.css({\n        'transition': 'background-color 2s ease-in-out',\n        'background-color': originalBackgroundColor\n      });\n\n      /*\n       * remove these styling fields after we perform\n       * the fade otherwise the regular mouseover\n       * background color change will not work\n       */\n      this.$timeout(() => {\n        element.css({\n          'transition': '',\n          'background-color': ''\n        });\n      }, 2000);\n    }, duration);\n  }\n\n  /**\n   * Render the component state and then generate an image from it.\n   * @param componentState The component state to render.\n   * @return A promise that will return an image.\n   */\n  generateImageFromComponentState(componentState) {\n    let deferred = this.$q.defer();\n    this.$mdDialog.show({\n      template: `\n        <div style=\"position: fixed; width: 100%; height: 100%; top: 0; left: 0; background-color: rgba(0,0,0,0.2); z-index: 2;\"></div>\n        <div align=\"center\" style=\"position: absolute; top: 100px; left: 200px; z-index: 1000; padding: 20px; background-color: yellow;\">\n          <span>{{ \"importingWork\" | translate }}...</span>\n          <br/>\n          <br/>\n          <md-progress-circular md-mode=\"indeterminate\"></md-progress-circular>\n        </div>\n        <component node-id=\"{{nodeId}}\"\n                   component-id=\"{{componentId}}\"\n                   component-state=\"{{componentState}}\"\n                   mode=\"student\"></component>\n      `,\n      locals: {\n        nodeId: componentState.nodeId,\n        componentId: componentState.componentId,\n        componentState: componentState\n      },\n      controller: DialogController\n    });\n    function DialogController($scope, $mdDialog, nodeId, componentId, componentState) {\n      $scope.nodeId = nodeId;\n      $scope.componentId = componentId;\n      $scope.componentState = componentState;\n      $scope.closeDialog = function() {\n        $mdDialog.hide();\n      }\n    }\n    DialogController.$inject = ['$scope', '$mdDialog', 'nodeId', 'componentId', 'componentState'];\n    // wait for the component in the dialog to finish rendering\n    let doneRenderingComponentListener = this.$rootScope.$on('doneRenderingComponent', (event, args) => {\n      if (componentState.nodeId == args.nodeId && componentState.componentId == args.componentId) {\n        this.$timeout(() => {\n          this.generateImageFromComponentStateHelper(componentState).then((image) => {\n            /*\n             * Destroy the listener otherwise this block of code will be called every time\n             * doneRenderingComponent is fired in the future.\n             */\n            doneRenderingComponentListener();\n            this.$timeout.cancel(destroyDoneRenderingComponentListenerTimeout);\n            deferred.resolve(image);\n          });\n        }, 1000);\n      }\n    });\n    /*\n     * Set a timeout to destroy the listener in case there is an error creating the image and\n     * we don't get to destroying it above.\n     */\n    let destroyDoneRenderingComponentListenerTimeout = this.$timeout(() => {\n      // destroy the listener\n      doneRenderingComponentListener();\n    }, 10000);\n    return deferred.promise;\n  }\n\n  /**\n   * The component state has been rendered in the DOM and now we want to create an image\n   * from it.\n   * @param componentState The component state that has been rendered.\n   * @return A promise that will return an image.\n   */\n  generateImageFromComponentStateHelper(componentState) {\n    let deferred = this.$q.defer();\n    let componentService = this.$injector.get(componentState.componentType + 'Service');\n    componentService.generateImageFromRenderedComponentState(componentState).then((image) => {\n      deferred.resolve(image);\n      this.$mdDialog.hide();\n    });\n    return deferred.promise;\n  }\n\n  /**\n   * Get the connected component associated with the component state.\n   * @param componentContent The component content.\n   * @param componentState The component state.\n   * @return A connected component object or null.\n   */\n  getConnectedComponentByComponentState(componentContent, componentState) {\n    let nodeId = componentState.nodeId;\n    let componentId = componentState.componentId;\n    let connectedComponents = componentContent.connectedComponents;\n    for (let connectedComponent of connectedComponents) {\n      if (connectedComponent.nodeId == nodeId && connectedComponent.componentId == componentId) {\n        return connectedComponent;\n      }\n    }\n    return null;\n  }\n\n  showJSONValidMessage() {\n    this.setIsJSONValidMessage(true);\n  }\n\n  showJSONInvalidMessage() {\n    this.setIsJSONValidMessage(false);\n  }\n\n  hideJSONValidMessage() {\n    this.setIsJSONValidMessage(null);\n  }\n\n  /**\n   * Show the message in the toolbar that says \"JSON Valid\" or \"JSON Invalid\".\n   * @param isJSONValid\n   * true if we want to show \"JSON Valid\"\n   * false if we want to show \"JSON Invalid\"\n   * null if we don't want to show anything\n   */\n  setIsJSONValidMessage(isJSONValid) {\n    this.$rootScope.$broadcast('setIsJSONValid', { isJSONValid: isJSONValid });\n  }\n\n  moveObjectUp(objects, index) {\n    if (index !== 0) {\n      const object = objects[index];\n      objects.splice(index, 1);\n      objects.splice(index - 1, 0, object);\n    }\n  }\n\n  moveObjectDown(objects, index) {\n    if (index !== objects.length - 1) {\n      const object = objects[index];\n      objects.splice(index, 1);\n      objects.splice(index + 1, 0, object);\n    }\n  }\n\n  restoreSummernoteCursorPosition(summernoteId) {\n    $('#' + summernoteId).summernote('editor.restoreRange');\n    $('#' + summernoteId).summernote('editor.focus');\n  }\n\n  insertImageIntoSummernote(summernoteId, fullAssetPath, fileName) {\n    $('#' + summernoteId).summernote('insertImage', fullAssetPath, fileName);\n  }\n\n  insertVideoIntoSummernote(summernoteId, fullAssetPath) {\n    const videoElement = document.createElement('video');\n    videoElement.controls = 'true';\n    videoElement.innerHTML = '<source ng-src=\"' + fullAssetPath + '\" type=\"video/mp4\">';\n    $('#' + summernoteId).summernote('insertNode', videoElement);\n  }\n\n  rgbToHex(color, opacity) {\n    let values = color\n      .replace(/rgb?\\(/, '')\n      .replace(/\\)/, '')\n      .replace(/[\\s+]/g, '')\n      .split(',');\n    let a = parseFloat(opacity || 1),\n      r = Math.floor(a * parseInt(values[0]) + (1 - a) * 255),\n      g = Math.floor(a * parseInt(values[1]) + (1 - a) * 255),\n      b = Math.floor(a * parseInt(values[2]) + (1 - a) * 255);\n    return \"#\" +\n      (\"0\" + r.toString(16)).slice(-2) +\n      (\"0\" + g.toString(16)).slice(-2) +\n      (\"0\" + b.toString(16)).slice(-2);\n  }\n  \n  isMatchingPeriods(periodId1, periodId2) {\n    return this.isAllPeriods(periodId1) || this.isAllPeriods(periodId2) || periodId1 == periodId2;\n  }\n\n  isAllPeriods(periodId) {\n    return periodId == null || periodId === -1;\n  }\n}\n\n// Get the last element of the array\nif (!Array.prototype.last) {\n  Array.prototype.last = function() {\n    return this[this.length - 1];\n  };\n}\n\nUtilService.$inject = [\n  '$filter',\n  '$injector',\n  '$mdDialog',\n  '$q',\n  '$rootScope',\n  '$timeout'\n];\n\nexport default UtilService;\n"],"file":"utilService.js"}