{"version":3,"sources":["teacherDataService.es6"],"names":["TeacherDataService","$http","$filter","$q","$rootScope","AnnotationService","ConfigService","NotificationService","ProjectService","TeacherWebSocketService","UtilService","$translate","studentData","componentStatesByWorkgroupId","componentStatesByNodeId","componentStatesByComponentId","currentPeriod","currentWorkgroup","currentStep","currentNode","previousStep","runStatus","periods","nodeGradingSort","studentGradingSort","studentProgressSort","$on","event","args","annotation","handleAnnotationReceived","studentWork","addOrUpdateComponentState","$broadcast","annotations","push","toWorkgroupId","annotationsToWorkgroupId","Array","nodeId","annotationsByNodeId","setAnnotations","exportType","selectedNodes","exportURL","getConfigParam","runId","getRunId","params","getStudentWork","getAnnotations","getEvents","components","retrieveStudentData","httpParams","method","url","then","result","data","window","location","href","deferred","defer","promise","resolve","context","componentId","componentType","category","projectId","newEvent","getProjectId","workgroupId","getWorkgroupId","clientSaveTime","Date","parse","type","events","angular","toJson","headers","$","param","savedEvents","periodId","getAllRelatedComponents","getNodeIdsAndComponentIds","concat","getConnectedComponentsIfNecessary","connectedComponents","component","componentContent","getComponentByNodeIdAndComponentId","isConnectedComponentStudentDataRequired","connectedComponent","length","onlyGetLatest","studentWorkList","studentDataURL","resultData","componentStates","componentState","sort","sortByServerSaveTime","allEvents","eventsByWorkgroupId","eventsByNodeId","eventWorkgroupId","eventNodeId","annotationWorkgroupId","annotationNodeId","componentStateWorkgroupId","found","w","cs","id","componentStateNodeId","n","c","runStatusURL","initializePeriods","componentIds","latestComponentState","getComponentStatesByWorkgroupIdAndNodeId","componentStateComponentId","componentStatesForWorkgroup","getComponentStatesByWorkgroupId","componentRevisionCounter","componentsFound","key","revisionCounter","csb","reverse","getComponentStatesByNodeId","filter","indexOf","getComponentStatesByComponentId","getEventsByWorkgroupId","getEventsByNodeId","eventType","e","isMatchingPeriods","getAnnotationsToWorkgroupId","getAnnotationsByNodeId","getPeriods","allPeriodsOption","periodName","unshift","mergedPeriods","runStatusPeriods","period","runStatusPeriod","tempRunStatusPeriod","setCurrentPeriod","previousPeriod","getCurrentWorkgroup","workgroupPeriod","setCurrentWorkgroup","workgroup","step","node","getNodeById","setCurrentNode","previousCurrentNode","isGroupNode","previousNode","nodeToExit","endCurrentNode","setCurrentNodeByNodeId","getTotalScore","nPeriods","nPeriodsPaused","paused","isPaused","updatePausedRunStatusValue","sendRunStatus","pauseScreens","unPauseScreens","saveEvent","status","value","createRunStatus","allPeriodsPaused","l","x","tempPeriod","tempPeriodId","$inject"],"mappings":"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","sourcesContent":["'use strict';\n\nclass TeacherDataService {\n  constructor(\n      $http,\n      $filter,\n      $q,\n      $rootScope,\n      AnnotationService,\n      ConfigService,\n      NotificationService,\n      ProjectService,\n      TeacherWebSocketService,\n      UtilService) {\n    this.$http = $http;\n    this.$filter = $filter;\n    this.$q = $q;\n    this.$rootScope = $rootScope;\n    this.AnnotationService = AnnotationService;\n    this.ConfigService = ConfigService;\n    this.NotificationService = NotificationService;\n    this.ProjectService = ProjectService;\n    this.TeacherWebSocketService = TeacherWebSocketService;\n    this.UtilService = UtilService;\n    this.$translate = this.$filter('translate');\n\n    this.studentData = {\n      componentStatesByWorkgroupId: {},\n      componentStatesByNodeId: {},\n      componentStatesByComponentId: {}\n    };\n\n    this.currentPeriod = null;\n    this.currentWorkgroup = null;\n    this.currentStep = null;\n    this.currentNode = null;\n    this.previousStep = null;\n    this.runStatus = null;\n    this.periods = [];\n    this.nodeGradingSort = 'team';\n    this.studentGradingSort = 'step';\n    this.studentProgressSort = 'team';\n\n    /**\n     * Listen for the 'annotationSavedToServer' event which is fired when\n     * we receive the response from saving an annotation to the server\n     */\n    this.$rootScope.$on('annotationSavedToServer', (event, args) => {\n      if (args) {\n        let annotation = args.annotation;\n        this.handleAnnotationReceived(annotation);\n      }\n    });\n\n    /**\n     * Listen for the 'newAnnotationReceived' event which is fired when\n     * teacher receives a new annotation (usually on a student work) from the server\n     */\n    this.$rootScope.$on('newAnnotationReceived', (event, args) => {\n      if (args) {\n        let annotation = args.annotation;\n        this.handleAnnotationReceived(annotation);\n      }\n    });\n\n    /**\n     * Listen for the 'newStudentWorkReceived' event which is fired when\n     * teacher receives a new student work from the server\n     */\n    this.$rootScope.$on('newStudentWorkReceived', (event, args) => {\n      if (args) {\n        let studentWork = args.studentWork;\n        this.addOrUpdateComponentState(studentWork);\n        this.$rootScope.$broadcast('studentWorkReceived', {studentWork: studentWork});\n      }\n    });\n  }\n\n  handleAnnotationReceived(annotation) {\n    this.studentData.annotations.push(annotation);\n\n    let toWorkgroupId = annotation.toWorkgroupId;\n    if (this.studentData.annotationsToWorkgroupId[toWorkgroupId] == null) {\n      this.studentData.annotationsToWorkgroupId[toWorkgroupId] = new Array();\n    }\n    this.studentData.annotationsToWorkgroupId[toWorkgroupId].push(annotation);\n\n    let nodeId = annotation.nodeId;\n    if (this.studentData.annotationsByNodeId[nodeId] == null) {\n      this.studentData.annotationsByNodeId[nodeId] = new Array();\n    }\n    this.studentData.annotationsByNodeId[nodeId].push(annotation);\n    this.AnnotationService.setAnnotations(this.studentData.annotations);\n    this.$rootScope.$broadcast('annotationReceived', {annotation: annotation});\n  }\n\n  /**\n   * Get the data for the export and generate the csv file that will be downloaded\n   * @param exportType the type of export\n   */\n  getExport(exportType, selectedNodes) {\n    let exportURL = this.ConfigService.getConfigParam('runDataExportURL');\n    let runId = this.ConfigService.getRunId();\n    exportURL += \"/\" + runId + \"/\" + exportType;\n\n    if (exportType === \"allStudentWork\" || exportType === \"latestStudentWork\") {\n      let params = {};\n      params.runId = this.ConfigService.getRunId();\n      params.getStudentWork = true;\n      params.getAnnotations = true;\n      params.getEvents = false;\n      params.components = selectedNodes;\n\n      return this.retrieveStudentData(params);\n    } else if (exportType === \"events\") {\n      let params = {};\n      params.runId = this.ConfigService.getRunId();\n      params.getStudentWork = false;\n      params.getAnnotations = false;\n      params.getEvents = true;\n      params.components = selectedNodes;\n\n      return this.retrieveStudentData(params);\n    } else if (exportType === \"latestNotebookItems\" || exportType === \"allNotebookItems\") {\n      let httpParams = {\n        method : 'GET',\n        url : exportURL,\n        params : {}\n      };\n\n      return this.$http(httpParams).then((result) => {\n        return result.data;\n      });\n    } else if (exportType === \"notifications\") {\n      let httpParams = {\n        method : 'GET',\n        url : exportURL,\n        params : {}\n      };\n\n      return this.$http(httpParams).then((result) => {\n        return result.data;\n      });\n    } else if (exportType === \"studentAssets\") {\n      window.location.href = exportURL;\n      let deferred = this.$q.defer();\n      let promise = deferred.promise;\n      deferred.resolve([]);\n      return promise;\n    } else if (exportType === \"oneWorkgroupPerRow\") {\n      let params = {};\n      params.runId = this.ConfigService.getRunId();\n      params.getStudentWork = true;\n      params.getAnnotations = true;\n      params.getEvents = true;\n      params.components = selectedNodes;\n      return this.retrieveStudentData(params);\n    } else if (exportType === \"rawData\") {\n      let params = {};\n      params.runId = this.ConfigService.getRunId();\n      params.getStudentWork = true;\n      params.getAnnotations = true;\n      params.getEvents = true;\n      params.components = selectedNodes;\n      return this.retrieveStudentData(params);\n    }\n  }\n\n  /**\n   * Save events that occur in the Classroom Monitor to the server\n   * @param event the event object\n   * @returns a promise\n   */\n  saveEvent(context, nodeId, componentId, componentType, category, event, data, projectId) {\n    let newEvent = {\n      projectId : this.ConfigService.getProjectId(),\n      runId : this.ConfigService.getRunId(),\n      workgroupId : this.ConfigService.getWorkgroupId(),\n      clientSaveTime : Date.parse(new Date()),\n      context : context,\n      nodeId : nodeId,\n      componentId : componentId,\n      type : componentType,\n      category : category,\n      event : event,\n      data : data\n    };\n\n    if (newEvent.projectId == null) {\n      newEvent.projectId = projectId;\n    }\n\n    let events = [newEvent];\n\n    let params = {\n      projectId : this.ConfigService.getProjectId(),\n      runId : this.ConfigService.getRunId(),\n      workgroupId : this.ConfigService.getWorkgroupId(),\n      events : angular.toJson(events)\n    };\n\n    if (params.projectId == null) {\n      params.projectId = projectId;\n    }\n\n    let httpParams = {};\n    httpParams.method = 'POST';\n    httpParams.url = this.ConfigService.getConfigParam('teacherDataURL');\n    httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n    httpParams.data = $.param(params);\n\n    return this.$http(httpParams).then((result) => {\n      let savedEvents = null;\n      if (result != null && result.data != null) {\n        let data = result.data;\n        if (data != null) {\n          // get the saved events\n          savedEvents = data.events;\n        }\n      }\n      return savedEvents;\n    });\n  };\n\n  /**\n   * Retrieve the student data for a node id\n   * @param nodeId the node id\n   * @returns the student data for the node id\n   */\n  retrieveStudentDataByNodeId(nodeId) {\n    const params = {};\n    params.periodId = null;\n    params.workgroupId = null;\n    params.components = this.getAllRelatedComponents(nodeId);\n    params.getAnnotations = false;\n    params.getEvents = false;\n\n    return this.retrieveStudentData(params);\n  }\n\n  getAllRelatedComponents(nodeId) {\n    let components = this.ProjectService.getNodeIdsAndComponentIds(nodeId);\n    components = components.concat(this.getConnectedComponentsIfNecessary(components));\n    return components;\n  }\n\n  getConnectedComponentsIfNecessary(components) {\n    const connectedComponents = [];\n    for (const component of components) {\n      const componentContent = this.ProjectService.getComponentByNodeIdAndComponentId(\n          component.nodeId, component.componentId);\n      if (this.isConnectedComponentStudentDataRequired(componentContent)) {\n        for (const connectedComponent of componentContent.connectedComponents) {\n          connectedComponents.push(connectedComponent);\n        }\n      }\n    }\n    return connectedComponents;\n  }\n\n  isConnectedComponentStudentDataRequired(componentContent) {\n    return componentContent.type === 'Discussion' &&\n        componentContent.connectedComponents != null &&\n        componentContent.connectedComponents.length !== 0;\n  }\n\n  /**\n   * Retrieve the student data for the workgroup id\n   * @param workgroupId the workgroup id\n   * @returns the student data for the workgroup id\n   */\n  retrieveStudentDataByWorkgroupId(workgroupId) {\n    const params = {};\n    params.periodId = null;\n    params.nodeId = null;\n    params.workgroupId = workgroupId;\n    params.toWorkgroupId = workgroupId;\n    params.getAnnotations = false;\n    return this.retrieveStudentData(params);\n  };\n\n  /**\n   * Retrieve the annotations for the run\n   * @returns the annotations for the run\n   */\n  retrieveAnnotations() {\n    let params = {};\n    params.periodId = null;\n    params.nodeId = null;\n    params.workgroupId = null;\n    params.toWorkgroupId = null;\n    params.getStudentWork = false;\n    params.getEvents = false;\n    params.getAnnotations = true;\n    return this.retrieveStudentData(params);\n  };\n\n  retrieveLatestStudentDataByNodeIdAndComponentIdAndPeriodId(nodeId, componentId, periodId) {\n    const params = {\n      runId: this.ConfigService.getRunId(),\n      nodeId: nodeId,\n      componentId: componentId,\n      periodId: periodId,\n      getStudentWork: true,\n      getEvents: false,\n      getAnnotations: false,\n      onlyGetLatest: true\n    };\n    return this.retrieveStudentData(params).then((result) => {\n      return result.studentWorkList;\n    });\n  }\n\n  /**\n   * Retrieve the student data\n   * @param params the params that specify what student data we want\n   * @returns a promise\n   */\n  retrieveStudentData(params) {\n    let studentDataURL = this.ConfigService.getConfigParam('teacherDataURL');\n    params.runId = this.ConfigService.getRunId();\n\n    if (params.getStudentWork == null) {\n      params.getStudentWork = true;\n    }\n\n    if (params.getEvents == null) {\n      params.getEvents = false;\n    }\n\n    if (params.getAnnotations == null) {\n      params.getAnnotations = true;\n    }\n\n    let httpParams = {\n      \"method\": \"GET\",\n      \"url\": studentDataURL,\n      \"params\": params\n    };\n\n    return this.$http(httpParams).then((result) => {\n      const resultData = result.data;\n      if (resultData != null) {\n        if (resultData.studentWorkList != null) {\n          const componentStates = resultData.studentWorkList;\n\n          // populate allComponentStates, componentStatesByWorkgroupId and componentStatesByNodeId objects\n          for (let componentState of componentStates) {\n            this.addOrUpdateComponentState(componentState);\n          }\n        }\n\n        if (resultData.events != null) {\n          // populate allEvents, eventsByWorkgroupId, and eventsByNodeId arrays\n\n          // sort the events by server save time\n          resultData.events.sort(this.UtilService.sortByServerSaveTime);\n\n          this.studentData.allEvents = resultData.events;\n          this.studentData.eventsByWorkgroupId = {};\n          this.studentData.eventsByNodeId = {};\n          for (let event of resultData.events) {\n            const eventWorkgroupId = event.workgroupId;\n            if (this.studentData.eventsByWorkgroupId[eventWorkgroupId] == null) {\n              this.studentData.eventsByWorkgroupId[eventWorkgroupId] = new Array();\n            }\n            this.studentData.eventsByWorkgroupId[eventWorkgroupId].push(event);\n            const eventNodeId = event.nodeId;\n            if (this.studentData.eventsByNodeId[eventNodeId] == null) {\n              this.studentData.eventsByNodeId[eventNodeId] = new Array();\n            }\n            this.studentData.eventsByNodeId[eventNodeId].push(event);\n          }\n        }\n\n        if (resultData.annotations != null) {\n          // populate annotations, annotationsByWorkgroupId, and annotationsByNodeId arrays\n          this.studentData.annotations = resultData.annotations;\n          this.studentData.annotationsToWorkgroupId = {};\n          this.studentData.annotationsByNodeId = {};\n          for (let annotation of resultData.annotations) {\n            const annotationWorkgroupId = annotation.toWorkgroupId;\n            if (!this.studentData.annotationsToWorkgroupId[annotationWorkgroupId]) {\n              this.studentData.annotationsToWorkgroupId[annotationWorkgroupId] = new Array();\n            }\n            this.studentData.annotationsToWorkgroupId[annotationWorkgroupId].push(annotation);\n            const annotationNodeId = annotation.nodeId;\n            if (!this.studentData.annotationsByNodeId[annotationNodeId]) {\n              this.studentData.annotationsByNodeId[annotationNodeId] = new Array();\n            }\n            this.studentData.annotationsByNodeId[annotationNodeId].push(annotation);\n          }\n        }\n        this.AnnotationService.setAnnotations(this.studentData.annotations);\n      }\n      return resultData;\n    });\n  };\n\n  /**\n   * Add ComponentState to local bookkeeping\n   * @param componentState the ComponentState to add\n   */\n  addOrUpdateComponentState(componentState) {\n    const componentStateWorkgroupId = componentState.workgroupId;\n    if (this.studentData.componentStatesByWorkgroupId[componentStateWorkgroupId] == null) {\n      this.studentData.componentStatesByWorkgroupId[componentStateWorkgroupId] = new Array();\n    }\n    let found = false;\n    for (let w = 0; w < this.studentData.componentStatesByWorkgroupId[componentStateWorkgroupId].length; w++) {\n      let cs = this.studentData.componentStatesByWorkgroupId[componentStateWorkgroupId][w];\n      if (cs.id != null && cs.id === componentState.id) {\n        // found the same component id, so just update it in place.\n        this.studentData.componentStatesByWorkgroupId[componentStateWorkgroupId][w] = componentState;\n        found = true;  // remember this so we don't insert later.\n        break;\n      }\n    }\n    if (!found) {\n      this.studentData.componentStatesByWorkgroupId[componentStateWorkgroupId].push(componentState);\n    }\n\n    const componentStateNodeId = componentState.nodeId;\n    if (this.studentData.componentStatesByNodeId[componentStateNodeId] == null) {\n      this.studentData.componentStatesByNodeId[componentStateNodeId] = new Array();\n    }\n    found = false;  // reset\n    for (let n = 0; n < this.studentData.componentStatesByNodeId[componentStateNodeId].length; n++) {\n      let cs = this.studentData.componentStatesByNodeId[componentStateNodeId][n];\n      if (cs.id != null && cs.id === componentState.id) {\n        // found the same component id, so just update it in place.\n        this.studentData.componentStatesByNodeId[componentStateNodeId][n] = componentState;\n        found = true; // remember this so we don't insert later.\n        break;\n      }\n    }\n    if (!found) {\n      this.studentData.componentStatesByNodeId[componentStateNodeId].push(componentState);\n    }\n\n    const componentId = componentState.componentId;\n    if (this.studentData.componentStatesByComponentId[componentId] == null) {\n      this.studentData.componentStatesByComponentId[componentId] = new Array();\n    }\n    found = false;  // reset\n    for (let c = 0; c < this.studentData.componentStatesByComponentId[componentId].length; c++) {\n      let cs = this.studentData.componentStatesByComponentId[componentId][c];\n      if (cs.id != null && cs.id === componentState.id) {\n        // found the same component id, so just update it in place.\n        this.studentData.componentStatesByComponentId[componentId][c] = componentState;\n        found = true; // remember this so we don't insert later.\n        break;\n      }\n    }\n    if (!found) {\n      this.studentData.componentStatesByComponentId[componentId].push(componentState);\n    }\n  };\n\n  /**\n   * Retrieve the run status from the server\n   */\n  retrieveRunStatus() {\n    const runStatusURL = this.ConfigService.getConfigParam('runStatusURL');\n    const runId = this.ConfigService.getConfigParam('runId');\n\n    const params = {\n      runId:runId\n    };\n\n    const httpParams = {};\n    httpParams.method = 'GET';\n    httpParams.url = runStatusURL;\n    httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n    httpParams.params = params;\n\n    return this.$http(httpParams).then((result) => {\n      if (result != null) {\n        const data = result.data;\n        if (data != null) {\n          this.runStatus = data;\n          this.initializePeriods();\n        }\n      }\n    });\n  }\n\n  getComponentStatesByWorkgroupId(workgroupId) {\n    const componentStatesByWorkgroupId =\n        this.studentData.componentStatesByWorkgroupId[workgroupId];\n    if (componentStatesByWorkgroupId != null) {\n      return componentStatesByWorkgroupId;\n    } else {\n      return [];\n    }\n  }\n\n  getComponentStatesByNodeId(nodeId) {\n    const componentStatesByNodeId =\n        this.studentData.componentStatesByNodeId[nodeId];\n    if (componentStatesByNodeId != null) {\n      return componentStatesByNodeId;\n    } else {\n      return [];\n    }\n  }\n\n  /**\n   * Get the component stats for a component id\n   * @param componentId the component id\n   * @returns an array containing component states for a component id\n   */\n  getComponentStatesByComponentId(componentId) {\n    const componentStatesByComponentId =\n        this.studentData.componentStatesByComponentId[componentId];\n    if (componentStatesByComponentId != null) {\n      return componentStatesByComponentId;\n    }\n    return [];\n  }\n\n  getComponentStatesByComponentIds(componentIds) {\n    let componentStatesByComponentId = [];\n    for (const componentId of componentIds) {\n      componentStatesByComponentId = componentStatesByComponentId.concat(\n          this.studentData.componentStatesByComponentId[componentId]);\n    }\n    return componentStatesByComponentId;\n  }\n\n  getLatestComponentStateByWorkgroupIdNodeIdAndComponentId(\n      workgroupId, nodeId, componentId) {\n    let latestComponentState = null;\n    const componentStates = this\n        .getComponentStatesByWorkgroupIdAndNodeId(workgroupId, nodeId);\n    if (componentStates != null) {\n      for (let c = componentStates.length - 1; c >= 0; c--) {\n        const componentState = componentStates[c];\n        if (componentState != null) {\n          const componentStateNodeId = componentState.nodeId;\n          const componentStateComponentId = componentState.componentId;\n          if (nodeId === componentStateNodeId && componentId === componentStateComponentId) {\n            latestComponentState = componentState;\n            break;\n          }\n        }\n      }\n    }\n    return latestComponentState;\n  }\n\n  getLatestComponentStateByWorkgroupIdNodeId(workgroupId, nodeId) {\n    const componentStates =\n        this.getComponentStatesByWorkgroupIdAndNodeId(workgroupId, nodeId);\n    if (componentStates != null) {\n      for (let c = componentStates.length - 1; c >= 0; c--) {\n        const componentState = componentStates[c];\n        if (componentState != null) {\n          const componentStateNodeId = componentState.nodeId;\n          if (nodeId == componentStateNodeId) {\n            return componentState;\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Get the latest component states for a workgroup. Each component state\n   * will be the latest component state for a component.\n   * @param workgroupId the workgroup id\n   * @return an array of latest component states\n   */\n  getLatestComponentStatesByWorkgroupId(workgroupId) {\n    const componentStates = [];\n    if (workgroupId != null) {\n      const componentStatesForWorkgroup =\n          this.getComponentStatesByWorkgroupId(workgroupId);\n      if (componentStatesForWorkgroup != null) {\n        // mapping of component to revision counter\n        const componentRevisionCounter = {};\n\n        /*\n         * used to keep track of the components we have found component\n         * states for already\n         */\n        const componentsFound = {};\n        for (let componentState of componentStatesForWorkgroup) {\n          if (componentState != null) {\n            // get the node id and component id of the component state\n            const nodeId = componentState.nodeId;\n            const componentId = componentState.componentId;\n\n            // generate the component key e.g. \"node2_bb83hs0sd8\"\n            const key = nodeId + \"-\" + componentId;\n\n            if (componentRevisionCounter[key] == null) {\n              // initialize the component revision counter for this component to 1 if there is no entry\n              componentRevisionCounter[key] = 1;\n            }\n\n            const revisionCounter = componentRevisionCounter[key];\n\n            // set the revision counter into the component state\n            componentState.revisionCounter = revisionCounter;\n\n            // increment the revision counter for the component\n            componentRevisionCounter[key] = revisionCounter + 1;\n          }\n        }\n\n        for (let csb = componentStatesForWorkgroup.length - 1; csb >= 0; csb--) {\n          const componentState = componentStatesForWorkgroup[csb];\n\n          if (componentState != null) {\n            // get the node id and component id of the component state\n            const nodeId = componentState.nodeId;\n            const componentId = componentState.componentId;\n\n            // generate the component key e.g. \"node2_bb83hs0sd8\"\n            const key = nodeId + \"-\" + componentId;\n\n            if (componentsFound[key] == null) {\n              /*\n               * we have not found a component state for this\n               * component yet so we will add it to the array\n               * of component states\n               */\n              componentStates.push(componentState);\n\n              /*\n               * add an entry into the components found so that\n               * don't add any more component states from this\n               * component\n               */\n              componentsFound[key] = true;\n            }\n          }\n        }\n\n        /*\n         * reverse the component states array since we have been adding\n         * component states from newest to oldest order but we want them\n         * in oldest to newest order\n         */\n        componentStates.reverse();\n      }\n    }\n    return componentStates;\n  }\n\n  getComponentStatesByWorkgroupIdAndNodeId(workgroupId, nodeId) {\n    const componentStatesByWorkgroupId = this.getComponentStatesByWorkgroupId(workgroupId);\n    const componentStatesByNodeId = this.getComponentStatesByNodeId(nodeId);\n\n    // find the intersect and return it\n    return componentStatesByWorkgroupId.filter((n) => {\n      return componentStatesByNodeId.indexOf(n) != -1;\n    });\n  }\n\n  /**\n   * Get component states for a workgroup id and component id\n   * @param workgroupId the workgroup id\n   * @param componentId the component id\n   * @returns an array of component states\n   */\n  getComponentStatesByWorkgroupIdAndComponentId(workgroupId, componentId) {\n    const componentStatesByWorkgroupId = this.getComponentStatesByWorkgroupId(workgroupId);\n    const componentStatesByComponentId = this.getComponentStatesByComponentId(componentId);\n    return componentStatesByWorkgroupId.filter((n) => {\n      return componentStatesByComponentId.indexOf(n) !== -1;\n    });\n  }\n\n  getComponentStatesByWorkgroupIdAndComponentIds(workgroupId, componentIds) {\n    const componentStatesByWorkgroupId = this.getComponentStatesByWorkgroupId(workgroupId);\n    let componentStatesByComponentId = [];\n    for (const componentId of componentIds) {\n      componentStatesByComponentId =\n          componentStatesByComponentId.concat(this.getComponentStatesByComponentId(componentId));\n    }\n    return componentStatesByWorkgroupId.filter((n) => {\n      return componentStatesByComponentId.indexOf(n) !== -1;\n    });\n  }\n\n  getEventsByWorkgroupId(workgroupId) {\n    const eventsByWorkgroupId = this.studentData.eventsByWorkgroupId[workgroupId];\n    if (eventsByWorkgroupId != null) {\n      return eventsByWorkgroupId;\n    } else {\n      return [];\n    }\n  };\n\n  getEventsByNodeId(nodeId) {\n    const eventsByNodeId = this.studentData.eventsByNodeId[nodeId];\n    if (eventsByNodeId != null) {\n      return eventsByNodeId;\n    } else {\n      return [];\n    }\n  };\n\n  getEventsByWorkgroupIdAndNodeId(workgroupId, nodeId) {\n    const eventsByWorkgroupId = this.getEventsByWorkgroupId(workgroupId);\n    const eventsByNodeId = this.getEventsByNodeId(nodeId);\n\n    // find the intersect and return it\n    return eventsByWorkgroupId.filter((n) => {\n      return eventsByNodeId.indexOf(n) != -1;\n    });\n  };\n\n  /**\n   * Get the latest event by workgroup id, node id, and event type\n   * @param workgroupId the workgroup id\n   * @param nodeId the node id\n   * @param eventType the event type\n   * @return the latest event with the matching parameters or null if\n   * no event is found with the matching parameters\n   */\n  getLatestEventByWorkgroupIdAndNodeIdAndType(workgroupId, nodeId, eventType) {\n    const eventsByWorkgroupId = this.getEventsByWorkgroupId(workgroupId);\n    if (eventsByWorkgroupId != null) {\n      for (let e = eventsByWorkgroupId.length - 1; e >= 0; e--) {\n        const event = eventsByWorkgroupId[e];\n        if (event != null) {\n          if (event.nodeId == nodeId && event.event == eventType) {\n            return event;\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n  getAnnotationsToWorkgroupId(workgroupId) {\n    const annotationsToWorkgroupId = this.studentData.annotationsToWorkgroupId[workgroupId];\n    if (annotationsToWorkgroupId != null) {\n      return annotationsToWorkgroupId;\n    } else {\n      return [];\n    }\n  }\n\n  getAnnotationsByNodeId(nodeId) {\n    const annotationsByNodeId = this.studentData.annotationsByNodeId[nodeId];\n    if (annotationsByNodeId != null) {\n      return annotationsByNodeId;\n    } else {\n      return [];\n    }\n  }\n\n  getAnnotationsByNodeIdAndPeriodId(nodeId, periodId) {\n    const annotationsByNodeId = this.studentData.annotationsByNodeId[nodeId];\n    if (annotationsByNodeId != null) {\n      return annotationsByNodeId.filter((annotation) => {\n        return this.UtilService.isMatchingPeriods(annotation.periodId, periodId);\n      });\n    } else {\n      return [];\n    }\n  } \n\n  getAnnotationsToWorkgroupIdAndNodeId(workgroupId, nodeId) {\n    const annotationsToWorkgroupId = this.getAnnotationsToWorkgroupId(workgroupId);\n    const annotationsByNodeId = this.getAnnotationsByNodeId(nodeId);\n\n    // find the intersect and return it\n    return annotationsToWorkgroupId.filter((n) => {\n      return annotationsByNodeId.indexOf(n) != -1;\n    });\n  }\n\n  /**\n   * Initialize the periods\n   */\n  initializePeriods() {\n    let periods = this.ConfigService.getPeriods();\n    let currentPeriod = null;\n\n    if (periods.length > 1) {\n      let allPeriodsOption = {\n        periodId: -1,\n        periodName: this.$translate('allPeriods')\n      };\n\n      periods.unshift(allPeriodsOption);\n      currentPeriod = periods[1];\n    } else if (periods.length == 1) {\n      currentPeriod = periods[0];\n    }\n\n    let mergedPeriods = [];\n\n    /*\n     * Get the periods from the run status. These periods may not be up to\n     * date so we need to compare them with the periods from the config.\n     */\n    let runStatusPeriods = this.runStatus.periods;\n\n    for (let period of periods) {\n      if (period != null) {\n        let runStatusPeriod = null;\n        if (runStatusPeriods != null) {\n          for (let tempRunStatusPeriod of runStatusPeriods) {\n            if (tempRunStatusPeriod != null) {\n              if (period.periodId == tempRunStatusPeriod.periodId) {\n                runStatusPeriod = tempRunStatusPeriod;\n              }\n            }\n          }\n        }\n\n        if (runStatusPeriod == null) {\n          /*\n           * we did not find the period object in the run status so\n           * we will use the period object from the config\n           */\n          mergedPeriods.push(period);\n        } else {\n          mergedPeriods.push(runStatusPeriod);\n        }\n      }\n    }\n\n    this.periods = mergedPeriods;\n    this.runStatus.periods = mergedPeriods;\n\n    if (currentPeriod) {\n      this.setCurrentPeriod(currentPeriod);\n    }\n  }\n\n  setCurrentPeriod(period) {\n    let previousPeriod = this.currentPeriod;\n    this.currentPeriod = period;\n    let periodId = this.currentPeriod.periodId;\n\n    /*\n     * if currently selected workgroup is in a different period, clear the\n     * currently selected workgroup\n     */\n    let currentWorkgroup = this.getCurrentWorkgroup();\n    if (currentWorkgroup) {\n      let workgroupPeriod = currentWorkgroup.periodId;\n      if (periodId !== -1 && workgroupPeriod !== periodId) {\n        this.setCurrentWorkgroup(null);\n      }\n    }\n\n    this.$rootScope.$broadcast('currentPeriodChanged',\n        {previousPeriod: previousPeriod, currentPeriod: this.currentPeriod});\n  }\n\n  getCurrentPeriod() {\n    return this.currentPeriod;\n  }\n\n  getPeriods() {\n    return this.periods;\n  }\n\n  getRunStatus() {\n    return this.runStatus;\n  }\n\n  setCurrentWorkgroup(workgroup) {\n    this.currentWorkgroup = workgroup;\n    this.$rootScope.$broadcast('currentWorkgroupChanged',\n        {currentWorkgroup: this.currentWorkgroup});\n  }\n\n  getCurrentWorkgroup() {\n    return this.currentWorkgroup;\n  }\n\n  setCurrentStep(step) {\n    this.currentStep = step;\n    this.$rootScope.$broadcast('currentStepChanged',\n        {currentStep: this.currentStep});\n  }\n\n  getCurrentStep() {\n    return this.currentStep;\n  }\n\n  /**\n   * Get the current node\n   * @returns the current node object\n   */\n  getCurrentNode() {\n    return this.currentNode;\n  }\n\n  /**\n   * Get the current node id\n   * @returns the current node id\n   */\n  getCurrentNodeId() {\n    if (this.currentNode != null) {\n      return this.currentNode.id;\n    }\n    return null;\n  }\n\n  /**\n   * Set the current node\n   * @param nodeId the node id\n   */\n  setCurrentNodeByNodeId(nodeId) {\n    if (nodeId != null) {\n      let node = this.ProjectService.getNodeById(nodeId);\n      this.setCurrentNode(node);\n    }\n  }\n\n  /**\n   * Set the current node\n   * @param node the node object\n   */\n  setCurrentNode(node) {\n    let previousCurrentNode = this.currentNode;\n    if (previousCurrentNode !== node) {\n      if (previousCurrentNode &&\n          !this.ProjectService.isGroupNode(previousCurrentNode.id)) {\n        this.previousStep = previousCurrentNode;\n      }\n\n      this.currentNode = node;\n      this.$rootScope.$broadcast('currentNodeChanged',\n          {previousNode: previousCurrentNode, currentNode: this.currentNode});\n    }\n  }\n\n  /**\n   * End the current node\n   */\n  endCurrentNode() {\n    const previousCurrentNode = this.currentNode;\n    if (previousCurrentNode != null) {\n      this.$rootScope.$broadcast('exitNode', {nodeToExit: previousCurrentNode});\n    }\n  }\n\n  /**\n   * End the current node and set the current node\n   * @param nodeId the node id of the new current node\n   */\n  endCurrentNodeAndSetCurrentNodeByNodeId(nodeId) {\n    this.endCurrentNode();\n    this.setCurrentNodeByNodeId(nodeId);\n  }\n\n  /**\n   * Get the total score for a workgroup\n   * @param workgroupId the workgroup id\n   * @returns the total score for the workgroup\n   */\n  getTotalScoreByWorkgroupId(workgroupId) {\n    if (this.studentData.annotationsToWorkgroupId != null) {\n      const annotations = this.studentData.annotationsToWorkgroupId[workgroupId];\n      return this.AnnotationService.getTotalScore(annotations, workgroupId);\n    }\n    return null;\n  }\n\n  /**\n   * Get the run status\n   * @returns the run status object\n   */\n  getRunStatus() {\n    return this.runStatus;\n  }\n\n  /**\n   * Check if any period in the run is paused\n   * @returns Boolean whether any periods are paused\n   */\n  isAnyPeriodPaused(periodId) {\n    let runStatus = this.runStatus;\n\n    if (runStatus && runStatus.periods) {\n      let periods = runStatus.periods;\n      let nPeriods = periods.length;\n      let nPeriodsPaused = 0;\n      for (let period of periods) {\n        if (period != null) {\n          if (period.paused) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Check if the given period is paused\n   * @param periodId the id for a period\n   * @returns Boolean whether the period is paused or not\n   */\n  isPeriodPaused(periodId) {\n    let isPaused = false;\n    let runStatus = this.runStatus;\n\n    if (runStatus && runStatus.periods) {\n      let periods = runStatus.periods;\n      let nPeriods = periods.length;\n      let nPeriodsPaused = 0;\n\n      for (let period of periods) {\n        if (period != null) {\n          isPaused = period.paused;\n          if (periodId == period.periodId) {\n            // we have found the period we are looking for\n            break;\n          } else {\n            if (isPaused) {\n              nPeriodsPaused++;\n            } else {\n              break;\n            }\n          }\n        }\n      }\n\n      if (periodId === -1 && nPeriods === nPeriodsPaused) {\n        isPaused = true;\n      }\n    }\n    return isPaused;\n  }\n\n  /**\n   * The pause screen status was changed for the given periodId. Update period accordingly.\n   * @param periodId the id of the period to toggle\n   * @param isPaused Boolean whether the period should be paused or not\n   */\n  pauseScreensChanged(periodId, isPaused) {\n    this.updatePausedRunStatusValue(periodId, isPaused);\n    this.sendRunStatus().then(() => {\n      if (isPaused) {\n        this.TeacherWebSocketService.pauseScreens(periodId);\n      } else {\n        this.TeacherWebSocketService.unPauseScreens(periodId);\n      }\n    });\n    const context = \"ClassroomMonitor\", nodeId = null, componentId = null, componentType = null,\n      category = \"TeacherAction\", data = { periodId: periodId };\n    let event = \"pauseScreen\";\n    if (!isPaused) {\n      event = \"unPauseScreen\";\n    }\n    this.saveEvent(context, nodeId, componentId, componentType, category, event, data);\n    this.$rootScope.$broadcast('pauseScreensChanged', {periods: this.runStatus.periods});\n  }\n\n  sendRunStatus() {\n    const httpParams = {\n      method: 'POST',\n      url: this.ConfigService.getConfigParam('runStatusURL'),\n      headers: {'Content-Type': 'application/x-www-form-urlencoded'},\n      data: $.param({\n        runId: this.ConfigService.getConfigParam('runId'),\n        status: angular.toJson(this.runStatus)\n      })\n    };\n    return this.$http(httpParams);\n  }\n\n  /**\n   * Create a local run status object to keep track of the run status\n   * @returns the run status object\n   */\n  createRunStatus() {\n    const runStatus = {};\n    runStatus.runId = this.ConfigService.getConfigParam('runId');\n    const periods = this.ConfigService.getPeriods();\n    for (let period of periods) {\n      period.paused = false;\n    }\n    runStatus.periods = periods;\n    this.runStatus = runStatus;\n    return this.runStatus;\n  }\n\n  /**\n   * Update the paused value for a period in our run status\n   * @param periodId the period id\n   * @param value whether the period is paused or not\n   */\n  updatePausedRunStatusValue(periodId, value) {\n    if (this.runStatus == null) {\n      this.createRunStatus();\n    }\n\n    let runStatus = this.runStatus;\n    let periods = runStatus.periods;\n    let allPeriodsPaused = true;\n\n    if (periods) {\n      let l = periods.length, x = l - 1;\n      for (; x > -1; x--) {\n        let tempPeriod = periods[x];\n        let tempPeriodId = tempPeriod.periodId;\n\n        //check if the period id matches the one we need to update or if all periods has been selected\n        if (periodId === tempPeriodId || periodId === -1) {\n          tempPeriod.paused = value;\n        }\n\n        if (tempPeriodId !== -1 && !tempPeriod.paused) {\n          allPeriodsPaused = false;\n        }\n\n        if (tempPeriodId === -1) {\n          tempPeriod.paused = allPeriodsPaused;\n        }\n      }\n    }\n  }\n}\n\nTeacherDataService.$inject = [\n  '$http',\n  '$filter',\n  '$q',\n  '$rootScope',\n  'AnnotationService',\n  'ConfigService',\n  'NotificationService',\n  'ProjectService',\n  'TeacherWebSocketService',\n  'UtilService'\n];\n\nexport default TeacherDataService;\n"],"file":"teacherDataService.js"}