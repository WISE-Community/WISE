{"version":3,"sources":["configService.es6"],"names":["ConfigService","$filter","$http","$location","UtilService","config","$translate","sortClassmateUserInfosAlphabeticallyByName","setPermissions","setClassmateDisplayNames","configURL","get","then","result","configJSON","data","setTimestampDiff","constraints","absURL","$$absUrl","mode","constraintsRegEx","RegExp","match","showProjectPathRegEx","host","location","origin","projectURL","projectPath","console","log","isRunActive","calculateIsRunActive","setConfig","isPreview","myUserInfo","getMyUserInfo","workgroupId","Math","floor","random","retrievalTimestamp","clientTimestamp","Date","getTime","serverTimestamp","timestampDiff","paramName","getConfigParam","window","protocol","getContextPath","periodId","myClassInfo","periods","id","userInfo","getUserInfo","username","classmateUserInfos","getClassmateUserInfos","workgroup","displayNames","getDisplayUsernamesByWorkgroupId","sortedClassmateUserInfos","classmateUserInfo","push","sort","compareClassmateUserInfosByWorkgroupId","a","b","teacherUserInfo","getTeacherUserInfo","sharedTeacherUserInfos","includeSelf","workgroupIds","getWorkgroupId","sortClassmateUserInfosAlphabeticallyByNameHelper","aUsername","toLowerCase","bUsername","role","getTeacherRole","canViewStudentNames","canGradeStudentWork","isSwitchedUser","tempWorkgroupId","workgroupsInPeriod","isStudent","isMatchingPeriods","getWorkgroupsByPeriod","length","getUserInfoByWorkgroupId","studentNames","usernames","getUsernameByWorkgroupId","usernamesSplit","split","indexOfSpace","indexOf","studentFirstName","substring","userIds","usernamesObjects","name","regex","matches","exec","getPermissions","names","getUsernamesByWorkgroupId","l","i","getUserIdsByWorkgroupId","getMode","isRunOwner","isRunSharedTeacher","getSharedTeacherUserInfos","sharedTeacherUserInfo","getSharedTeacherRole","content","contentString","JSON","stringify","firstNames","getStudentFirstNamesByWorkgroupId","replace","join","parse","avatarColors","modulo","getLibraryProjectsURL","reverse","includeHost","projectBaseURL","html","assetsDirectoryPathIncludingHost","getProjectAssetsDirectoryPath","assetsDirectoryPathIncludingHostRegEx","assetsDirectoryPathNotIncludingHost","assetsDirectoryPathNotIncludingHostRegEx","ownedProjects","sharedProjects","authorableProjects","concat","sortByProjectId","projectA","projectB","projectIdA","projectIdB","currentTime","convertToClientTimestamp","startTime","endTime","$inject"],"mappings":"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","sourcesContent":["'use strict';\n\nclass ConfigService {\n  constructor($filter, $http, $location, UtilService) {\n    this.$filter = $filter;\n    this.$http = $http;\n    this.$location = $location;\n    this.UtilService = UtilService;\n    this.config = null;\n    this.$translate = this.$filter('translate');\n  }\n\n  setConfig(config) {\n    this.config = config;\n    this.sortClassmateUserInfosAlphabeticallyByName();\n    this.setPermissions();\n    this.setClassmateDisplayNames();\n  }\n\n  retrieveConfig(configURL) {\n    return this.$http.get(configURL).then((result) => {\n      const configJSON = result.data;\n      this.setTimestampDiff(configJSON);\n\n      let constraints = true;\n\n      const absURL = this.$location.$$absUrl;\n\n      if (configJSON.mode === 'preview') {\n        // constraints can only be disabled using the url in preview mode\n\n        // regex to match constraints=false in the url\n        const constraintsRegEx = new RegExp(\"constraints=false\", 'gi');\n\n        if (absURL != null && absURL.match(constraintsRegEx)) {\n          // the url contains constraints=false\n          constraints = false;\n        }\n      }\n\n      // set the constraints value into the config so we can access it later\n      configJSON.constraints = constraints;\n\n      // regex to match showProjectPath=true in the url\n      const showProjectPathRegEx = new RegExp(\"showProjectPath=true\", 'gi');\n\n      if (absURL != null && absURL.match(showProjectPathRegEx)) {\n        // the url contains showProjectPath=true\n        const host = location.origin;\n        const projectURL = configJSON.projectURL;\n        const projectPath = host + projectURL;\n        console.log(projectPath);\n      }\n\n      configJSON.isRunActive = this.calculateIsRunActive(configJSON);\n\n      this.setConfig(configJSON);\n\n      if (this.isPreview()) {\n        const myUserInfo = this.getMyUserInfo();\n        if (myUserInfo != null) {\n          // set the workgroup id to a random integer between 1 and 100\n          myUserInfo.workgroupId = Math.floor(100 * Math.random()) + 1;\n        }\n      }\n\n      return configJSON;\n    });\n  }\n\n  setTimestampDiff(configJSON) {\n    if (configJSON.retrievalTimestamp != null) {\n      const clientTimestamp = new Date().getTime();\n      const serverTimestamp = configJSON.retrievalTimestamp;\n      const timestampDiff = clientTimestamp - serverTimestamp;\n      configJSON.timestampDiff = timestampDiff;\n    } else {\n      configJSON.timestampDiff = 0;\n    }\n  }\n\n  getConfigParam(paramName) {\n    if (this.config !== null) {\n      return this.config[paramName];\n    } else {\n      return null;\n    }\n  }\n\n  getAchievementsURL() {\n    return this.getConfigParam('achievementURL');\n  }\n\n  getCRaterRequestURL() {\n    return this.getConfigParam('cRaterRequestURL');\n  }\n\n  getMainHomePageURL() {\n    return this.getConfigParam('mainHomePageURL');\n  }\n\n  getNotificationURL() {\n    return this.getConfigParam('notificationURL');\n  }\n\n  getRunId() {\n    return this.getConfigParam('runId');\n  }\n\n  getProjectId() {\n    return this.getConfigParam('projectId');\n  }\n\n  getSessionLogOutURL() {\n    return this.getConfigParam('sessionLogOutURL');\n  }\n\n  getStudentAssetsURL() {\n    return this.getConfigParam('studentAssetsURL');\n  }\n\n  getStudentStatusURL() {\n    return this.getConfigParam('studentStatusURL');\n  }\n\n  getStudentMaxTotalAssetsSize() {\n    return this.getConfigParam('studentMaxTotalAssetsSize');\n  }\n\n  getStudentNotebookURL() {\n    return this.getConfigParam('studentNotebookURL');\n  }\n\n  getStudentUploadsBaseURL() {\n    return this.getConfigParam('studentUploadsBaseURL');\n  }\n\n  getUserInfo() {\n    return this.getConfigParam('userInfo');\n  }\n\n  getWebSocketURL() {\n    return window.location.protocol + \"//\" + window.location.host +\n        this.getContextPath() + \"/websocket\";\n  }\n\n  getWISEBaseURL() {\n    return this.getConfigParam('wiseBaseURL');\n  }\n\n  getLocale() {\n    return this.getConfigParam('locale') || 'en';\n  }\n\n  getMode() {\n    return this.getConfigParam('mode');\n  }\n\n  getContextPath() {\n    return this.getConfigParam('contextPath');\n  }\n\n  /**\n   * Returns the period id of the logged-in user.\n   */\n  getPeriodId() {\n    const myUserInfo = this.getMyUserInfo();\n    if (myUserInfo != null) {\n      return myUserInfo.periodId;\n    }\n    return null;\n  }\n\n  /**\n   * Get the periods\n   * @returns an array of period objects\n   */\n  getPeriods() {\n    const myUserInfo = this.getMyUserInfo();\n    if (myUserInfo != null) {\n      const myClassInfo = myUserInfo.myClassInfo;\n      if (myClassInfo != null) {\n        if (myClassInfo.periods != null) {\n          return myClassInfo.periods;\n        }\n      }\n    }\n    return [];\n  }\n\n  getWorkgroupId() {\n    const myUserInfo = this.getMyUserInfo();\n    if (myUserInfo != null) {\n      return myUserInfo.workgroupId;\n    }\n    return null;\n  }\n\n  /**\n   * Get the user id (aka WISE ID)\n   * @return the user id\n   */\n  getUserId() {\n    const myUserInfo = this.getMyUserInfo();\n    if (myUserInfo != null) {\n      return myUserInfo.id;\n    }\n    return null;\n  }\n\n  getMyUserInfo() {\n    const userInfo = this.getUserInfo();\n    if (userInfo != null) {\n      return userInfo.myUserInfo;\n    }\n    return null;\n  }\n\n  getMyUsername() {\n    const myUserInfo = this.getMyUserInfo();\n    if (myUserInfo != null) {\n      return myUserInfo.username;\n    }\n    return null;\n  }\n\n  getClassmateUserInfos() {\n    const myUserInfo = this.getMyUserInfo();\n    if (myUserInfo != null) {\n      const myClassInfo = myUserInfo.myClassInfo;\n      if (myClassInfo != null) {\n        return myClassInfo.classmateUserInfos;\n      }\n    }\n    return null;\n  }\n\n  setClassmateDisplayNames() {\n    let classmateUserInfos = this.getClassmateUserInfos();\n    if (classmateUserInfos) {\n      for (let workgroup of classmateUserInfos) {\n        workgroup.displayNames = this.getDisplayUsernamesByWorkgroupId(workgroup.workgroupId);\n      }\n    }\n  }\n\n  /**\n   * Get the classmate user infos sorted by ascending workgroup id\n   * @return an array of classmate user info objects sorted by ascending\n   * workgroup id\n   */\n  getClassmateUserInfosSortedByWorkgroupId() {\n    const sortedClassmateUserInfos = [];\n    const classmateUserInfos = this.getClassmateUserInfos();\n    if (classmateUserInfos != null) {\n      for (let classmateUserInfo of classmateUserInfos) {\n        sortedClassmateUserInfos.push(classmateUserInfo);\n      }\n    }\n    // sort the new classmate user infos array by ascending workgroup id\n    sortedClassmateUserInfos.sort(this.compareClassmateUserInfosByWorkgroupId);\n    return sortedClassmateUserInfos;\n  }\n\n  /**\n   * Used to sort the classmate user infos by ascending workgroup id.\n   * Use by calling myArray.sort(compareClassmateUserInfosByWorkgroupId)\n   * @param a a user info object\n   * @param b a user info Object\n   * @return -1 if a comes before b\n   * 1 if a comes after b\n   * 0 if a equals b\n   */\n  compareClassmateUserInfosByWorkgroupId(a, b) {\n    if (a.workgroupId < b.workgroupId) {\n      return -1;\n    } else if (a.workgroupId > b.workgroupId) {\n      return 1;\n    } else {\n      return 0;\n    }\n  }\n\n  getTeacherWorkgroupId() {\n    const teacherUserInfo = this.getTeacherUserInfo();\n    if (teacherUserInfo != null) {\n      return teacherUserInfo.workgroupId;\n    }\n    return null;\n  }\n\n  getTeacherUserInfo() {\n    const myUserInfo = this.getMyUserInfo();\n    if (myUserInfo != null) {\n      const myClassInfo = myUserInfo.myClassInfo;\n      if (myClassInfo != null) {\n        return myClassInfo.teacherUserInfo;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Get the shared teacher user infos for the run\n   */\n  getSharedTeacherUserInfos() {\n    const myUserInfo = this.getMyUserInfo();\n    if (myUserInfo != null) {\n      const myClassInfo = myUserInfo.myClassInfo;\n      if (myClassInfo != null) {\n        return myClassInfo.sharedTeacherUserInfos;\n      }\n    }\n    return null;\n  }\n\n  getClassmateWorkgroupIds(includeSelf) {\n    const workgroupIds = [];\n    if (includeSelf) {\n      workgroupIds.push(this.getWorkgroupId());\n    }\n    const classmateUserInfos = this.getClassmateUserInfos();\n    if (classmateUserInfos != null) {\n      for (let classmateUserInfo of classmateUserInfos) {\n        if (classmateUserInfo != null) {\n          const workgroupId = classmateUserInfo.workgroupId;\n\n          if (workgroupId != null) {\n            workgroupIds.push(workgroupId);\n          }\n        }\n      }\n    }\n    return workgroupIds;\n  }\n\n  sortClassmateUserInfosAlphabeticallyByName() {\n    const classmateUserInfos = this.getClassmateUserInfos();\n    if (classmateUserInfos != null) {\n      classmateUserInfos.sort(this.sortClassmateUserInfosAlphabeticallyByNameHelper);\n    }\n    return classmateUserInfos;\n  }\n\n  sortClassmateUserInfosAlphabeticallyByNameHelper(a, b) {\n    if (a != null && a.username != null && b != null && b.username != null) {\n      const aUsername = a.username.toLowerCase();\n      const bUsername = b.username.toLowerCase();\n      if (aUsername < bUsername) {\n        return -1;\n      } else if (aUsername > bUsername) {\n        return 1;\n      }\n    }\n    return 0;\n  }\n\n  setPermissions() {\n    let role = this.getTeacherRole(this.getWorkgroupId());\n    if (role === 'owner') {\n      // the teacher is the owner of the run and has full access\n      this.config.canViewStudentNames = true;\n      this.config.canGradeStudentWork = true;\n    } else if (role === 'write') {\n      // the teacher is a shared teacher that can grade the student work\n      this.config.canViewStudentNames = true;\n      this.config.canGradeStudentWork = true;\n    } else if (role === 'read') {\n      // the teacher is a shared teacher that can only view the student work\n      this.config.canViewStudentNames = false;\n      this.config.canGradeStudentWork = false;\n    } else {\n      // teacher role is null, so assume we're in student mode\n      this.config.canViewStudentNames = true;\n      this.config.canGradeStudentWork = false;\n    }\n  }\n\n  getPermissions() {\n    // a switched user (admin/researcher user impersonating a teacher) should not be able to view/grade\n    return {\n      canViewStudentNames: this.config.canViewStudentNames && !this.isSwitchedUser(),\n      canGradeStudentWork: this.config.canGradeStudentWork && !this.isSwitchedUser()\n    };\n  }\n\n  getUserInfoByWorkgroupId(workgroupId) {\n    let userInfo = null;\n    if (workgroupId != null) {\n      const myUserInfo = this.getMyUserInfo();\n      if (myUserInfo != null) {\n        const tempWorkgroupId = myUserInfo.workgroupId;\n        if (workgroupId === tempWorkgroupId) {\n          userInfo = myUserInfo;\n        }\n      }\n      if (userInfo == null) {\n        const classmateUserInfos = this.getClassmateUserInfos();\n        if (classmateUserInfos != null) {\n          for (let classmateUserInfo of classmateUserInfos) {\n            if (classmateUserInfo != null) {\n              const tempWorkgroupId = classmateUserInfo.workgroupId;\n              if (workgroupId == tempWorkgroupId) {\n                userInfo = classmateUserInfo;\n                break;\n              }\n            }\n          }\n        }\n      }\n    }\n    return userInfo;\n  }\n\n  getWorkgroupsByPeriod(periodId) {\n    const workgroupsInPeriod = [];\n    const myUserInfo = this.getMyUserInfo();\n    if (this.isStudent() && this.UtilService.isMatchingPeriods(myUserInfo.periodId, periodId)) {\n      workgroupsInPeriod.push(myUserInfo);\n    }\n    for (const classmateUserInfo of this.getClassmateUserInfos()) {\n      if (this.UtilService.isMatchingPeriods(classmateUserInfo.periodId, periodId)) {\n        workgroupsInPeriod.push(classmateUserInfo);\n      }\n    }\n    return workgroupsInPeriod;\n  }\n\n  getNumberOfWorkgroupsInPeriod(periodId) {\n    return this.getWorkgroupsByPeriod(periodId).length;\n  }\n\n  /**\n   * Get the period id for a workgroup id\n   * @param workgroupId the workgroup id\n   * @returns the period id the workgroup id is in\n   */\n  getPeriodIdByWorkgroupId(workgroupId) {\n    if (workgroupId != null) {\n      const userInfo = this.getUserInfoByWorkgroupId(workgroupId);\n      if (userInfo != null) {\n        return userInfo.periodId;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Get the student names\n   * @param workgroupId the workgroup id\n   * @return an array containing the student names\n   */\n  getStudentFirstNamesByWorkgroupId(workgroupId) {\n    const studentNames = [];\n    const usernames = this.getUsernameByWorkgroupId(workgroupId);\n\n    if (usernames != null) {\n      // split the user names string by ':'\n      const usernamesSplit = usernames.split(':');\n\n      if (usernamesSplit != null) {\n        for (let username of usernamesSplit) {\n          const indexOfSpace = username.indexOf(' ');\n          const studentFirstName = username.substring(0, indexOfSpace);\n          studentNames.push(studentFirstName);\n        }\n      }\n    }\n    return studentNames;\n  }\n\n  getUserIdsByWorkgroupId(workgroupId) {\n    if (workgroupId != null) {\n      const userInfo = this.getUserInfoByWorkgroupId(workgroupId);\n      if (userInfo != null) {\n        return userInfo.userIds;\n      }\n    }\n    return [];\n  }\n\n  getUsernameByWorkgroupId(workgroupId) {\n    if (workgroupId != null) {\n      const userInfo = this.getUserInfoByWorkgroupId(workgroupId);\n      if (userInfo != null) {\n        return userInfo.username;\n      }\n    }\n    return null;\n  }\n\n  getDisplayNamesByWorkgroupId(workgroupId) {\n    if (workgroupId != null) {\n      const userInfo = this.getUserInfoByWorkgroupId(workgroupId);\n      if (userInfo != null) {\n        return userInfo.displayNames;\n      }\n    }\n    return null;\n  }\n\n  getUsernamesByWorkgroupId(workgroupId) {\n    let usernamesObjects = [];\n    if (workgroupId != null) {\n      let userInfo = this.getUserInfoByWorkgroupId(workgroupId);\n      if (userInfo != null && userInfo.username != null) {\n        let usernames = userInfo.username.split(':');\n        for (let name of usernames) {\n          let id = \"\";\n          let regex = /(.+) \\((.+)\\)/g;\n          let matches = regex.exec(name);\n          if (matches) {\n            name = matches[1];\n            id = matches[2];\n          }\n          usernamesObjects.push({\n            name: name,\n            id: id\n          });\n        }\n      }\n    }\n    return usernamesObjects;\n  }\n\n  getDisplayUsernamesByWorkgroupId(workgroupId) {\n    let usernames = '';\n    if (workgroupId != null) {\n      if (this.getPermissions().canViewStudentNames) {\n        let names = this.getUsernamesByWorkgroupId(workgroupId);\n        let l = names.length;\n        for (let i = 0; i < l; i++) {\n          let name = names[i].name;\n          usernames += name;\n\n          if (i < (l-1)) {\n            usernames += ', ';\n          }\n        }\n      } else {\n        // current user is not allowed to view student names, so return string with student ids\n        let userIds = this.getUserIdsByWorkgroupId(workgroupId);\n        for (let i = 0; i < userIds.length; i++) {\n          let id = userIds[i];\n          if (i !== 0) {\n            usernames += ', ';\n          }\n          usernames += this.$translate('studentId', {id: id});\n        }\n      }\n    }\n    return usernames;\n  }\n\n  isPreview() {\n    return this.getMode() === 'preview';\n  }\n\n  isAuthoring() {\n    return this.getMode() === 'author';\n  }\n\n  isStudentRun() {\n    return this.getMode() === 'studentRun';\n  }\n  \n  isClassroomMonitor() {\n    return this.getMode() === 'classroomMonitor';\n  }\n\n  /**\n   * Convert a client timestamp to a server timestamp. This is required\n   * in case the client and server clocks are not synchronized.\n   * @param clientTimestamp the client timestamp\n   */\n  convertToServerTimestamp(clientTimestamp) {\n    const timestampDiff = this.getConfigParam('timestampDiff');\n    const serverTimestamp = clientTimestamp - timestampDiff;\n    return serverTimestamp;\n  }\n\n  /**\n   * Convert a server timestamp to a client timestamp. This is required\n   * in case the client and server clocks are not synchronized.\n   * @param serverTimestamp the client timestamp\n   */\n  convertToClientTimestamp(serverTimestamp) {\n    const timestampDiff = this.getConfigParam('timestampDiff');\n    const clientTimestamp = serverTimestamp + timestampDiff;\n    return clientTimestamp;\n  }\n\n  isStudent(workgroupId) {\n    return !this.isRunOwner(workgroupId) && !this.isRunSharedTeacher();\n  }\n\n  /**\n   * Check if the workgroup is the owner of the run\n   * @param workgroupId the workgroup id\n   * @returns whether the workgroup is the owner of the run\n   */\n  isRunOwner(workgroupId = this.getWorkgroupId()) {\n    if (workgroupId != null) {\n      const teacherUserInfo = this.getTeacherUserInfo();\n      if (teacherUserInfo != null) {\n        if (workgroupId == teacherUserInfo.workgroupId) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Check if the workgroup is a shared teacher for the run\n   * @param workgroupId the workgroup id\n   * @returns whether the workgroup is a shared teacher of the run\n   */\n  isRunSharedTeacher(workgroupId = this.getWorkgroupId()) {\n    if (workgroupId != null) {\n      const sharedTeacherUserInfos = this.getSharedTeacherUserInfos();\n      if (sharedTeacherUserInfos != null) {\n        for (let sharedTeacherUserInfo of sharedTeacherUserInfos) {\n          if (sharedTeacherUserInfo != null) {\n            if (workgroupId == sharedTeacherUserInfo.workgroupId) {\n              return true;\n            }\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Get the teacher role for the run\n   * @param workgroupId the workgroup id\n   * @returns the role of the teacher for the run. the possible values are\n   * 'owner', 'write', 'read'\n   */\n  getTeacherRole(workgroupId) {\n    if (this.isRunOwner(workgroupId)) {\n      return 'owner';\n    } else if (this.isRunSharedTeacher(workgroupId)) {\n      return this.getSharedTeacherRole(workgroupId);\n    }\n    return null;\n  }\n\n  /**\n   * Get the shared teacher role for the run\n   * @param workgroupId the workgroup id\n   * @returns the shared teacher role for the run. the possible values are\n   * 'write' or 'read'\n   */\n  getSharedTeacherRole(workgroupId) {\n    if (workgroupId != null) {\n      const sharedTeacherUserInfos = this.getSharedTeacherUserInfos();\n      if (sharedTeacherUserInfos != null) {\n        for (let sharedTeacherUserInfo of sharedTeacherUserInfos) {\n          if (sharedTeacherUserInfo != null) {\n            if (workgroupId == sharedTeacherUserInfo.workgroupId) {\n              return sharedTeacherUserInfo.role;\n            }\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Replace student names in the content.\n   * For example, we will replace instances of {{firstStudentFirstName}}\n   * with the actual first name of the first student in the workgroup.\n   * @param content a content object or string\n   * @return an updated content object or string\n   */\n  replaceStudentNames(content) {\n    if (content != null) {\n      let contentString = content;\n      if (typeof content === 'object') {\n        contentString = JSON.stringify(content);\n      }\n      if (contentString != null) {\n        const workgroupId = this.getWorkgroupId();\n        const firstNames = this.getStudentFirstNamesByWorkgroupId(workgroupId);\n\n        if (firstNames.length >= 1) {\n          /*\n           * there are 1 or more students in the workgroup so we can\n           * replace the first student first name with the actual\n           * name\n           */\n          contentString = contentString.replace(new RegExp('{{firstStudentFirstName}}', 'gi'), firstNames[0]);\n\n          /*\n           * there are 1 or more students in the workgroup so we can\n           * replace the student first names with the actual names\n           */\n          contentString = contentString.replace(new RegExp('{{studentFirstNames}}', 'gi'), firstNames.join(\", \"));\n        }\n\n        if (firstNames.length >= 2) {\n          /*\n           * there are 2 or more students in the workgroup so we can\n           * replace the second student first name with the actual\n           * name\n           */\n          contentString = contentString.replace(new RegExp('{{secondStudentFirstName}}', 'gi'), firstNames[1]);\n        }\n\n        if (firstNames.length >= 3) {\n          /*\n           * there are 3 or more students in the workgroup so we can\n           * replace the third student first name with the actual\n           * name\n           */\n          contentString = contentString.replace(new RegExp('{{thirdStudentFirstName}}', 'gi'), firstNames[2]);\n        }\n      }\n\n      if (typeof content === 'object') {\n        // convert the content string back into an object\n        content = JSON.parse(contentString);\n      } else if (typeof content === 'string') {\n        // the content was a string so we can just use the content string\n        content = contentString;\n      }\n    }\n    return content;\n  }\n\n  getAvatarColorForWorkgroupId(workgroupId) {\n    const avatarColors = ['#E91E63', '#9C27B0', '#CDDC39', '#2196F3', '#FDD835', '#43A047', '#795548', '#EF6C00', '#C62828', '#607D8B'];\n    const modulo = workgroupId % 10;\n    return avatarColors[modulo];\n  }\n\n  /**\n   * Get the library projects\n   */\n  getLibraryProjects() {\n    const getLibraryProjectsURL = this.getConfigParam('getLibraryProjectsURL');\n\n    if (getLibraryProjectsURL != null) {\n      // request the list of library projects\n      return this.$http.get(getLibraryProjectsURL).then((result) => {\n        const data = result.data;\n        if (data != null) {\n          // reverse the list so that it is ordered newest to oldest\n          data.reverse();\n        }\n        return data;\n      });\n    }\n  }\n\n  /**\n   * Get the project assets folder path\n   * @param includeHost whether to include the host in the URL\n   * @return the project assets folder path\n   * e.g.\n   * with host\n   * http://wise.berkeley.edu/wise/curriculum/3/assets\n   * without host\n   * /wise/curriculum/3/assets\n   */\n  getProjectAssetsDirectoryPath(includeHost) {\n    const projectBaseURL = this.getConfigParam('projectBaseURL');\n    if (projectBaseURL != null) {\n      if (includeHost) {\n        const host = window.location.origin;\n\n        /*\n         * get the full path including the host\n         * e.g. http://wise.berkeley.edu/wise/curriculum/3/assets\n         */\n        return host + projectBaseURL + 'assets';\n      } else {\n        /*\n         * get the full path not including the host\n         * e.g. /wise/curriculum/3/assets\n         */\n        return projectBaseURL + 'assets';\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Remove the absolute asset paths\n   * e.g.\n   * <img src='https://wise.berkeley.edu/curriculum/3/assets/sun.png'/>\n   * will be changed to\n   * <img src='sun.png'/>\n   * @param html the html\n   * @return the modified html without the absolute asset paths\n   */\n  removeAbsoluteAssetPaths(html) {\n    /*\n     * get the assets directory path with the host\n     * e.g.\n     * https://wise.berkeley.edu/wise/curriculum/3/assets/\n     */\n    const includeHost = true;\n    const assetsDirectoryPathIncludingHost = this.getProjectAssetsDirectoryPath(includeHost);\n    const assetsDirectoryPathIncludingHostRegEx = new RegExp(assetsDirectoryPathIncludingHost, 'g');\n\n    /*\n     * get the assets directory path without the host\n     * e.g.\n     * /wise/curriculum/3/assets/\n     */\n    const assetsDirectoryPathNotIncludingHost = this.getProjectAssetsDirectoryPath() + '/';\n    const assetsDirectoryPathNotIncludingHostRegEx = new RegExp(assetsDirectoryPathNotIncludingHost, 'g');\n\n    /*\n     * remove the directory path from the html so that only the file name\n     * remains in asset references\n     * e.g.\n     * <img src='https://wise.berkeley.edu/wise/curriculum/3/assets/sun.png'/>\n     * will be changed to\n     * <img src='sun.png'/>\n     */\n    html = html.replace(assetsDirectoryPathIncludingHostRegEx, '');\n    html = html.replace(assetsDirectoryPathNotIncludingHostRegEx, '');\n    return html;\n  }\n\n  /**\n   * Get the WISE IDs for a workgroup\n   * @param workgroupId get the WISE IDs for this workgroup\n   * @return an array of WISE IDs\n   */\n  getWISEIds(workgroupId) {\n    if (workgroupId != null) {\n      const userInfo = this.getUserInfoByWorkgroupId(workgroupId);\n      if (userInfo != null) {\n        return userInfo.userIds;\n      }\n    }\n    return [];\n  }\n\n  /**\n   * Get all the authorable projects\n   */\n  getAuthorableProjects() {\n    const ownedProjects = this.getConfigParam('projects');\n    const sharedProjects = this.getConfigParam('sharedProjects');\n    let authorableProjects = [];\n    if (ownedProjects != null) {\n      authorableProjects = authorableProjects.concat(ownedProjects);\n    }\n\n    if (sharedProjects != null) {\n      authorableProjects = authorableProjects.concat(sharedProjects);\n    }\n\n    // sort the projects by descending id\n    authorableProjects.sort(this.sortByProjectId);\n    return authorableProjects;\n  }\n\n  /**\n   * Determines whether the current user is logged in as somebody else\n   * @return true iff the user is a switched user\n   */\n  isSwitchedUser() {\n    let myUserInfo = this.getMyUserInfo();\n    if (myUserInfo != null) {\n      if (myUserInfo.isSwitchedUser) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Sort the objects by descending id.\n   * @param projectA an object with an id field\n   * @param projectB an object with an id field\n   * @return 1 if projectA comes before projectB\n   * -1 if projectA comes after projectB\n   * 0 if they are the same\n   */\n  sortByProjectId(projectA, projectB) {\n    const projectIdA = projectA.id;\n    const projectIdB = projectB.id;\n    if (projectIdA < projectIdB) {\n      return 1;\n    } else if (projectIdA > projectIdB) {\n      return -1;\n    } else {\n      return 0;\n    }\n  }\n\n  calculateIsRunActive(configJSON) {\n    const currentTime = new Date().getTime();\n    if (currentTime < this.convertToClientTimestamp(configJSON.startTime)) {\n      return false;\n    } else if (configJSON.endTime != null &&\n        currentTime > this.convertToClientTimestamp(configJSON.endTime)) {\n      return false;\n    }\n    return true;\n  }\n\n  isRunActive() {\n    return this.config.isRunActive;\n  }\n}\n\nConfigService.$inject = [\n  '$filter',\n  '$http',\n  '$location',\n  'UtilService'\n];\n\nexport default ConfigService;\n"],"file":"configService.js"}