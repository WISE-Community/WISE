{"version":3,"sources":["studentDataService.es6"],"names":["StudentDataService","$filter","$http","$injector","$q","$rootScope","AnnotationService","ConfigService","PlanningService","ProjectService","UtilService","$translate","currentNode","previousStep","studentData","stackHistory","visitedNodesHistory","nodeStatuses","runStatus","maxScore","maxPlanningNodeNumber","saveToServerRequestCount","dummyStudentWorkId","$on","event","args","calculateActiveGlobalAnnotationGroups","globalAnnotationGroups","getActiveGlobalAnnotationGroups","map","globalAnnotationGroup","globalAnnotations","annotations","globalAnnotation","data","isGlobal","unGlobalizeConditional","unGlobalizeCriteriaArray","unGlobalizeCriteria","anySatified","unGlobalizeCriteriaResult","evaluateCriteria","unGlobalizedTimestamp","Date","parse","saveAnnotations","allSatisfied","annotation","handleAnnotationReceived","mode","getMode","updateNodeStatuses","isPreview","componentStates","nodeStates","events","username","userId","setAnnotations","populateHistories","studentDataURL","getConfigParam","httpParams","method","url","params","workgroupId","getWorkgroupId","runId","getRunId","getStudentWork","getEvents","getAnnotations","toWorkgroupId","then","result","resultData","studentWorkList","studentWork","componentId","push","project","nodes","length","planningGroupNode","planning","lastestNodeStateForPlanningGroupNode","getLatestNodeStateByNodeId","id","studentModifiedNodes","studentModifiedNode","studentModifiedNodeId","n","ids","parseProject","runStatusURL","headers","nodeId","nodeStatus","getNodes","planningNodes","getPlanningNodes","groups","getGroups","concat","node","isGroupNode","updateNodeStatusByNode","group","depth","getNodeDepth","sort","a","b","getMaxScore","$broadcast","tempNodeStatus","isVisitable","isCompleted","constraintsForNode","getConstraintsForNode","getFlattenedProjectAsNodeIds","indexOf","isVisible","isVisibleResults","isVisitableResults","firstResult","constraintForNode","tempResult","evaluateConstraint","action","isVisibleResult","isVisitableResult","isVisited","isNodeVisited","getNodeStatusByNodeId","setNodeStatusByNodeId","previousIsCompletedValue","progress","getNodeProgressById","icon","getNodeIconByNodeId","latestComponentStatesForNode","getLatestComponentStateByNodeId","latestComponentStateClientSaveTime","clientSaveTime","latestComponentStateServerSaveTime","serverSaveTime","removalCriteria","evaluateNodeConstraint","removalConditional","tempCriteria","criteria","functionName","name","evaluateBranchPathTakenCriteria","evaluateIsVisitedCriteria","evaluateIsVisitedAfterCriteria","evaluateIsRevisedAfterCriteria","evaluateIsVisitedAndRevisedAfterCriteria","evaluateIsCompletedCriteria","evaluateIsCorrectCriteria","evaluateChoiceChosenCriteria","evaluateIsPlanningActivityCompletedCriteria","evaluateScoreCriteria","evaluateUsedXSubmitsCriteria","evaluateNumberOfWordsWrittenCriteria","evaluateAddXNumberOfNotesOnThisStepCriteria","evaluateFillXNumberOfRowsCriteria","getComponentStatesByNodeIdAndComponentId","componentState","isCorrect","planningStepsCreated","planningStepsCompleted","planningStepsCreatedSatisfied","planningStepsCompletedSatisfied","getNodeStatesByNodeId","ns","planningStepCount","nodeState","type","planningNodeTemplateId","expectedFromNodeId","fromNodeId","expectedToNodeId","toNodeId","branchPathTakenEvents","getBranchPathTakenEventsByNodeId","branchPathTakenEvent","isVisitedAfterNodeId","criteriaCreatedTimestamp","isRevisedAfterNodeId","isRevisedAfterComponentId","latestComponentStateForRevisedComponent","getLatestComponentStateByNodeIdAndComponentId","serviceName","has","service","get","choiceChosen","scores","scoreType","latestScoreAnnotation","getLatestScoreAnnotation","scoreValue","getScoreValueFromScoreAnnotation","toString","requiredSubmitCount","manualSubmitCounter","highestSubmitCounter","isSubmit","submitCounter","requiredNumberOfWords","response","numberOfWords","wordCount","requiredNumberOfNotes","notebookService","notebook","getNotebookByWorkgroup","notebookItemsByNodeId","getNotebookItemsByNodeId","e","requiredNumberOfFilledRows","tableHasHeaderRow","requireAllCellsInARowToBeFilled","tableService","hasRequiredNumberOfFilledRows","allItems","notebookItem","updateStackHistory","updateVisitedNodesHistory","index","indexOfNodeId","splice","timestamp","nodeStatesByNodeId","tempNodeId","notebookItemId","component","category","alert","context","componentType","saveEvent","newEvent","createNewEvent","saveToServer","projectId","getProjectId","periodId","getPeriodId","requestToken","generateKey","addComponentState","addNodeState","addEvent","addAnnotation","savedStudentDataResponse","saveToServerSuccess","deferred","defer","resolve","promise","isRunActive","angular","toJson","$","param","savedStudentWorkList","localStudentWorkList","savedStudentWork","l","localStudentWork","savedEvents","localEvents","savedEvent","localEvent","savedAnnotations","localAnnotations","savedAnnotation","localAnnotation","saveStudentStatus","studentStatusURL","getStudentStatusURL","currentNodeId","getCurrentNodeId","getNodeStatuses","projectCompletion","getProjectCompletion","studentStatusJSON","status","studentStatusParams","latestComponentState","getLatestComponentState","allNodeStatesByNodeId","c","componentStateNodeId","componentStateComponentId","studentWorkId","componentStatesByNodeId","componentStatesByNodeIdAndComponentId","eventsByNodeId","eventNodeId","eventComponentId","eventName","getNodeById","isActive","completedItems","completedItemsWithWork","totalItems","totalItemsWithWork","nodeIds","getChildNodeIdsById","groupProgress","hasWork","nodeHasWork","completionPct","Math","round","completionPctWithWork","componentEvents","getEventsByNodeIdAndComponentId","nodeEvents","getEventsByNodeId","getComponentByNodeIdAndComponentId","isGroup","components","getComponentsByNodeId","tempNode","tempComponentId","tempComponent","isComponentCompleted","console","log","setCurrentNode","previousCurrentNode","previousNode","nodeToExit","endCurrentNode","setCurrentNodeByNodeId","nodeClickLocked","strData","strDelimiter","objPattern","RegExp","arrData","arrMatches","exec","strMatchedDelimiter","strMatchedValue","replace","finalValue","floatVal","parseFloat","isNaN","getTotalScore","currentMaxPlanningNodeNumber","getNodeStates","nodeStateNodeId","isPlanning","planningNodeIdRegEx","match","planningNodeNumber","parseInt","latestComponentStates","getComponentStatesByNodeId","completionCriteria","inOrder","tempTimestamp","completionCriterion","tempComponentState","getComponentStateSubmittedAfter","getComponentStateSavedAfter","tempEvent","getVisitEventAfter","onlyGetLatest","p","hasOwnProperty","nodeMaxScore","getMaxScoreForNode","$inject"],"mappings":"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","sourcesContent":["'use strict';\n\nclass StudentDataService {\n  constructor(\n      $filter,\n      $http,\n      $injector,\n      $q,\n      $rootScope,\n      AnnotationService,\n      ConfigService,\n      PlanningService,\n      ProjectService,\n      UtilService) {\n    this.$filter = $filter;\n    this.$http = $http;\n    this.$injector = $injector;\n    this.$q = $q;\n    this.$rootScope = $rootScope;\n    this.AnnotationService = AnnotationService;\n    this.ConfigService = ConfigService;\n    this.PlanningService = PlanningService;\n    this.ProjectService = ProjectService;\n    this.UtilService = UtilService;\n    this.$translate = this.$filter('translate');\n    this.currentNode = null;\n    this.previousStep = null;\n    this.studentData = null;\n    this.stackHistory = [];  // array of node id's\n    this.visitedNodesHistory = [];\n    this.nodeStatuses = {};\n    this.runStatus = null;\n    this.maxScore = null;\n\n    this.maxPlanningNodeNumber = 0;\n\n    /*\n     * A counter to keep track of how many saveToServer requests we have\n     * made that we haven't received a response for yet. When this value\n     * goes back down to 0, we will send update the student status and then\n     * save it to the server.\n     */\n    this.saveToServerRequestCount = 0;\n\n    /*\n     * A dummy student work id that is used in preview mode when we simulate\n     * saving of student data.\n     */\n    this.dummyStudentWorkId = 1;\n\n    // listen for node status changes\n    this.$rootScope.$on('nodeStatusesChanged', (event, args) => {\n      // calculate active global annotations and group them by group name as needed\n      this.AnnotationService.calculateActiveGlobalAnnotationGroups();\n\n      // go through the global annotations and see if they can be un-globalized by checking if their criterias have been met.\n      let globalAnnotationGroups = this.AnnotationService.getActiveGlobalAnnotationGroups();\n      globalAnnotationGroups.map((globalAnnotationGroup) => {\n        let globalAnnotations = globalAnnotationGroup.annotations;\n        globalAnnotations.map((globalAnnotation) => {\n          if (globalAnnotation.data != null && globalAnnotation.data.isGlobal) {\n            let unGlobalizeConditional = globalAnnotation.data.unGlobalizeConditional;\n            let unGlobalizeCriteriaArray = globalAnnotation.data.unGlobalizeCriteria;\n            if (unGlobalizeCriteriaArray != null) {\n              if (unGlobalizeConditional === \"any\") {\n                // at least one criteria in unGlobalizeCriteriaArray must be satisfied in any order before un-globalizing this annotation\n                let anySatified = false;\n                for (let unGlobalizeCriteria of unGlobalizeCriteriaArray) {\n                  let unGlobalizeCriteriaResult = this.evaluateCriteria(unGlobalizeCriteria);\n                  anySatified = anySatified || unGlobalizeCriteriaResult;\n                }\n                if (anySatified) {\n                  globalAnnotation.data.unGlobalizedTimestamp = Date.parse(new Date());  // save when criteria was satisfied\n                  this.saveAnnotations([globalAnnotation]);  // save changes to server\n                }\n              } else if (unGlobalizeConditional === \"all\") {\n                // all criteria in unGlobalizeCriteriaArray must be satisfied in any order before un-globalizing this annotation\n                let allSatisfied = true;\n                for (let unGlobalizeCriteria of unGlobalizeCriteriaArray) {\n                  let unGlobalizeCriteriaResult = this.evaluateCriteria(unGlobalizeCriteria);\n                  allSatisfied = allSatisfied && unGlobalizeCriteriaResult;\n                }\n                if (allSatisfied) {\n                  globalAnnotation.data.unGlobalizedTimestamp = Date.parse(new Date());  // save when criteria was satisfied\n                  this.saveAnnotations([globalAnnotation]);  // save changes to server\n                }\n              }\n            }\n          }\n        });\n      })\n    });\n\n    /**\n     * Listen for the 'newAnnotationReceived' event which is fired when\n     * student receives a new annotation from the server\n     */\n    this.$rootScope.$on('newAnnotationReceived', (event, args) => {\n      if (args) {\n        // get the annotation that was saved to the server\n        let annotation = args.annotation;\n        this.handleAnnotationReceived(annotation);\n      }\n    });\n\n    this.$rootScope.$on('notebookUpdated', (event, args) => {\n      const mode = this.ConfigService.getMode();\n      if (mode === 'student' || mode === 'preview') {\n        this.updateNodeStatuses();\n      }\n    });\n  }\n\n  retrieveStudentData() {\n    if (this.ConfigService.isPreview()) {\n      // initialize dummy student data\n      this.studentData = {};\n      this.studentData.componentStates = [];\n      this.studentData.nodeStates = [];\n      this.studentData.events = [];\n      this.studentData.annotations = [];\n      this.studentData.username = this.$translate('PREVIEW_STUDENT');\n      this.studentData.userId = '0';\n\n      // set the annotations into the annotation service\n      this.AnnotationService.setAnnotations(this.studentData.annotations);\n\n      // populate the student history\n      this.populateHistories(this.studentData.events);\n\n      // update the node statuses\n      this.updateNodeStatuses();\n    } else {\n      const studentDataURL = this.ConfigService.getConfigParam('studentDataURL');\n\n      const httpParams = {};\n      httpParams.method = 'GET';\n      httpParams.url = studentDataURL;\n\n      const params = {};\n      params.workgroupId = this.ConfigService.getWorkgroupId();\n      params.runId = this.ConfigService.getRunId();\n      params.getStudentWork = true;\n      params.getEvents = true;\n      params.getAnnotations = true;\n      params.toWorkgroupId = this.ConfigService.getWorkgroupId();\n      httpParams.params = params;\n\n      // make the request for the student data\n      return this.$http(httpParams).then((result) => {\n        const resultData = result.data;\n        if (resultData != null) {\n          this.studentData = {};\n\n          // get student work\n          this.studentData.componentStates = [];\n          this.studentData.nodeStates = [];\n          const studentWorkList = resultData.studentWorkList;\n          for (let studentWork of studentWorkList) {\n            if (studentWork.componentId != null) {\n              this.studentData.componentStates.push(studentWork);\n            } else {\n              this.studentData.nodeStates.push(studentWork);\n            }\n          }\n\n          // Check to see if this Project contains any Planning activities\n          if (this.ProjectService.project.nodes != null && this.ProjectService.project.nodes.length > 0) {\n            // Overload/add new nodes based on student's work in the NodeState for the planning group.\n            for (let planningGroupNode of this.ProjectService.project.nodes) {\n              if (planningGroupNode.planning) {\n                let lastestNodeStateForPlanningGroupNode = this.getLatestNodeStateByNodeId(planningGroupNode.id);\n                if (lastestNodeStateForPlanningGroupNode != null) {\n                  let studentModifiedNodes = lastestNodeStateForPlanningGroupNode.studentData.nodes;\n                  if (studentModifiedNodes != null) {\n                    for (let studentModifiedNode of studentModifiedNodes) {\n                      let studentModifiedNodeId = studentModifiedNode.id;\n                      if (studentModifiedNode.planning) {\n                        // If this is a Planning Node that exists in the project, replace the one in the original project with this one.\n                        for (let n = 0; n < this.ProjectService.project.nodes.length; n++) {\n                          if (this.ProjectService.project.nodes[n].id === studentModifiedNodeId) {\n                            // Only overload the ids. This will allow authors to add more planningNodes during the run if needed.\n                            this.ProjectService.project.nodes[n].ids = studentModifiedNode.ids;\n                          }\n                        }\n                      } else {\n                        // Otherwise, this is an instance of a PlanningNode template, so just append it to the end of the Project.nodes\n                        this.ProjectService.project.nodes.push(studentModifiedNode);\n                      }\n                    }\n                  }\n                }\n              }\n            }\n            // Re-parse the project with the modified changes\n            this.ProjectService.parseProject();\n          }\n\n          this.studentData.events = resultData.events;\n          this.studentData.annotations = resultData.annotations;\n          this.AnnotationService.setAnnotations(this.studentData.annotations);\n          this.populateHistories(this.studentData.events);\n          this.updateNodeStatuses();\n        }\n\n        return this.studentData;\n      });\n    }\n  };\n\n  /**\n   * Retrieve the run status\n   */\n  retrieveRunStatus() {\n    if (this.ConfigService.isPreview()) {\n      this.runStatus = {};\n    } else {\n      const runStatusURL = this.ConfigService.getConfigParam('runStatusURL');\n      const runId = this.ConfigService.getConfigParam('runId');\n\n      const params = {\n        runId:runId\n      };\n\n      const httpParams = {};\n      httpParams.method = 'GET';\n      httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n      httpParams.url = runStatusURL;\n      httpParams.params = params;\n\n      return this.$http(httpParams).then((result) => {\n        if (result != null) {\n          const data = result.data;\n          if (data != null) {\n            this.runStatus = data;\n          }\n        }\n      });\n    }\n  }\n\n  getNodeStatuses() {\n    return this.nodeStatuses;\n  };\n\n  setNodeStatusByNodeId(nodeId, nodeStatus) {\n    if (nodeId != null && nodeStatus != null) {\n      const nodeStatuses = this.nodeStatuses;\n      if (nodeStatuses != null) {\n        nodeStatuses[nodeId] = nodeStatus;\n      }\n    }\n  }\n\n  getNodeStatusByNodeId(nodeId) {\n    const nodeStatuses = this.nodeStatuses;\n    if (nodeId != null && nodeStatuses != null) {\n      return nodeStatuses[nodeId];\n    }\n    return null;\n  };\n\n  updateNodeStatuses() {\n    let nodes = this.ProjectService.getNodes();\n    let planningNodes = this.PlanningService.getPlanningNodes();\n    const groups = this.ProjectService.getGroups();\n\n    if (nodes != null) {\n      if (planningNodes != null) {\n        nodes = nodes.concat(planningNodes);\n      }\n      for (let node of nodes) {\n        if (!this.ProjectService.isGroupNode(node.id)) {\n          this.updateNodeStatusByNode(node);\n        }\n      }\n    }\n\n    let group;\n    if (groups != null) {\n      for (let group of groups) {\n        group.depth = this.ProjectService.getNodeDepth(group.id);\n      }\n\n      // sort by descending depth order (need to calculate completion for lowest level groups first)\n      groups.sort(function(a, b) {\n        return b.depth - a.depth;\n      });\n\n      for (let group of groups) {\n        this.updateNodeStatusByNode(group);\n      }\n    }\n\n    // update max score\n    this.maxScore = this.getMaxScore();\n    this.$rootScope.$broadcast('nodeStatusesChanged');\n  };\n\n  /**\n   * Update the node status for a node\n   * @param node the node to update\n   */\n  updateNodeStatusByNode(node) {\n    if (node != null) {\n      const nodeId = node.id;\n      const tempNodeStatus = {};\n      tempNodeStatus.nodeId = nodeId;\n      tempNodeStatus.isVisitable = true;\n      tempNodeStatus.isCompleted = true;\n\n      // get the constraints that affect this node\n      let constraintsForNode = this.ProjectService.getConstraintsForNode(node);\n\n      if (this.ConfigService.getConfigParam('constraints') == false) {\n        /*\n         * constraints have been disabled, most likely because we are\n         * in preview without constraints mode\n         */\n        constraintsForNode = null;\n      }\n\n      if (constraintsForNode == null || constraintsForNode.length == 0) {\n        if (this.ProjectService.getFlattenedProjectAsNodeIds().indexOf(nodeId) == -1 &&\n          !this.ProjectService.isGroupNode(nodeId)) {\n          // there are no transitions to this node so it is not visible\n          tempNodeStatus.isVisible = false;\n          tempNodeStatus.isVisitable = true;\n        } else {\n          // this node does not have any constraints so it is clickable\n          tempNodeStatus.isVisible = true;\n          tempNodeStatus.isVisitable = true;\n        }\n      } else {\n        const isVisibleResults = [];\n        const isVisitableResults = [];\n\n        let result = false;\n        const firstResult = true;\n\n        for (let constraintForNode of constraintsForNode) {\n          if (constraintForNode != null) {\n            // evaluate the constraint to see if the node can be visited\n            const tempResult = this.evaluateConstraint(node, constraintForNode);\n\n            const action = constraintForNode.action;\n\n            if (action != null) {\n              if (action === 'makeThisNodeNotVisible') {\n                isVisibleResults.push(tempResult);\n              } else if (action === 'makeThisNodeNotVisitable') {\n                isVisitableResults.push(tempResult);\n              } else if (action === 'makeAllNodesAfterThisNotVisible') {\n                isVisibleResults.push(tempResult);\n              } else if (action === 'makeAllNodesAfterThisNotVisitable') {\n                isVisitableResults.push(tempResult);\n              } else if (action === 'makeAllOtherNodesNotVisible') {\n                isVisibleResults.push(tempResult);\n              } else if (action === 'makeAllOtherNodesNotVisitable') {\n                isVisitableResults.push(tempResult);\n              }\n            }\n          }\n        }\n\n        let isVisible = true;\n        let isVisitable = true;\n\n        for (let isVisibleResult of isVisibleResults) {\n          isVisible = isVisible && isVisibleResult;\n        }\n\n        for (let isVisitableResult of isVisitableResults) {\n          isVisitable = isVisitable && isVisitableResult;\n        }\n\n        tempNodeStatus.isVisible = isVisible;\n        tempNodeStatus.isVisitable = isVisitable;\n      }\n\n      tempNodeStatus.isCompleted = this.isCompleted(nodeId);\n      tempNodeStatus.isVisited = this.isNodeVisited(nodeId);\n\n      const nodeStatus = this.getNodeStatusByNodeId(nodeId);\n\n      if (nodeStatus == null) {\n        this.setNodeStatusByNodeId(nodeId, tempNodeStatus);\n      } else {\n        /*\n         * get the previous isCompleted value so that we can later check\n         * if it has changed\n         */\n        const previousIsCompletedValue = this.nodeStatuses[nodeId].isCompleted;\n\n        this.nodeStatuses[nodeId].isVisited = tempNodeStatus.isVisited;\n        this.nodeStatuses[nodeId].isVisible = tempNodeStatus.isVisible;\n        this.nodeStatuses[nodeId].isVisitable = tempNodeStatus.isVisitable;\n        this.nodeStatuses[nodeId].isCompleted = tempNodeStatus.isCompleted;\n\n        if (previousIsCompletedValue == false && tempNodeStatus.isCompleted) {\n          /*\n           * the node status just changed from false to true so we\n           * will fire an event\n           */\n          this.$rootScope.$broadcast('nodeCompleted', { nodeId: nodeId });\n        }\n      }\n\n      this.nodeStatuses[nodeId].progress = this.getNodeProgressById(nodeId);\n      this.nodeStatuses[nodeId].icon = this.ProjectService.getNodeIconByNodeId(nodeId);\n\n      // get the latest component state for the node\n      const latestComponentStatesForNode = this.getLatestComponentStateByNodeId(nodeId);\n      if (latestComponentStatesForNode != null) {\n        // set the latest component state timestamp into the node status\n        this.nodeStatuses[nodeId].latestComponentStateClientSaveTime = latestComponentStatesForNode.clientSaveTime;\n        this.nodeStatuses[nodeId].latestComponentStateServerSaveTime = latestComponentStatesForNode.serverSaveTime;\n      }\n    }\n  };\n\n  /**\n   * Evaluate the constraint\n   * @param node the node\n   * @param constraintForNode the constraint object\n   * @returns whether the node has satisfied the constraint\n   */\n  evaluateConstraint(node, constraintForNode) {\n    if (constraintForNode != null) {\n      const removalCriteria = constraintForNode.removalCriteria;\n      if (removalCriteria != null) {\n        return this.evaluateNodeConstraint(node, constraintForNode);\n      }\n    }\n    return false;\n  };\n\n  /**\n   * Evaluate the node constraint\n   * @param node the node\n   * @param constraintForNode the constraint object\n   * @returns whether the node satisifies the constraint\n   */\n  evaluateNodeConstraint(node, constraintForNode) {\n    let result = false;\n\n    if (constraintForNode != null) {\n      const removalCriteria = constraintForNode.removalCriteria;\n      const removalConditional = constraintForNode.removalConditional;\n      if (removalCriteria == null) {\n        result = true;\n      } else {\n        let firstResult = true;\n        for (let tempCriteria of removalCriteria) {\n          if (tempCriteria != null) {\n            // evaluate the criteria\n            const tempResult = this.evaluateCriteria(tempCriteria);\n\n            if (firstResult) {\n              // this is the first criteria in this for loop\n              result = tempResult;\n              firstResult = false;\n            } else {\n              // this is not the first criteria\n\n              if (removalConditional === 'any') {\n                // any of the criteria can be true to remove the constraint\n                result = result || tempResult;\n              } else {\n                // all the criteria need to be true to remove the constraint\n                result = result && tempResult;\n              }\n            }\n          }\n        }\n      }\n    }\n    return result;\n  };\n\n\n  /**\n   * Evaluate the criteria\n   * @param criteria the criteria\n   * @returns whether the criteria is satisfied or not\n   */\n  evaluateCriteria(criteria) {\n    let result = false;\n    if (criteria != null) {\n      const functionName = criteria.name;\n      if (functionName == null) {\n\n      } else if (functionName === 'branchPathTaken') {\n        result = this.evaluateBranchPathTakenCriteria(criteria);\n      } else if (functionName === 'isVisible') {\n\n      } else if (functionName === 'isVisitable') {\n\n      } else if (functionName === 'isVisited') {\n        result = this.evaluateIsVisitedCriteria(criteria);\n      } else if (functionName === 'isVisitedAfter') {\n        result = this.evaluateIsVisitedAfterCriteria(criteria);\n      } else if (functionName === 'isRevisedAfter') {\n        result = this.evaluateIsRevisedAfterCriteria(criteria);\n      } else if (functionName === 'isVisitedAndRevisedAfter') {\n        result = this.evaluateIsVisitedAndRevisedAfterCriteria(criteria);\n      } else if (functionName === 'isCompleted') {\n        result = this.evaluateIsCompletedCriteria(criteria);\n      } else if (functionName === 'isCorrect') {\n        result = this.evaluateIsCorrectCriteria(criteria);\n      } else if (functionName === 'choiceChosen') {\n        result = this.evaluateChoiceChosenCriteria(criteria);\n      } else if (functionName === 'isPlanningActivityCompleted') {\n        result = this.evaluateIsPlanningActivityCompletedCriteria(criteria);\n      } else if (functionName === 'score') {\n        result = this.evaluateScoreCriteria(criteria);\n      } else if (functionName === 'usedXSubmits') {\n        result = this.evaluateUsedXSubmitsCriteria(criteria);\n      } else if (functionName === 'wroteXNumberOfWords') {\n        result = this.evaluateNumberOfWordsWrittenCriteria(criteria);\n      } else if (functionName === 'addXNumberOfNotesOnThisStep') {\n        result = this.evaluateAddXNumberOfNotesOnThisStepCriteria(criteria);\n      } else if (functionName === 'fillXNumberOfRows') {\n        result = this.evaluateFillXNumberOfRowsCriteria(criteria);\n      } else if (functionName === '') {\n\n      }\n    }\n    return result;\n  };\n\n  /**\n   * Check if the isCompleted criteria was satisfied\n   * @param criteria an isCompleted criteria\n   * @returns whether the criteria was satisfied or not\n   */\n  evaluateIsCompletedCriteria(criteria) {\n    if (criteria != null && criteria.params != null) {\n      const params = criteria.params;\n      const nodeId = params.nodeId;\n      return this.isCompleted(nodeId);\n    }\n    return false;\n  }\n\n  /**\n   * Check if the isCorrect criteria was satisfied\n   * @param criteria an isCorrect criteria\n   * @returns whether the criteria was satisfied or not\n   */\n  evaluateIsCorrectCriteria(criteria) {\n    if (criteria != null && criteria.params != null) {\n      const params = criteria.params;\n      const nodeId = params.nodeId;\n      const componentId = params.componentId;\n\n      if (nodeId != null && componentId != null) {\n        const componentStates = this.getComponentStatesByNodeIdAndComponentId(nodeId, componentId);\n        if (componentStates != null) {\n          for (let componentState of componentStates) {\n            if (componentState != null) {\n              const studentData = componentState.studentData;\n              if (studentData != null) {\n                if (studentData.isCorrect) {\n                  return true;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Check if the isPlanningActivityCompleted criteria was satisfied\n   * @param criteria a isPlanningActivityCompleted criteria\n   * @returns whether the criteria was satisfied or not\n   */\n  evaluateIsPlanningActivityCompletedCriteria(criteria) {\n    let result = false;\n    if (criteria != null && criteria.params != null) {\n      const params = criteria.params;\n\n      // get the group id\n      const nodeId = params.nodeId;\n\n      // get the number of planning steps the student needs to create\n      const planningStepsCreated = params.planningStepsCreated;\n\n      // get whether the student needs to complete all the steps in the activity\n      const planningStepsCompleted = params.planningStepsCompleted;\n\n      let planningStepsCreatedSatisfied = false;\n      let planningStepsCompletedSatisfied = false;\n\n      let planningNodes = [];\n\n      if (planningStepsCreated == null) {\n        // there is no value set so we will regard it as satisfied\n        planningStepsCreatedSatisfied = true;\n      } else {\n        /*\n         * there is a value for number of planning steps that need to be created\n         * so we will check if the student created enough planning steps\n         */\n\n        // get the node states for the activity\n        const nodeStates = this.getNodeStatesByNodeId(nodeId);\n\n        if (nodeStates != null) {\n          for (let ns = nodeStates.length - 1; ns >= 0; ns--) {\n            let planningStepCount = 0;\n            const nodeState = nodeStates[ns];\n            if (nodeState != null) {\n              const studentData = nodeState.studentData;\n              if (studentData != null) {\n                const nodes = studentData.nodes;\n                if (nodes != null) {\n                  for (let node of nodes) {\n                    if (node != null) {\n                      if (node.type === 'node' && node.planningNodeTemplateId != null) {\n                        // we have found a planning step the student created\n                        planningStepCount++;\n                      }\n                    }\n                  }\n\n                  if (planningStepCount >= planningStepsCreated) {\n                    // the student has created a sufficient number of planning steps\n                    planningStepsCreatedSatisfied = true;\n                    planningNodes = nodes;\n                    break;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      if (planningStepsCompleted == null) {\n        planningStepsCompletedSatisfied = true;\n      } else {\n        /*\n         * check if the activity is completed. this checks if all\n         * the children of the activity are completed.\n         */\n        if (this.isCompleted(nodeId)) {\n          planningStepsCompletedSatisfied = true;\n        }\n      }\n\n      if (planningStepsCreatedSatisfied && planningStepsCompletedSatisfied) {\n        result = true;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Check if this branchPathTaken criteria was satisfied\n   * @param criteria a branchPathTaken criteria\n   * @returns whether the branchPathTaken criteria was satisfied\n   */\n  evaluateBranchPathTakenCriteria(criteria) {\n    if (criteria != null && criteria.params != null) {\n      // get the expected from and to node ids\n      const expectedFromNodeId = criteria.params.fromNodeId;\n      const expectedToNodeId = criteria.params.toNodeId;\n\n      // get all the branchPathTaken events from the from node id\n      const branchPathTakenEvents = this.getBranchPathTakenEventsByNodeId(expectedFromNodeId);\n\n      if (branchPathTakenEvents != null) {\n        for (let branchPathTakenEvent of branchPathTakenEvents) {\n          if (branchPathTakenEvent != null) {\n            const data = branchPathTakenEvent.data;\n            if (data != null) {\n              // get the from and to node ids of the event\n              const fromNodeId = data.fromNodeId;\n              const toNodeId = data.toNodeId;\n              if (expectedFromNodeId === fromNodeId && expectedToNodeId === toNodeId) {\n                // the from and to node ids match the ones we are looking for\n                return true;\n              }\n            }\n          }\n        }\n      }\n    }\n    return false;\n  };\n\n  /**\n   * Check if the isVisited criteria was satisfied\n   * @param criteria the isVisited criteria\n   * @returns whether the node id is visited\n   */\n  evaluateIsVisitedCriteria(criteria) {\n    if (criteria != null && criteria.params != null) {\n      const nodeId = criteria.params.nodeId;\n      const events = this.studentData.events;\n      if (events != null) {\n        for (let event of events) {\n          if (event != null) {\n            if (nodeId == event.nodeId && 'nodeEntered' === event.event) {\n              return true;\n            }\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Check if the isVisitedAfter criteria was satisfied\n   * @param criteria the isVisitedAfter criteria\n   * @returns whether the node id is visited after the criteriaCreatedTimestamp\n   */\n  evaluateIsVisitedAfterCriteria(criteria) {\n    if (criteria != null && criteria.params != null) {\n      let isVisitedAfterNodeId = criteria.params.isVisitedAfterNodeId;\n      let criteriaCreatedTimestamp = criteria.params.criteriaCreatedTimestamp;\n\n      let events = this.studentData.events;\n      if (events != null) {\n        for (let event of events) {\n          if (event != null) {\n            if (isVisitedAfterNodeId == event.nodeId &&\n              'nodeEntered' === event.event &&\n              event.clientSaveTime > criteriaCreatedTimestamp) {\n              return true;\n            }\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Check if the isRevisedAfter criteria was satisfied\n   * @param criteria the isRevisedAfter criteria\n   * @returns whether the specified node&component was revisted after the criteriaCreatedTimestamp\n   */\n  evaluateIsRevisedAfterCriteria(criteria) {\n    if (criteria != null && criteria.params != null) {\n      let isRevisedAfterNodeId = criteria.params.isRevisedAfterNodeId;\n      let isRevisedAfterComponentId = criteria.params.isRevisedAfterComponentId;\n      let criteriaCreatedTimestamp = criteria.params.criteriaCreatedTimestamp;\n\n      // the student has entered the node after the criteriaCreatedTimestamp.\n      // now check if student has revised the work after this event\n      let latestComponentStateForRevisedComponent = this.getLatestComponentStateByNodeIdAndComponentId(isRevisedAfterNodeId, isRevisedAfterComponentId);\n      if (latestComponentStateForRevisedComponent.clientSaveTime > criteriaCreatedTimestamp) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Check if the isVisitedAndRevisedAfter criteria was satisfied\n   * @param criteria the isVisitedAndRevisedAfter criteria\n   * @returns whether the specified nodes were visited and specified node&component was revisted after the criteriaCreatedTimestamp\n   */\n  evaluateIsVisitedAndRevisedAfterCriteria(criteria) {\n    if (criteria != null && criteria.params != null) {\n      // get the node id we want to check if was visited\n      let isVisitedAfterNodeId = criteria.params.isVisitedAfterNodeId;\n      let isRevisedAfterNodeId = criteria.params.isRevisedAfterNodeId;\n      let isRevisedAfterComponentId = criteria.params.isRevisedAfterComponentId;\n      let criteriaCreatedTimestamp = criteria.params.criteriaCreatedTimestamp;\n\n      let events = this.studentData.events;\n      if (events != null) {\n        for (let event of events) {\n          if (event != null) {\n            if (isVisitedAfterNodeId == event.nodeId && 'nodeEntered' === event.event && event.clientSaveTime > criteriaCreatedTimestamp) {\n              // the student has entered the node after the criteriaCreatedTimestamp.\n              // now check if student has revised the work after this event\n              let latestComponentStateForRevisedComponent = this.getLatestComponentStateByNodeIdAndComponentId(isRevisedAfterNodeId, isRevisedAfterComponentId);\n              if (latestComponentStateForRevisedComponent.clientSaveTime > event.clientSaveTime) {\n                return true;\n              }\n            }\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Get all the branchPathTaken events by node id\n   * @params fromNodeId the from node id\n   * @returns all the branchPathTaken events from the given node id\n   */\n  getBranchPathTakenEventsByNodeId(fromNodeId) {\n    const branchPathTakenEvents = [];\n    const events = this.studentData.events;\n    if (events != null) {\n      for (let event of events) {\n        if (event != null) {\n          if (fromNodeId === event.nodeId && 'branchPathTaken' === event.event) {\n            // we have found a branchPathTaken event from the from node id\n            branchPathTakenEvents.push(event);\n          }\n        }\n      }\n    }\n    return branchPathTakenEvents;\n  }\n\n  /**\n   * Evaluate the choice chosen criteria\n   * @param criteria the criteria to evaluate\n   * @returns a boolean value whether the criteria was satisfied or not\n   */\n  evaluateChoiceChosenCriteria(criteria) {\n    const serviceName = 'MultipleChoiceService';  // Assume MC component.\n    if (this.$injector.has(serviceName)) {\n      const service = this.$injector.get(serviceName);\n      return service.choiceChosen(criteria);\n    }\n    return false;\n  };\n\n  /**\n   * Evaluate the score criteria\n   * @param criteria the criteria to evaluate\n   * @returns a boolean value whether the criteria was satisfied or not\n   */\n  evaluateScoreCriteria(criteria) {\n    const params = criteria.params;\n    if (params != null) {\n      const nodeId = params.nodeId;\n      const componentId = params.componentId;\n      const scores = params.scores;\n      const workgroupId = this.ConfigService.getWorkgroupId();\n      const scoreType = 'any';\n      if (nodeId != null && componentId != null && scores != null) {\n        const latestScoreAnnotation = this.AnnotationService.getLatestScoreAnnotation(nodeId, componentId, workgroupId, scoreType);\n        if (latestScoreAnnotation != null) {\n          const scoreValue = this.AnnotationService.getScoreValueFromScoreAnnotation(latestScoreAnnotation);\n\n          // check if the score value matches what the criteria is looking for. works when scores is array of integers or integer strings\n          if (scores.indexOf(scoreValue) != -1 || (scoreValue != null && scores.indexOf(scoreValue.toString()) != -1)) {\n            /*\n             * the student has received a score that matches a score\n             * we're looking for\n             */\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  };\n\n  /**\n   * Evaluate the used x submits criteria which requires the student to submit\n   * at least x number of times.\n   * @param criteria the criteria to evaluate\n   * @returns a boolean value whether the student submitted at least x number\n   * of times\n   */\n  evaluateUsedXSubmitsCriteria(criteria) {\n    const params = criteria.params;\n    if (params != null) {\n      const nodeId = params.nodeId;\n      const componentId = params.componentId;\n      const requiredSubmitCount = params.requiredSubmitCount;\n\n      if (nodeId != null && componentId != null) {\n        const componentStates = this.getComponentStatesByNodeIdAndComponentId(nodeId, componentId);\n        if (componentStates != null) {\n          // counter for manually counting the component states with isSubmit=true\n          let manualSubmitCounter = 0;\n\n          // counter for remembering the highest submitCounter value found in studentData objects\n          let highestSubmitCounter = 0;\n\n          /*\n           * We are counting with two submit counters for backwards compatibility.\n           * Some componentStates only have isSubmit=true and do not keep an\n           * updated submitCounter for the number of submits.\n           */\n\n          for (let componentState of componentStates) {\n            if (componentState != null) {\n              if (componentState.isSubmit) {\n                manualSubmitCounter++;\n              }\n              const studentData = componentState.studentData;\n              if (studentData != null) {\n                if (studentData.submitCounter != null) {\n                  if (studentData.submitCounter > highestSubmitCounter) {\n                    /*\n                     * the submit counter in the student data is higher\n                     * than we have previously seen\n                     */\n                    highestSubmitCounter = studentData.submitCounter;\n                  }\n                }\n              }\n            }\n          }\n\n          if (manualSubmitCounter >= requiredSubmitCount || highestSubmitCounter >= requiredSubmitCount) {\n            // the student submitted the required number of times\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Evaluate the number of words written criteria.\n   * @param criteria The criteria to evaluate.\n   * @return A boolean value whether the student wrote the required number of\n   * words.\n   */\n  evaluateNumberOfWordsWrittenCriteria(criteria) {\n    if (criteria != null && criteria.params != null) {\n      const params = criteria.params;\n      const nodeId = params.nodeId;\n      const componentId = params.componentId;\n      const requiredNumberOfWords = params.requiredNumberOfWords;\n\n      if (nodeId != null && componentId != null) {\n        const componentState = this.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n        if (componentState != null) {\n          const studentData = componentState.studentData;\n          const response = studentData.response;\n          const numberOfWords = this.UtilService.wordCount(response);\n          if (numberOfWords >= requiredNumberOfWords) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  evaluateAddXNumberOfNotesOnThisStepCriteria(criteria) {\n    const params = criteria.params;\n    const nodeId = params.nodeId;\n    const requiredNumberOfNotes = params.requiredNumberOfNotes;\n    const notebookService = this.$injector.get('NotebookService');\n    try {\n      const notebook = notebookService.getNotebookByWorkgroup();\n      const notebookItemsByNodeId = this.getNotebookItemsByNodeId(notebook, nodeId);\n      return notebookItemsByNodeId.length >= requiredNumberOfNotes;\n    } catch (e) {\n\n    }\n    return false;\n  }\n\n  evaluateFillXNumberOfRowsCriteria(criteria) {\n    const params = criteria.params;\n    const nodeId = params.nodeId;\n    const componentId = params.componentId;\n    const requiredNumberOfFilledRows = params.requiredNumberOfFilledRows;\n    const tableHasHeaderRow = params.tableHasHeaderRow;\n    const requireAllCellsInARowToBeFilled = params.requireAllCellsInARowToBeFilled;\n    const tableService = this.$injector.get('TableService');\n    const componentState = this.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n    return componentState != null &&\n        tableService.hasRequiredNumberOfFilledRows(componentState, requiredNumberOfFilledRows,\n        tableHasHeaderRow, requireAllCellsInARowToBeFilled);\n  }\n\n  getNotebookItemsByNodeId(notebook, nodeId) {\n    const notebookItemsByNodeId = [];\n    for (let notebookItem of notebook.allItems) {\n      if (notebookItem.nodeId === nodeId) {\n        notebookItemsByNodeId.push(notebookItem);\n      }\n    }\n    return notebookItemsByNodeId;\n  }\n\n  /**\n   * Populate the stack history and visited nodes history\n   * @param events the events\n   */\n  populateHistories(events) {\n    this.stackHistory = [];\n    this.visitedNodesHistory = [];\n\n    if (events != null) {\n      for (let event of events) {\n        if (event != null && event.event === 'nodeEntered') {\n          this.updateStackHistory(event.nodeId);\n          this.updateVisitedNodesHistory(event.nodeId);\n        }\n      }\n    }\n  };\n\n  getStackHistoryAtIndex(index) {\n    if (index < 0) {\n      index = this.stackHistory.length + index;\n    }\n    if (this.stackHistory != null && this.stackHistory.length > 0) {\n      return this.stackHistory[index];\n    }\n    return null;\n  };\n\n  getStackHistory() {\n    return this.stackHistory;\n  };\n\n  updateStackHistory(nodeId) {\n    const indexOfNodeId = this.stackHistory.indexOf(nodeId);\n    if (indexOfNodeId === -1) {\n      this.stackHistory.push(nodeId);\n    } else {\n      this.stackHistory.splice(indexOfNodeId + 1, this.stackHistory.length);\n    }\n  };\n\n  updateVisitedNodesHistory(nodeId) {\n    const indexOfNodeId = this.visitedNodesHistory.indexOf(nodeId);\n    if (indexOfNodeId === -1) {\n      this.visitedNodesHistory.push(nodeId);\n    }\n  };\n\n  getVisitedNodesHistory() {\n    return this.visitedNodesHistory;\n  };\n\n  isNodeVisited(nodeId) {\n    const visitedNodesHistory = this.visitedNodesHistory;\n    if (visitedNodesHistory != null) {\n      const indexOfNodeId = visitedNodesHistory.indexOf(nodeId);\n      if (indexOfNodeId !== -1) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  createComponentState() {\n    const componentState = {};\n    componentState.timestamp = Date.parse(new Date());\n    return componentState;\n  };\n\n  addComponentState(componentState) {\n    if (this.studentData != null && this.studentData.componentStates != null) {\n      this.studentData.componentStates.push(componentState);\n    }\n  };\n\n  addNodeState(nodeState) {\n    if (this.studentData != null && this.studentData.nodeStates != null) {\n      this.studentData.nodeStates.push(nodeState);\n    }\n  };\n\n  /**\n   * Returns all NodeStates\n   * @returns Array of all NodeStates\n   */\n  getNodeStates() {\n    if (this.studentData != null && this.studentData.nodeStates != null) {\n      return this.studentData.nodeStates;\n    }\n    return [];\n  };\n\n  /**\n   * Get all NodeStates for a specific node\n   * @param nodeId id of node\n   * @returns Array of NodeStates for the specified node\n   */\n  getNodeStatesByNodeId(nodeId) {\n    const nodeStatesByNodeId = [];\n    if (this.studentData != null && this.studentData.nodeStates != null) {\n      const nodeStates = this.studentData.nodeStates;\n      for (let nodeState of nodeStates) {\n        if (nodeState != null) {\n          const tempNodeId = nodeState.nodeId;\n          if (nodeId === tempNodeId) {\n            nodeStatesByNodeId.push(nodeState);\n          }\n        }\n      }\n    }\n    return nodeStatesByNodeId;\n  };\n\n  addEvent(event) {\n    if (this.studentData != null && this.studentData.events != null) {\n      this.studentData.events.push(event);\n    }\n  };\n\n  addAnnotation(annotation) {\n    if (this.studentData != null && this.studentData.annotations != null) {\n      this.studentData.annotations.push(annotation);\n    }\n  };\n\n  handleAnnotationReceived(annotation) {\n    this.studentData.annotations.push(annotation);\n    if (annotation.notebookItemId) {\n      this.$rootScope.$broadcast('notebookItemAnnotationReceived', {annotation: annotation});\n    } else {\n      this.$rootScope.$broadcast('annotationReceived', {annotation: annotation});\n    }\n  }\n\n  saveComponentEvent(component, category, event, data) {\n    if (component == null || category == null || event == null) {\n      alert(this.$translate('STUDENT_DATA_SERVICE_SAVE_COMPONENT_EVENT_COMPONENT_CATEGORY_EVENT_ERROR'));\n      return;\n    }\n    const context = \"Component\";\n    const nodeId = component.nodeId;\n    const componentId = component.componentId;\n    const componentType = component.componentType;\n    if (nodeId == null || componentId == null || componentType == null) {\n      alert(this.$translate('STUDENT_DATA_SERVICE_SAVE_COMPONENT_EVENT_NODE_ID_COMPONENT_ID_COMPONENT_TYPE_ERROR'));\n      return;\n    }\n    this.saveEvent(context, nodeId, componentId, componentType, category, event, data);\n  };\n\n  saveVLEEvent(nodeId, componentId, componentType, category, event, data) {\n    if (category == null || event == null) {\n      alert(this.$translate('STUDENT_DATA_SERVICE_SAVE_VLE_EVENT_CATEGORY_EVENT_ERROR'));\n      return;\n    }\n    const context = \"VLE\";\n    this.saveEvent(context, nodeId, componentId, componentType, category, event, data);\n  };\n\n  saveEvent(context, nodeId, componentId, componentType, category, event, data) {\n    const events = [];\n    const newEvent = this.createNewEvent();\n    newEvent.context = context;\n    newEvent.nodeId = nodeId;\n    newEvent.componentId = componentId;\n    newEvent.type = componentType;\n    newEvent.category = category;\n    newEvent.event = event;\n    newEvent.data = data;\n    events.push(newEvent);\n    const componentStates = null;\n    const nodeStates = null;\n    const annotations = null;\n    this.saveToServer(componentStates, nodeStates, events, annotations);\n  };\n\n  /**\n   * Create a new empty event\n   * @return a new empty event\n   */\n  createNewEvent() {\n    const event = {};\n    event.projectId = this.ConfigService.getProjectId();\n    event.runId = this.ConfigService.getRunId();\n    event.periodId = this.ConfigService.getPeriodId();\n    event.workgroupId = this.ConfigService.getWorkgroupId();\n    event.clientSaveTime = Date.parse(new Date());\n    return event;\n  };\n\n  saveNodeStates(nodeStates) {\n    const componentStates = null;\n    const events = null;\n    const annotations = null;\n    this.saveToServer(componentStates, nodeStates, events, annotations);\n  };\n\n\n  saveAnnotations(annotations) {\n    const componentStates = null;\n    const nodeStates = null;\n    const events = null;\n    this.saveToServer(componentStates, nodeStates, events, annotations);\n  };\n\n  saveToServer(componentStates, nodeStates, events, annotations) {\n    /*\n     * increment the request count since we are about to save data\n     * to the server\n     */\n    this.saveToServerRequestCount += 1;\n\n    // merge componentStates and nodeStates into StudentWork before posting\n    const studentWorkList = [];\n    if (componentStates != null && componentStates.length > 0) {\n      for (let componentState of componentStates) {\n        if (componentState != null) {\n          componentState.requestToken = this.UtilService.generateKey(); // use this to keep track of unsaved componentStates.\n          this.addComponentState(componentState);\n          studentWorkList.push(componentState);\n        }\n      }\n    }\n\n    if (nodeStates != null && nodeStates.length > 0) {\n      for (let nodeState of nodeStates) {\n        if (nodeState != null) {\n          nodeState.requestToken = this.UtilService.generateKey(); // use this to keep track of unsaved componentStates.\n          this.addNodeState(nodeState);\n          studentWorkList.push(nodeState);\n        }\n      }\n    }\n\n    if (events != null && events.length > 0) {\n      for (let event of events) {\n        if (event != null) {\n          event.requestToken = this.UtilService.generateKey(); // use this to keep track of unsaved events.\n          this.addEvent(event);\n        }\n      }\n    } else {\n      events = [];\n    }\n\n    if (annotations != null && annotations.length > 0) {\n      for (let annotation of annotations) {\n        if (annotation != null) {\n          annotation.requestToken = this.UtilService.generateKey(); // use this to keep track of unsaved annotations.\n          if (annotation.id == null) {\n            // add to local annotation array if this annotation has not been saved to the server before.\n            this.addAnnotation(annotation);\n          }\n        }\n      }\n    } else {\n      annotations = [];\n    }\n\n    if (this.ConfigService.isPreview()) {\n      const savedStudentDataResponse = {\n        studentWorkList: studentWorkList,\n        events: events,\n        annotations: annotations\n      };\n\n      // if we're in preview, don't make any request to the server but pretend we did\n      this.saveToServerSuccess(savedStudentDataResponse);\n      let deferred = this.$q.defer();\n      deferred.resolve(savedStudentDataResponse);\n      return deferred.promise;\n    } else if (!this.ConfigService.isRunActive()) {\n      return this.$q.defer().promise;\n    } else {\n      // set the workgroup id and run id\n      const params = {};\n      params.projectId = this.ConfigService.getProjectId();\n      params.runId = this.ConfigService.getRunId();\n      params.workgroupId = this.ConfigService.getWorkgroupId();\n      params.studentWorkList = angular.toJson(studentWorkList);\n      params.events = angular.toJson(events);\n      params.annotations = angular.toJson(annotations);\n\n      // get the url to POST the student data\n      const httpParams = {};\n      httpParams.method = 'POST';\n      httpParams.url = this.ConfigService.getConfigParam('studentDataURL');\n      httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n      httpParams.data = $.param(params);\n\n      // make the request to post the student data\n      return this.$http(httpParams).then(\n        result => {\n          // get the local references to the component states that were posted and set their id and serverSaveTime\n          if (result != null && result.data != null) {\n            const savedStudentDataResponse = result.data;\n\n            this.saveToServerSuccess(savedStudentDataResponse);\n\n            return savedStudentDataResponse;\n          }\n        }, result => {\n          // a server error occured\n\n          /*\n           * decrement the request count since this request failed\n           * but is now completed\n           */\n          this.saveToServerRequestCount -= 1;\n\n          return null;\n        }\n      );\n    }\n  };\n\n  saveToServerSuccess(savedStudentDataResponse) {\n    // set dummy serverSaveTime for use if we're in preview mode\n    let serverSaveTime = Date.parse(new Date());\n\n    // handle saved studentWork\n    if (savedStudentDataResponse.studentWorkList) {\n      let savedStudentWorkList = savedStudentDataResponse.studentWorkList;\n      let localStudentWorkList = this.studentData.componentStates;\n      if (this.studentData.nodeStates) {\n        localStudentWorkList = localStudentWorkList.concat(this.studentData.nodeStates);\n      }\n\n      // set the id and serverSaveTime in the local studentWorkList\n      for (let savedStudentWork of savedStudentWorkList) {\n        /*\n         * loop through all the student work that were posted\n         * to find the one with the matching request token\n         */\n        for (let l = localStudentWorkList.length - 1; l >= 0; l--) {\n          const localStudentWork = localStudentWorkList[l];\n          if (localStudentWork.requestToken &&\n            localStudentWork.requestToken === savedStudentWork.requestToken) {\n            localStudentWork.id = savedStudentWork.id;\n            localStudentWork.serverSaveTime = savedStudentWork.serverSaveTime ? savedStudentWork.serverSaveTime : serverSaveTime;\n            localStudentWork.requestToken = null; // requestToken is no longer needed.\n\n            if (this.ConfigService.getMode() == \"preview\" && localStudentWork.id == null) {\n              /*\n               * we are in preview mode so we will set a dummy\n               * student work id into the student work\n               */\n              localStudentWork.id = this.dummyStudentWorkId;\n\n              /*\n               * increment the dummy student work id for the next\n               * student work\n               */\n              this.dummyStudentWorkId++;\n            }\n\n            this.$rootScope.$broadcast('studentWorkSavedToServer', {studentWork: localStudentWork});\n            break;\n          }\n        }\n      }\n    }\n    // handle saved events\n    if (savedStudentDataResponse.events) {\n      const savedEvents = savedStudentDataResponse.events;\n\n      const localEvents = this.studentData.events;\n\n      // set the id and serverSaveTime in the local event\n      for (let savedEvent of savedEvents) {\n        /*\n         * loop through all the events that were posted\n         * to find the one with the matching request token\n         */\n        for (let l = localEvents.length - 1; l >= 0; l--) {\n          const localEvent = localEvents[l];\n          if (localEvent.requestToken &&\n            localEvent.requestToken === savedEvent.requestToken) {\n            localEvent.id = savedEvent.id;\n            localEvent.serverSaveTime = savedEvent.serverSaveTime ? savedEvent.serverSaveTime : serverSaveTime;\n            localEvent.requestToken = null; // requestToken is no longer needed.\n\n            this.$rootScope.$broadcast('eventSavedToServer', {event: localEvent});\n            break;\n          }\n        }\n      }\n    }\n\n    // handle saved annotations\n    if (savedStudentDataResponse.annotations) {\n      const savedAnnotations = savedStudentDataResponse.annotations;\n      const localAnnotations = this.studentData.annotations;\n\n      // set the id and serverSaveTime in the local annotation\n      for (let savedAnnotation of savedAnnotations) {\n        /*\n         * loop through all the events that were posted\n         * to find the one with the matching request token\n         */\n        for (let l = localAnnotations.length - 1; l >= 0; l--) {\n          const localAnnotation = localAnnotations[l];\n          if (localAnnotation.requestToken &&\n            localAnnotation.requestToken === savedAnnotation.requestToken) {\n            localAnnotation.id = savedAnnotation.id;\n            localAnnotation.serverSaveTime = savedAnnotation.serverSaveTime ? savedAnnotation.serverSaveTime : serverSaveTime;\n            localAnnotation.requestToken = null; // requestToken is no longer needed.\n\n            this.$rootScope.$broadcast('annotationSavedToServer', {annotation: localAnnotation});\n            break;\n          }\n        }\n      }\n    }\n\n    /*\n     * decrement the request count since we have received a response to\n     * one of our save requests\n     */\n    this.saveToServerRequestCount -= 1;\n\n    if (this.saveToServerRequestCount == 0) {\n      /*\n       * we have received the reponse to all of the saveToServer requests\n       * so we will now update the student status and save it to the\n       * server\n       */\n      this.updateNodeStatuses();\n      this.saveStudentStatus();\n    }\n  };\n\n  /**\n   * POSTs student status to server\n   * Returns a promise of the POST request\n   */\n  saveStudentStatus() {\n    if (!this.ConfigService.isPreview() && this.ConfigService.isRunActive()) {\n      const studentStatusURL = this.ConfigService.getStudentStatusURL();\n      if (studentStatusURL != null) {\n        const runId = this.ConfigService.getRunId();\n        const periodId = this.ConfigService.getPeriodId();\n        const workgroupId = this.ConfigService.getWorkgroupId();\n        const currentNodeId = this.getCurrentNodeId();\n        const nodeStatuses = this.getNodeStatuses();\n        const projectCompletion = this.getProjectCompletion();\n\n        // create the JSON that will be saved to the database\n        const studentStatusJSON = {};\n        studentStatusJSON.runId = runId;\n        studentStatusJSON.periodId = periodId;\n        studentStatusJSON.workgroupId = workgroupId;\n        studentStatusJSON.currentNodeId = currentNodeId;\n        studentStatusJSON.nodeStatuses = nodeStatuses;\n        studentStatusJSON.projectCompletion = projectCompletion;\n\n        const status = angular.toJson(studentStatusJSON);\n        const studentStatusParams = {};\n        studentStatusParams.runId = runId;\n        studentStatusParams.periodId = periodId;\n        studentStatusParams.workgroupId = workgroupId;\n        studentStatusParams.status = status;\n\n        const httpParams = {};\n        httpParams.method = 'POST';\n        httpParams.url = studentStatusURL;\n        httpParams.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n        httpParams.data = $.param(studentStatusParams);\n\n        return this.$http(httpParams).then(\n          result => {\n            return true;\n          }, result => {\n            return false;\n          }\n        );\n      }\n    }\n  };\n\n  retrieveComponentStates(runId, periodId, workgroupId) {\n\n  };\n\n  getLatestComponentState() {\n    const studentData = this.studentData;\n    if (studentData != null) {\n      const componentStates = studentData.componentStates;\n      if (componentStates != null) {\n        return componentStates[componentStates.length - 1];\n      }\n    }\n    return null;\n  };\n\n  /**\n   * Check whether the component has unsubmitted work\n   * @return boolean whether or not there is unsubmitted work\n   */\n  isComponentSubmitDirty() {\n    let latestComponentState = this.getLatestComponentState();\n    if (latestComponentState && !latestComponentState.isSubmit) {\n      return true;\n    }\n    return false;\n  };\n\n  /**\n   * Get the latest NodeState for the specified node id\n   * @param nodeId the node id\n   * @return the latest node state with the matching node id or null if none are found\n   */\n  getLatestNodeStateByNodeId(nodeId) {\n    let allNodeStatesByNodeId = this.getNodeStatesByNodeId(nodeId);\n    if (allNodeStatesByNodeId != null && allNodeStatesByNodeId.length > 0) {\n      return allNodeStatesByNodeId[allNodeStatesByNodeId.length - 1];\n    }\n    return null;\n  };\n\n  /**\n   * Get the latest component state for the given node id and component\n   * id.\n   * @param nodeId the node id\n   * @param componentId the component id (optional)\n   * @return the latest component state with the matching node id and\n   * component id or null if none are found\n   */\n  getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId) {\n    if (nodeId) {\n      const studentData = this.studentData;\n      if (studentData) {\n        // get the component states\n        const componentStates = studentData.componentStates;\n        if (componentStates) {\n          for (let c = componentStates.length - 1; c >= 0; c--) {\n            const componentState = componentStates[c];\n            if (componentState) {\n              const componentStateNodeId = componentState.nodeId;\n              if (nodeId === componentStateNodeId) {\n                if (componentId) {\n                  const componentStateComponentId = componentState.componentId;\n                  if (componentId === componentStateComponentId) {\n                    return componentState;\n                  }\n                } else {\n                  return componentState;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    return null;\n  };\n\n  /**\n   * Get the latest component state that was a submit\n   * for the given node id and component id.\n   * @param nodeId the node id\n   * @param componentId the component id\n   * @return the latest component state that was a submit with the matching\n   * node id and component id or null if none are found\n   */\n  getLatestSubmitComponentState(nodeId, componentId) {\n    const componentStates = this.studentData.componentStates;\n    for (let c = componentStates.length - 1; c >= 0; c--) {\n      const componentState = componentStates[c];\n      if (componentState.nodeId === nodeId &&\n          componentState.componentId === componentId &&\n          componentState.isSubmit) {\n        return componentState;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Get the student work by specified student work id, which can be a ComponentState or NodeState\n   * @param studentWorkId the student work id\n   * @return an StudentWork or null\n   */\n  getStudentWorkByStudentWorkId(studentWorkId) {\n    if (studentWorkId != null) {\n      const componentStates = this.studentData.componentStates;\n      if (componentStates != null) {\n        for (let componentState of componentStates) {\n          if (componentState != null && componentState.id === studentWorkId) {\n            return componentState;\n          }\n        }\n      }\n\n      const nodeStates = this.studentData.nodeStates;\n      if (nodeStates != null) {\n        for (let nodeState of nodeStates) {\n          if (nodeState != null && nodeState.id === studentWorkId) {\n            return nodeState;\n          }\n        }\n      }\n    }\n    return null;\n  };\n\n  /**\n   * Returns all the component states for this workgroup\n   */\n  getComponentStates() {\n    return this.studentData.componentStates;\n  };\n\n  /**\n   * Get the component states for the given node id\n   * @param nodeId the node id\n   * @return an array of component states for the given node id\n   */\n  getComponentStatesByNodeId(nodeId) {\n    const componentStatesByNodeId = [];\n    if (nodeId != null) {\n      const studentData = this.studentData;\n      if (studentData != null) {\n        const componentStates = studentData.componentStates;\n        if (componentStates != null) {\n          for (let componentState of componentStates) {\n            if (componentState != null) {\n              const componentStateNodeId = componentState.nodeId;\n              if (nodeId == componentStateNodeId) {\n                componentStatesByNodeId.push(componentState);\n              }\n            }\n          }\n        }\n      }\n    }\n    return componentStatesByNodeId;\n  };\n\n  /**\n   * Get the component states for the given node id and component id\n   * @param nodeId the node id\n   * @param componentId the component id\n   * @return an array of component states for the given node id and\n   * component id\n   */\n  getComponentStatesByNodeIdAndComponentId(nodeId, componentId) {\n    const componentStatesByNodeIdAndComponentId = [];\n    if (nodeId != null && componentId != null) {\n      const studentData = this.studentData;\n      if (studentData != null) {\n        const componentStates = studentData.componentStates;\n        if (componentStates != null) {\n          for (let componentState of componentStates) {\n            if (componentState != null) {\n              const componentStateNodeId = componentState.nodeId;\n              const componentStateComponentId = componentState.componentId;\n              if (nodeId == componentStateNodeId &&\n                  componentId == componentStateComponentId) {\n                componentStatesByNodeIdAndComponentId.push(componentState);\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return componentStatesByNodeIdAndComponentId;\n  };\n\n  /**\n   * Get all events\n   * @returns all events for the student\n   */\n  getEvents() {\n    if (this.studentData != null && this.studentData.events != null) {\n      return this.studentData.events;\n    } else {\n      return [];\n    }\n  };\n\n  /**\n   * Get the events for a node id\n   * @param nodeId the node id\n   * @returns the events for the node id\n   */\n  getEventsByNodeId(nodeId) {\n    const eventsByNodeId = [];\n    if (nodeId != null) {\n      if (this.studentData != null && this.studentData.events != null) {\n        const events = this.studentData.events;\n        for (let event of events) {\n          if (event != null) {\n            const eventNodeId = event.nodeId;\n            if (nodeId === eventNodeId) {\n              eventsByNodeId.push(event);\n            }\n          }\n        }\n      }\n    }\n    return eventsByNodeId;\n  };\n\n  /**\n   * Get the events for a component id\n   * @param nodeId the node id\n   * @param componentId the component id\n   * @returns an array of events for the component id\n   */\n  getEventsByNodeIdAndComponentId(nodeId, componentId) {\n    const eventsByNodeId = [];\n    if (nodeId != null) {\n      if (this.studentData != null && this.studentData.events != null) {\n        const events = this.studentData.events;\n        for (let event of events) {\n          if (event != null) {\n            const eventNodeId = event.nodeId;\n            const eventComponentId = event.componentId;\n            if (nodeId === eventNodeId && componentId === eventComponentId) {\n              eventsByNodeId.push(event);\n            }\n          }\n        }\n      }\n    }\n    return eventsByNodeId;\n  };\n\n  /**\n   * Get the node id of the latest node entered event for an active node that\n   * exists in the project. We need to check if the node exists in the project\n   * in case the node has been deleted from the project. We also need to check\n   * that the node is active in case the node has been moved to the inactive\n   * section of the project.\n   * @return the node id of the latest node entered event for an active node\n   * that exists in the project\n   */\n  getLatestNodeEnteredEventNodeIdWithExistingNode() {\n    const events = this.studentData.events;\n    for (let e = events.length - 1; e >= 0; e--) {\n      const event = events[e];\n      if (event != null) {\n        const eventName = event.event;\n        if (eventName == 'nodeEntered') {\n          const nodeId = event.nodeId;\n          const node = this.ProjectService.getNodeById(nodeId);\n          if (node != null) {\n            if (this.ProjectService.isActive(nodeId)) {\n              return nodeId;\n            }\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Check if the student can visit the node\n   * @param nodeId the node id\n   * @returns whether the student can visit the node\n   */\n  canVisitNode(nodeId) {\n    if (nodeId != null) {\n      // get the node status for the node\n      const nodeStatus = this.getNodeStatusByNodeId(nodeId);\n      if (nodeStatus != null) {\n        if (nodeStatus.isVisitable) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n\n  /**\n   * Get the node status by node id\n   * @param nodeId the node id\n   * @returns the node status object for a node\n   */\n  getNodeStatusByNodeId(nodeId) {\n    if (nodeId != null) {\n      return this.nodeStatuses[nodeId];\n    }\n    return null;\n  };\n\n  /**\n   * Get progress information for a given node\n   * @param nodeId the node id\n   * @returns object with number of completed items (both all and for items\n   * that capture student work), number of visible items (all/with work),\n   * completion % (for all items, items with student work)\n   */\n  getNodeProgressById(nodeId) {\n    let completedItems = 0;\n    let completedItemsWithWork = 0;\n    let totalItems = 0;\n    let totalItemsWithWork = 0;\n    let progress = {};\n\n    if (this.ProjectService.isGroupNode(nodeId)) {\n      let nodeIds = this.ProjectService.getChildNodeIdsById(nodeId);\n      for (let id of nodeIds) {\n        let status = this.nodeStatuses[id];\n        if (this.ProjectService.isGroupNode(id)) {\n          if (status.progress.totalItemsWithWork > -1) {\n            completedItems += status.progress.completedItems;\n            totalItems += status.progress.totalItems;\n            completedItemsWithWork += status.progress.completedItemsWithWork;\n            totalItemsWithWork += status.progress.totalItemsWithWork;\n          } else {\n            // we have a legacy node status so we'll need to calculate manually\n            let groupProgress = this.getNodeProgressById(id);\n            completedItems += groupProgress.completedItems;\n            totalItems += groupProgress.totalItems;\n            completedItemsWithWork += groupProgress.completedItemsWithWork;\n            totalItemsWithWork += groupProgress.totalItemsWithWork;\n          }\n        } else {\n          if (status.isVisible) {\n            totalItems++;\n\n            let hasWork = this.ProjectService.nodeHasWork(id);\n            if (hasWork) {\n              totalItemsWithWork++;\n            }\n\n            if (status.isCompleted) {\n              completedItems++;\n\n              if (hasWork) {\n                completedItemsWithWork++;\n              }\n            }\n          }\n        }\n      }\n\n      let completionPct = totalItems ? Math.round(completedItems / totalItems * 100) : 0;\n      let completionPctWithWork = totalItemsWithWork ? Math.round(completedItemsWithWork / totalItemsWithWork * 100) : 0;\n\n      progress = {\n        \"completedItems\": completedItems,\n        \"completedItemsWithWork\": completedItemsWithWork,\n        \"totalItems\": totalItems,\n        \"totalItemsWithWork\": totalItemsWithWork,\n        \"completionPct\": completionPct,\n        \"completionPctWithWork\": completionPctWithWork\n      };\n    }\n\n    // TODO: implement for steps (using components instead of child nodes)?\n\n    return progress;\n  };\n\n  /**\n   * Check if the given node or component is completed\n   * @param nodeId the node id\n   * @param componentId (optional) the component id\n   * @returns whether the node or component is completed\n   */\n  isCompleted(nodeId, componentId) {\n    let result = false;\n    if (nodeId && componentId) {\n      // check that the component is completed\n\n      // get the component states for the component\n      const componentStates = this.getComponentStatesByNodeIdAndComponentId(nodeId, componentId);\n\n      // get the component events\n      const componentEvents = this.getEventsByNodeIdAndComponentId(nodeId, componentId);\n\n      // get the node events\n      const nodeEvents = this.getEventsByNodeId(nodeId);\n\n      // get the component object\n      const component = this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n\n      const node = this.ProjectService.getNodeById(nodeId);\n      if (component != null) {\n        // get the component type\n        const componentType = component.type;\n\n        if (componentType != null) {\n          // get the service for the component type\n          const service = this.$injector.get(componentType + 'Service');\n\n          // check if the component is completed\n          if (service.isCompleted(component, componentStates, componentEvents, nodeEvents, node)) {\n            result = true;\n          }\n        }\n      }\n    } else if (nodeId) {\n      // check if node is a group\n      const isGroup = this.ProjectService.isGroupNode(nodeId);\n\n      const node = this.ProjectService.getNodeById(nodeId);\n\n      if (isGroup) {\n        // node is a group\n        let tempResult = true;\n\n        // check that all the nodes in the group are visible and completed\n        const nodeIds = this.ProjectService.getChildNodeIdsById(nodeId);\n\n        if (nodeIds.length) {\n          for (let id of nodeIds) {\n            if (this.nodeStatuses[id] == null || !this.nodeStatuses[id].isVisible || !this.nodeStatuses[id].isCompleted) {\n              // the child is not visible or not completed so the group is not completed\n              tempResult = false;\n              break;\n            }\n          }\n        } else {\n          // there are no nodes in the group (could be a planning activity, for example), so set isCompleted to false\n          tempResult = false;\n        }\n        result = tempResult;\n      } else {\n        // check that all the components in the node are completed\n\n        // get all the components in the node\n        const components = this.ProjectService.getComponentsByNodeId(nodeId);\n\n        // we will default to is completed true\n        let tempResult = true;\n\n        /*\n         * All components must be completed in order for the node to be completed\n         * so we will loop through all the components and check if they are\n         * completed\n         */\n        for (let component of components) {\n          if (component != null) {\n            const componentId = component.id;\n            const componentType = component.type;\n\n            let tempNodeId = nodeId;\n            let tempNode = node;\n            let tempComponentId = componentId;\n            let tempComponent = component;\n\n            if (componentType != null) {\n              try {\n                // get the service name\n                const serviceName = componentType + 'Service';\n\n                if (this.$injector.has(serviceName)) {\n                  // get the service for the component type\n                  const service = this.$injector.get(serviceName);\n\n                  // get the component states for the component\n                  const componentStates = this.getComponentStatesByNodeIdAndComponentId(tempNodeId, tempComponentId);\n\n                  // get the component events\n                  const componentEvents = this.getEventsByNodeIdAndComponentId(tempNodeId, tempComponentId);\n\n                  // get the node events\n                  const nodeEvents = this.getEventsByNodeId(tempNodeId);\n\n                  // check if the component is completed\n                  const isComponentCompleted = service.isCompleted(tempComponent, componentStates, componentEvents, nodeEvents, tempNode);\n\n                  tempResult = tempResult && isComponentCompleted;\n                }\n              } catch (e) {\n                console.log(this.$translate('ERROR_COULD_NOT_CALCULATE_IS_COMPLETED') + tempComponentId);\n              }\n            }\n          }\n        }\n        result = tempResult;\n      }\n    }\n    return result;\n  };\n\n  /**\n   * Get the current node\n   * @returns the current node object\n   */\n  getCurrentNode() {\n    return this.currentNode;\n  };\n\n  /**\n   * Get the current node id\n   * @returns the current node id\n   */\n  getCurrentNodeId() {\n    if (this.currentNode != null) {\n      return this.currentNode.id;\n    }\n    return null;\n  };\n\n  /**\n   * Set the current node\n   * @param nodeId the node id\n   */\n  setCurrentNodeByNodeId(nodeId) {\n    if (nodeId != null) {\n      const node = this.ProjectService.getNodeById(nodeId);\n      this.setCurrentNode(node);\n    }\n  };\n\n  /**\n   * Set the current node\n   * @param node the node object\n   */\n  setCurrentNode(node) {\n    const previousCurrentNode = this.currentNode;\n    if (previousCurrentNode !== node) {\n      if (previousCurrentNode &&\n          !this.ProjectService.isGroupNode(previousCurrentNode.id)) {\n        this.previousStep = previousCurrentNode;\n      }\n      this.currentNode = node;\n      this.$rootScope.$broadcast('currentNodeChanged',\n          {previousNode: previousCurrentNode, currentNode: this.currentNode});\n    }\n  };\n\n  /**\n   * End the current node\n   */\n  endCurrentNode() {\n    const previousCurrentNode = this.currentNode;\n    if (previousCurrentNode != null) {\n      this.$rootScope.$broadcast('exitNode', {nodeToExit: previousCurrentNode});\n    }\n  };\n\n  /**\n   * End the current node and set the current node\n   * @param nodeId the node id of the new current node\n   */\n  endCurrentNodeAndSetCurrentNodeByNodeId(nodeId) {\n    if (this.nodeStatuses[nodeId].isVisitable) {\n      this.endCurrentNode();\n      this.setCurrentNodeByNodeId(nodeId);\n    } else {\n      this.nodeClickLocked(nodeId);\n    }\n  };\n\n  /**\n   * Broadcast a listenable event that a locked node has been clicked (attempted to be opened)\n   * @param nodeId\n   */\n  nodeClickLocked(nodeId) {\n    this.$rootScope.$broadcast('nodeClickLocked', {nodeId: nodeId});\n  };\n\n  /**\n   * This will parse a delimited string into an array of\n   * arrays. The default delimiter is the comma, but this\n   * can be overriden in the second argument.\n   * Source: http://www.bennadel.com/blog/1504-ask-ben-parsing-csv-strings-with-javascript-exec-regular-expression-command.htm\n   */\n  CSVToArray( strData, strDelimiter ) {\n    // Check to see if the delimiter is defined. If not,\n    // then default to comma.\n    strDelimiter = (strDelimiter || \",\");\n\n    // Create a regular expression to parse the CSV values.\n    const objPattern = new RegExp(\n      (\n        // Delimiters.\n        \"(\\\\\" + strDelimiter + \"|\\\\r?\\\\n|\\\\r|^)\" +\n\n        // Quoted fields.\n        \"(?:\\\"([^\\\"]*(?:\\\"\\\"[^\\\"]*)*)\\\"|\" +\n\n        // Standard fields.\n        \"([^\\\"\\\\\" + strDelimiter + \"\\\\r\\\\n]*))\"\n      ),\n      \"gi\"\n    );\n\n    // Create an array to hold our data. Give the array\n    // a default empty first row.\n    const arrData = [[]];\n\n    // Create an array to hold our individual pattern\n    // matching groups.\n    let arrMatches = null;\n\n\n    // Keep looping over the regular expression matches\n    // until we can no longer find a match.\n    while (arrMatches = objPattern.exec( strData )) {\n\n      // Get the delimiter that was found.\n      const strMatchedDelimiter = arrMatches[ 1 ];\n\n      // Check to see if the given delimiter has a length\n      // (is not the start of string) and if it matches\n      // field delimiter. If id does not, then we know\n      // that this delimiter is a row delimiter.\n      if (\n        strMatchedDelimiter.length &&\n        (strMatchedDelimiter != strDelimiter)\n      ){\n\n        // Since we have reached a new row of data,\n        // add an empty row to our data array.\n        arrData.push( [] );\n      }\n\n      // Now that we have our delimiter out of the way,\n      // let's check to see which kind of value we\n      // captured (quoted or unquoted).\n      if (arrMatches[ 2 ]){\n\n        // We found a quoted value. When we capture\n        // this value, unescape any double quotes.\n        const strMatchedValue = arrMatches[ 2 ].replace(\n          new RegExp( \"\\\"\\\"\", \"g\" ),\n          \"\\\"\"\n        );\n\n      } else {\n        // We found a non-quoted value.\n        const strMatchedValue = arrMatches[ 3 ];\n      }\n\n      // Now that we have our value string, let's add\n      // it to the data array.\n      let finalValue = strMatchedValue;\n      const floatVal = parseFloat(strMatchedValue);\n      if (!isNaN(floatVal)) {\n        finalValue = floatVal;\n      }\n      arrData[ arrData.length - 1 ].push( finalValue );\n    }\n    // Return the parsed data.\n    return( arrData );\n  };\n\n  /**\n   * Get the total score for the workgroup\n   * @returns the total score for the workgroup\n   */\n  getTotalScore() {\n    const annotations = this.studentData.annotations;\n    const workgroupId = this.ConfigService.getWorkgroupId();\n    return this.AnnotationService.getTotalScore(annotations, workgroupId);\n  }\n\n  /**\n   * Get the project completion for the signed in student\n   * @returns the project completion percentage for the signed in student\n   */\n  getProjectCompletion() {\n    // group0 is always the root node of the whole project\n    const nodeId = 'group0';\n\n    // get the progress including all of the children nodes\n    const progress = this.getNodeProgressById(nodeId);\n\n    return progress;\n  }\n\n  /**\n   * Get the run status\n   */\n  getRunStatus() {\n    return this.runStatus;\n  }\n\n  /**\n   * Get the next available planning node instance node id\n   * @returns the next available planning node instance node id\n   */\n  getNextAvailablePlanningNodeId() {\n    // used to keep track of the highest planning node number we have found, which is 1-based\n    let currentMaxPlanningNodeNumber = 1;\n\n    let nodeStates = this.getNodeStates();\n    if (nodeStates != null) {\n      for (let nodeState of nodeStates) {\n        if (nodeState != null) {\n          let nodeStateNodeId = nodeState.nodeId;\n          if (this.PlanningService.isPlanning(nodeStateNodeId) && nodeState.studentData != null) {\n            let nodes = nodeState.studentData.nodes;\n            for (let node of nodes) {\n              let nodeId = node.id;\n              // regex to match the planning node id e.g. planningNode2\n              let planningNodeIdRegEx = /planningNode(.*)/;\n\n              // run the regex on the node id\n              let result = nodeId.match(planningNodeIdRegEx);\n\n              if (result != null) {\n                // we have found a planning node instance node id\n\n                /*\n                 * get the number part of the planning node instance node id\n                 * e.g. if the nodeId is planningNode2, the number part\n                 * would be 2\n                 */\n                let planningNodeNumber = parseInt(result[1]);\n\n                if (planningNodeNumber > currentMaxPlanningNodeNumber) {\n                  /*\n                   * update the max number part if we have found a new\n                   * higher number\n                   */\n                  currentMaxPlanningNodeNumber = planningNodeNumber;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (this.maxPlanningNodeNumber < currentMaxPlanningNodeNumber) {\n      // Update maxPlanningNodeNumber if we find a bigger number in the NodeStates\n      this.maxPlanningNodeNumber = currentMaxPlanningNodeNumber;\n    }\n\n    // Increment maxPlanningNodeNumber each time this function is called.\n    this.maxPlanningNodeNumber++;\n\n    // return the next available planning node instance node id\n    return 'planningNode' + this.maxPlanningNodeNumber;\n  }\n\n  /**\n   * Get the annotations\n   * @returns the annotations\n   */\n  getAnnotations() {\n    if (this.studentData != null && this.studentData.annotations != null) {\n      return this.studentData.annotations;\n    }\n    return null;\n  }\n\n  /**\n   * Get the latest component states for a node\n   * @param nodeId get the component states for the node\n   * @return an array containing the work for the node\n   */\n  getLatestComponentStatesByNodeId(nodeId) {\n    const latestComponentStates = [];\n    if (nodeId) {\n      const studentData = this.studentData;\n      if (studentData) {\n        const node = this.ProjectService.getNodeById(nodeId);\n        if (node != null) {\n          const components = node.components;\n          if (components != null) {\n            for (let component of components) {\n              if (component != null) {\n                const componentId = component.id;\n                let componentState =\n                    this.getLatestComponentStateByNodeIdAndComponentId(nodeId, componentId);\n                if (componentState == null) {\n                  /*\n                   * there is no component state for the component so we will\n                   * create an object that just contains the node id and\n                   * component id\n                   */\n                  componentState = {};\n                  componentState.nodeId = nodeId;\n                  componentState.componentId = componentId;\n                }\n                latestComponentStates.push(componentState);\n              }\n            }\n          }\n        }\n      }\n    }\n    return latestComponentStates;\n  }\n\n  /**\n   * Get the latest component state for a node\n   * @param nodeId get the latest component state for the node\n   * @return the latest component state for the node\n   */\n  getLatestComponentStateByNodeId(nodeId) {\n    if (nodeId != null) {\n      const studentData = this.studentData;\n      if (studentData) {\n        const componentStates = this.getComponentStatesByNodeId(nodeId);\n        return componentStates[componentStates.length - 1];\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Check if the completion criteria is satisfied\n   * @param completionCriteria the completion criteria\n   * @return whether the completion criteria was satisfied\n   */\n  isCompletionCriteriaSatisfied(completionCriteria) {\n    let result = true;\n    if (completionCriteria != null) {\n      if (completionCriteria.inOrder) {\n        // the criteria need to be satisfied in order\n\n        let tempTimestamp = 0;\n        const criteria = completionCriteria.criteria;\n        for (let completionCriterion of criteria) {\n          let tempResult = true;\n          if (completionCriterion != null) {\n            // get the function name e.g. 'isVisited', 'isSaved', 'isSubmitted'\n            const functionName = completionCriterion.name;\n\n            if (functionName == 'isSubmitted') {\n              const nodeId = completionCriterion.nodeId;\n              const componentId = completionCriterion.componentId;\n\n              // get the first submit component state after the timestamp\n              const tempComponentState = this.getComponentStateSubmittedAfter(nodeId, componentId, tempTimestamp);\n\n              if (tempComponentState == null) {\n                // we did not find a component state\n                result = false;\n                break;\n              } else {\n                // we found a component state so we will update timestamp\n                tempTimestamp = tempComponentState.serverSaveTime;\n              }\n            } else if (functionName == 'isSaved') {\n              const nodeId = completionCriterion.nodeId;\n              const componentId = completionCriterion.componentId;\n\n              // get the first save component state after the timestamp\n              const tempComponentState = this.getComponentStateSavedAfter(nodeId, componentId, tempTimestamp);\n\n              if (tempComponentState == null) {\n                // we did not find a component state\n                result = false;\n                break;\n              } else {\n                // we found a component state so we will update timestamp\n                tempTimestamp = tempComponentState.serverSaveTime;\n              }\n            } else if (functionName == 'isVisited') {\n              const nodeId = completionCriterion.nodeId;\n\n              // get the first visit event after the timestamp\n              const tempEvent = this.getVisitEventAfter(nodeId, tempTimestamp);\n\n              if (tempEvent == null) {\n                // we did not find a component state\n                result = false;\n                break;\n              } else {\n                // we found a component state so we will update timestamp\n                tempTimestamp = tempEvent.serverSaveTime;\n              }\n            }\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Get the first save component state after the given timestamp\n   * @param nodeId the node id of the component state\n   * @param componentId the component id of the component state\n   * @param timestamp look for a save component state after this timestamp\n   */\n  getComponentStateSavedAfter(nodeId, componentId, timestamp) {\n    const componentStates = this.studentData.componentStates;\n    if (componentStates != null) {\n      for (let tempComponentState of componentStates) {\n        if (tempComponentState != null &&\n            tempComponentState.serverSaveTime > timestamp &&\n            tempComponentState.nodeId === nodeId &&\n            tempComponentState.componentId === componentId) {\n          return tempComponentState;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Get the first submit component state after the given timestamp\n   * @param nodeId the node id of the component state\n   * @param componentId the component id of the component state\n   * @param timestamp look for a submit component state after this timestamp\n   */\n  getComponentStateSubmittedAfter(nodeId, componentId, timestamp) {\n    const componentStates = this.studentData.componentStates;\n    if (componentStates != null) {\n      for (let tempComponentState of componentStates) {\n        if (tempComponentState != null &&\n            tempComponentState.serverSaveTime > timestamp &&\n            tempComponentState.nodeId === nodeId &&\n            tempComponentState.componentId === componentId &&\n            tempComponentState.isSubmit) {\n          return tempComponentState;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Get the first visit event after the timestamp\n   */\n  getVisitEventAfter(nodeId, timestamp) {\n    const events = this.studentData.events;\n    if (events != null) {\n      for (let tempEvent of events) {\n        if (tempEvent != null &&\n            tempEvent.serverSaveTime > timestamp &&\n            tempEvent.nodeId === nodeId &&\n            tempEvent.event === 'nodeEntered') {\n          return tempEvent;\n        }\n      }\n    }\n    return null;\n  }\n\n  getClassmateStudentWork(nodeId, componentId, periodId) {\n    const params = {\n      runId: this.ConfigService.getRunId(),\n      nodeId: nodeId,\n      componentId: componentId,\n      getStudentWork: true,\n      getEvents: false,\n      getAnnotations: false,\n      onlyGetLatest: true,\n      periodId: periodId\n    };\n    const httpParams = {\n      method: 'GET',\n      url: this.ConfigService.getConfigParam('studentDataURL'),\n      params: params\n    };\n    return this.$http(httpParams).then((result) => {\n      const resultData = result.data;\n      if (resultData != null) {\n        return resultData.studentWorkList;\n      }\n      return [];\n    });\n  }\n\n  getClassmateScores(nodeId, componentId, periodId) {\n    const params = {\n      runId: this.ConfigService.getRunId(),\n      nodeId: nodeId,\n      componentId: componentId,\n      getStudentWork: false,\n      getEvents: false,\n      getAnnotations: true,\n      onlyGetLatest: false,\n      periodId: periodId\n    };\n    const httpParams = {\n      method: 'GET',\n      url: this.ConfigService.getConfigParam('studentDataURL'),\n      params: params\n    };\n    return this.$http(httpParams).then((result) => {\n      return result.data.annotations;\n    });\n  }\n\n  /**\n   * Get a student work from any student.\n   * @param id The student work id.\n   */\n  getStudentWorkById(id) {\n    const studentDataURL = this.ConfigService.getConfigParam('studentDataURL');\n    const httpParams = {};\n    httpParams.method = 'GET';\n    httpParams.url = studentDataURL;\n    const params = {};\n    params.runId = this.ConfigService.getRunId();\n    params.id = id;\n    params.getStudentWork = true;\n    params.getEvents = false;\n    params.getAnnotations = false;\n    params.onlyGetLatest = true;\n    httpParams.params = params;\n    return this.$http(httpParams).then((result) => {\n      const resultData = result.data;\n      if (resultData != null && resultData.studentWorkList.length > 0) {\n        return resultData.studentWorkList[0];\n      }\n      return null;\n    });\n  }\n\n  /**\n   * Get the max possible score for the project\n   * @returns the sum of the max scores for all the nodes in the project visible\n   * to the current workgroup or null if none of the visible components has max scores.\n   */\n  getMaxScore() {\n    let maxScore = null;\n    for (let p in this.nodeStatuses) {\n      if (this.nodeStatuses.hasOwnProperty(p)) {\n        let nodeStatus = this.nodeStatuses[p];\n        let nodeId = nodeStatus.nodeId;\n\n        if (nodeStatus.isVisible && !this.ProjectService.isGroupNode(nodeId)) {\n          // node is visible and is not a group\n          // get node max score\n          let nodeMaxScore = this.ProjectService.getMaxScoreForNode(nodeId);\n\n          if (nodeMaxScore) {\n            // there is a max score for the node, so add to total\n            // TODO geoffreykwan: trying to add to null?\n            maxScore += nodeMaxScore;\n          }\n        }\n      }\n    }\n    return maxScore;\n  }\n}\n\nStudentDataService.$inject = [\n  '$filter',\n  '$http',\n  '$injector',\n  '$q',\n  '$rootScope',\n  'AnnotationService',\n  'ConfigService',\n  'PlanningService',\n  'ProjectService',\n  'UtilService'\n];\n\nexport default StudentDataService;\n"],"file":"studentDataService.js"}