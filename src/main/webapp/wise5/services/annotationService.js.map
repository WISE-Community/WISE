{"version":3,"sources":["annotationService.es6"],"names":["AnnotationService","$filter","$http","$q","$rootScope","ConfigService","ProjectService","UtilService","$translate","annotations","dummyAnnotationId","annotationId","annotation","id","params","nodeId","componentId","fromWorkgroupId","toWorkgroupId","type","a","length","tempAnnotation","match","constructor","Array","thisType","runId","periodId","studentWorkId","localNotebookItemId","notebookItemId","annotationType","data","clientSaveTime","push","requestToken","generateKey","addOrUpdateAnnotation","isPreview","savedAnnotationDataResponse","saveToServerSuccess","deferred","defer","resolve","promise","getRunId","workgroupId","getWorkgroupId","angular","toJson","httpParams","method","url","getConfigParam","headers","$","param","then","bind","result","localAnnotation","savedAnnotations","localAnnotations","savedAnnotation","y","serverSaveTime","$broadcast","isAnnotationFound","isAnnotationMatch","annotation1","annotation2","totalScore","scoresFound","isActive","scoreFound","indexOf","value","isNaN","score","tempNodeId","tempComponentId","componentExists","getComponentByNodeIdAndComponentId","Date","parse","createAnnotation","scoreType","commentType","latestScoreAnnotation","getLatestScoreAnnotation","latestCommentAnnotation","getLatestCommentAnnotation","getLatestNotebookItemScoreAnnotation","getLatestNotebookItemCommentAnnotation","getAnnotations","acceptAnnotation","tempToWorkgroupId","tempAnnotationType","isMatchingPeriods","scoreAnnotation","allGlobalAnnotations","getAllGlobalAnnotations","globalAnnotationsByNodeIdAndComponentId","filter","globalAnnotation","globalAnnotations","isGlobal","globalAnnotationGroups","annotationGroupName","annotationGroupCreatedTime","sameGroupFound","globalAnnotationGroup","annotationGroupNameAndTime","annotationGroup","console","error","activeGlobalAnnotationGroups","unGlobalizedTimestamp","activeGlobalAnnotationGroup","his","inActiveGlobalAnnotations","getLatestAnnotationByStudentWorkIdAndType","totalScoreSoFar","annotationsCounted","getAllLatestScoreAnnotations","getSubScore","getScoreFromAnnotation","workgroupIdsFound","latestScoreAnnotations","scores","$inject"],"mappings":"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","sourcesContent":["'use strict';\n\nclass AnnotationService {\n  constructor(\n      $filter,\n      $http,\n      $q,\n      $rootScope,\n      ConfigService,\n      ProjectService,\n      UtilService) {\n    this.$filter = $filter;\n    this.$http = $http;\n    this.$q = $q;\n    this.$rootScope = $rootScope;\n    this.ConfigService = ConfigService;\n    this.ProjectService = ProjectService;\n    this.UtilService = UtilService;\n    this.$translate = this.$filter('translate');\n    this.annotations = null;\n\n    /*\n     * A dummy annotation id that is used in preview mode when we simulate\n     * saving of annotation.\n     */\n    this.dummyAnnotationId = 1;\n  }\n\n  /**\n   * Get all the annotations\n   */\n  getAnnotations() {\n    return this.annotations;\n  }\n\n  /**\n   * Get the annotation with the specified id, or null if not found\n   * @param annotationId\n   */\n  getAnnotationById(annotationId) {\n    for (let annotation of this.annotations) {\n      if (annotation.id === annotationId) {\n        return annotation;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Get the latest annotation with the given params\n   * @param params an object containing the params to match\n   * @returns the latest annotation that matches the params\n   */\n  getLatestAnnotation(params) {\n    let annotation = null;\n\n    if (params != null) {\n      let nodeId = params.nodeId;\n      let componentId = params.componentId;\n      let fromWorkgroupId = params.fromWorkgroupId;\n      let toWorkgroupId = params.toWorkgroupId;\n      let type = params.type;\n\n      let annotations = this.annotations;\n\n      if (annotations != null) {\n        for (let a = annotations.length - 1; a >= 0; a--) {\n          let tempAnnotation = annotations[a];\n\n          if (tempAnnotation != null) {\n            let match = true;\n\n            if (nodeId && tempAnnotation.nodeId !== nodeId) {\n              match = false;\n            }\n            if (match && componentId && tempAnnotation.componentId !== componentId) {\n              match = false;\n            }\n            if (match && fromWorkgroupId && tempAnnotation.fromWorkgroupId !== fromWorkgroupId) {\n              match = false;\n            }\n            if (match && toWorkgroupId && tempAnnotation.toWorkgroupId !== toWorkgroupId) {\n              match = false;\n            }\n            if (match && type) {\n              if (type.constructor === Array) {\n                for (let thisType of type) {\n                  if (tempAnnotation.type !== thisType) {\n                    match = false;\n                  }\n                }\n              } else {\n                if (tempAnnotation.type !== type) {\n                  match = false;\n                }\n              }\n            }\n\n            if (match) {\n              annotation = tempAnnotation;\n              break;\n            }\n          }\n        }\n      }\n    }\n    return annotation;\n  };\n\n  /**\n   * Create an annotation object\n   * @param annotationId the annotation id\n   * @param runId the run id\n   * @param periodId the period id\n   * @param fromWorkgroupId the from workgroup id\n   * @param toWorkgroupId the to workgroup id\n   * @param nodeId the node id\n   * @param componentId the component id\n   * @param studentWorkId the student work id\n   * @param annotationType the annotation type\n   * @param data the data\n   * @param clientSaveTime the client save time\n   * @returns an annotation object\n   */\n  createAnnotation(annotationId, runId, periodId, fromWorkgroupId,\n      toWorkgroupId, nodeId, componentId, studentWorkId, localNotebookItemId,\n      notebookItemId, annotationType, data, clientSaveTime) {\n    const annotation = {};\n    annotation.id = annotationId;\n    annotation.runId = runId;\n    annotation.periodId = periodId;\n    annotation.fromWorkgroupId = fromWorkgroupId;\n    annotation.toWorkgroupId = toWorkgroupId;\n    annotation.nodeId = nodeId;\n    annotation.componentId = componentId;\n    annotation.studentWorkId = studentWorkId;\n    annotation.localNotebookItemId = localNotebookItemId;\n    annotation.notebookItemId = notebookItemId;\n    annotation.type = annotationType;\n    annotation.data = data;\n    annotation.clientSaveTime = clientSaveTime;\n    return annotation;\n  };\n\n  /**\n   * Save the annotation to the server\n   * @param annotation the annotation object\n   * @returns a promise\n   */\n  saveAnnotation(annotation) {\n    if (annotation != null) {\n      let annotations = [];\n      annotations.push(annotation);\n      if (annotations != null && annotations.length > 0) {\n        for (let annotation of annotations) {\n          if (annotation != null) {\n            annotation.requestToken = this.UtilService.generateKey(); // use this to keep track of unsaved annotations.\n            this.addOrUpdateAnnotation(annotation);\n          }\n        }\n      } else {\n        annotations = [];\n      }\n\n      if (this.ConfigService.isPreview()) {\n        // if we're in preview, don't make any request to the server but pretend we did\n        let savedAnnotationDataResponse = {\n          annotations: annotations\n        };\n        let annotation = this.saveToServerSuccess(savedAnnotationDataResponse);\n\n        let deferred = this.$q.defer();\n        deferred.resolve(annotation);\n        return deferred.promise;\n      } else {\n        let params = {\n          runId: this.ConfigService.getRunId(),\n          workgroupId: this.ConfigService.getWorkgroupId(),\n          annotations: angular.toJson(annotations)\n        };\n\n        let httpParams = {\n          method: \"POST\",\n          url: this.ConfigService.getConfigParam('teacherDataURL'),\n          headers: {'Content-Type': 'application/x-www-form-urlencoded'},\n          data: $.param(params)\n        };\n\n        return this.$http(httpParams).then(angular.bind(this, function(result) {\n\n          let localAnnotation = null;\n\n          if (result != null && result.data != null) {\n            let savedAnnotationDataResponse = result.data;\n            localAnnotation = this.saveToServerSuccess(savedAnnotationDataResponse);\n          }\n\n          return localAnnotation;\n        }));\n      }\n    }\n  };\n\n  saveToServerSuccess(savedAnnotationDataResponse) {\n    let localAnnotation = null;\n    if (savedAnnotationDataResponse != null) {\n      let savedAnnotations = savedAnnotationDataResponse.annotations;\n      let localAnnotations = this.annotations;\n      if (savedAnnotations != null && localAnnotations != null) {\n        for (let savedAnnotation of savedAnnotations) {\n          for (let y = localAnnotations.length - 1; y >= 0; y--) {\n            localAnnotation = localAnnotations[y];\n\n            if (localAnnotation.id != null &&\n              localAnnotation.id === savedAnnotation.id) {\n\n              // we have found the matching local annotation so we will update it\n              localAnnotation.serverSaveTime = savedAnnotation.serverSaveTime;\n              //localAnnotation.requestToken = null; // requestToken is no longer needed.\n\n              this.$rootScope.$broadcast('annotationSavedToServer', {annotation: localAnnotation});\n              break;\n            } else if (localAnnotation.requestToken != null &&\n              localAnnotation.requestToken === savedAnnotation.requestToken) {\n\n              // we have found the matching local annotation so we will update it\n              localAnnotation.id = savedAnnotation.id;\n              localAnnotation.serverSaveTime = savedAnnotation.serverSaveTime;\n              localAnnotation.requestToken = null; // requestToken is no longer needed.\n\n              if (this.ConfigService.isPreview() && localAnnotation.id == null) {\n                /*\n                 * we are in preview mode so we will set a dummy\n                 * annotation id into the annotation\n                 */\n                localAnnotation.id = this.dummyAnnotationId;\n                /*\n                 * increment the dummy annotation id for the next\n                 * annotation\n                 */\n                this.dummyAnnotationId++;\n              }\n\n              this.$rootScope.$broadcast('annotationSavedToServer', {annotation: localAnnotation});\n              break;\n            }\n          }\n        }\n      }\n    }\n    return localAnnotation;\n  }\n\n  addOrUpdateAnnotation(annotation) {\n    let isAnnotationFound = false;\n    for (let a = this.annotations.length - 1; a >= 0; a--) {\n      const localAnnotation = this.annotations[a];\n      if (this.isAnnotationMatch(annotation, localAnnotation)) {\n        isAnnotationFound = true;\n        localAnnotation.data = annotation.data;\n        localAnnotation.clientSaveTime = annotation.clientSaveTime;\n        localAnnotation.serverSaveTime = annotation.serverSaveTime;\n      }\n    }\n    if (!isAnnotationFound) {\n      this.annotations.push(annotation);\n    }\n  }\n\n  isAnnotationMatch(annotation1, annotation2) {\n    return annotation1.id === annotation2.id &&\n      annotation1.nodeId === annotation2.nodeId &&\n      annotation1.componentId === annotation2.componentId &&\n      annotation1.fromWorkgroupId === annotation2.fromWorkgroupId &&\n      annotation1.toWorkgroupId === annotation2.toWorkgroupId &&\n      annotation1.type === annotation2.type &&\n      annotation1.studentWorkId === annotation2.studentWorkId &&\n      annotation1.runId === annotation2.runId &&\n      annotation1.periodId === annotation2.periodId;\n  }\n\n  /**\n   * Set the annotations\n   * @param annotations the annotations aray\n   */\n  setAnnotations(annotations) {\n    this.annotations = annotations;\n  };\n\n  /**\n   * Get the total score for a workgroup\n   * @param annotations an array of annotations\n   * @param workgroupId the workgroup id\n   */\n  getTotalScore(annotations, workgroupId) {\n    let totalScore = 0;\n    const scoresFound = [];\n\n    if (annotations != null && workgroupId != null) {\n      for (let a = annotations.length - 1; a >= 0; a--) {\n        const annotation = annotations[a];\n        if (annotation != null && annotation.toWorkgroupId == workgroupId) {\n          if (annotation.type === 'score' || annotation.type === \"autoScore\") {\n            const nodeId = annotation.nodeId;\n            const componentId = annotation.componentId;\n            const data = annotation.data;\n            if (this.ProjectService.isActive(nodeId)) {\n              const scoreFound = nodeId + '-' + componentId;\n              if (scoresFound.indexOf(scoreFound) == -1) {\n                if (data != null) {\n                  const value = data.value;\n                  if (!isNaN(value)) {\n                    if (totalScore == null) {\n                      totalScore = value;\n                    } else {\n                      totalScore += value;\n                    }\n\n                    /*\n                     * remember that we have found a score for this component\n                     * so that we don't double count it if the teacher scored\n                     * the component more than once\n                     */\n                    scoresFound.push(scoreFound);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    return totalScore;\n  }\n\n  /**\n   * Get the score for a workgroup for a node\n   * @param workgroupId the workgroup id\n   * @param nodeId the node id\n   * @returns the score for a workgroup for a node\n   */\n  getScore(workgroupId, nodeId) {\n    let score = null;\n\n    /*\n     * an array to keep track of the components that we have obtained a\n     * score for. we do not want to double count components if the student\n     * has received a score multiple times for a node from the teacher.\n     */\n    const scoresFound = [];\n    const annotations = this.annotations;\n\n    if (workgroupId != null && nodeId != null) {\n      for (let a = annotations.length - 1; a >= 0; a--) {\n        const annotation = annotations[a];\n        if (annotation != null && annotation.toWorkgroupId == workgroupId) {\n          if (annotation.type === 'score' || annotation.type === 'autoScore') {\n            const tempNodeId = annotation.nodeId;\n            if (nodeId == tempNodeId) {\n              const tempComponentId = annotation.componentId;\n              if (this.componentExists(tempNodeId, tempComponentId)) {\n                const data = annotation.data;\n                const scoreFound = tempNodeId + '-' + tempComponentId;\n                if (scoresFound.indexOf(scoreFound) == -1) {\n                  if (data != null) {\n                    const value = data.value;\n                    if (!isNaN(value)) {\n                      if (score == null) {\n                        score = value;\n                      } else {\n                        score += value;\n                      }\n\n                      /*\n                       * remember that we have found a score for this component\n                       * so that we don't double count it if the teacher scored\n                       * the component more than once\n                       */\n                      scoresFound.push(scoreFound);\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return score;\n  }\n\n  componentExists(nodeId, componentId) {\n    return this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId) != null;\n  }\n\n  /**\n   * Create an auto score annotation\n   * @param runId the run id\n   * @param periodId the period id\n   * @param nodeId the node id\n   * @param componentId the component id\n   * @param toWorkgroupId the student workgroup id\n   * @param data the annotation data\n   * @returns the auto score annotation\n   */\n  createAutoScoreAnnotation(runId, periodId, nodeId, componentId,\n      toWorkgroupId, data) {\n    const annotationId = null;\n    const fromWorkgroupId = null;\n    const studentWorkId = null;\n    const localNotebookItemId = null;\n    const notebookItemId = null;\n    const annotationType = 'autoScore';\n    const clientSaveTime = Date.parse(new Date());\n    const annotation = this.createAnnotation(\n      annotationId, runId, periodId, fromWorkgroupId, toWorkgroupId,\n      nodeId, componentId, studentWorkId, localNotebookItemId, notebookItemId,\n      annotationType, data, clientSaveTime\n    );\n    return annotation;\n  }\n\n  /**\n   * Create an auto comment annotation\n   * @param runId the run id\n   * @param periodId the period id\n   * @param nodeId the node id\n   * @param componentId the component id\n   * @param toWorkgroupId the student workgroup id\n   * @param data the annotation data\n   * @returns the auto comment annotation\n   */\n  createAutoCommentAnnotation(runId, periodId, nodeId, componentId,\n      toWorkgroupId, data) {\n    const annotationId = null;\n    const fromWorkgroupId = null;\n    const studentWorkId = null;\n    const localNotebookItemId = null;\n    const notebookItemId = null;\n    const annotationType = 'autoComment';\n    const clientSaveTime = Date.parse(new Date());\n    const annotation = this.createAnnotation(annotationId, runId, periodId,\n        fromWorkgroupId, toWorkgroupId, nodeId, componentId, studentWorkId,\n        localNotebookItemId, notebookItemId, annotationType, data,\n        clientSaveTime);\n    return annotation;\n  }\n\n  /**\n   * Create an auto comment annotation\n   * @param runId the run id\n   * @param periodId the period id\n   * @param nodeId the node id\n   * @param componentId the component id\n   * @param fromWorkgroupId the teacher workgroup id\n   * @param toWorkgroupId the student workgroup id\n   * @param studentWorkId the component state id\n   * @param data the annotation data\n   * @returns the inappropriate flag annotation\n   */\n  createInappropriateFlagAnnotation(runId, periodId, nodeId, componentId,\n      fromWorkgroupId, toWorkgroupId, studentWorkId, data) {\n    const annotationId = null;\n    const localNotebookItemId = null;\n    const notebookItemId = null;\n    const annotationType = 'inappropriateFlag';\n    const clientSaveTime = Date.parse(new Date());\n    const annotation = this.createAnnotation(annotationId, runId, periodId,\n        fromWorkgroupId, toWorkgroupId, nodeId, componentId, studentWorkId,\n        localNotebookItemId, notebookItemId, annotationType, data,\n        clientSaveTime);\n    return annotation;\n  }\n\n  /**\n   * Get the latest annotations for a given component (as an object)\n   * @param nodeId the node id\n   * @param componentId the component id\n   * @param workgroupId the workgroup id\n   * @param scoreType (optional) the type of score\n   * e.g.\n   * 'autoScore' for auto graded score\n   * 'score' for teacher graded score\n   * 'any' for auto graded score or teacher graded score\n   * @param commentType (optional) the type of comment\n   * e.g.\n   * 'autoComment' for auto graded comment\n   * 'comment' for teacher graded comment\n   * 'any' for auto graded comment or teacher graded comment\n   * @return object containing the component's latest score and comment annotations\n   */\n  getLatestComponentAnnotations(nodeId, componentId, workgroupId, scoreType,\n      commentType) {\n    let latestScoreAnnotation = this.getLatestScoreAnnotation(nodeId,\n        componentId, workgroupId, scoreType);\n    let latestCommentAnnotation = this.getLatestCommentAnnotation(nodeId,\n        componentId, workgroupId, commentType);\n\n    return {\n      'score': latestScoreAnnotation,\n      'comment': latestCommentAnnotation\n    };\n  };\n\n  /**\n   * Get the latest annotations for a given notebook item (as an object)\n   * @param workgroupId the workgroup id that did the notebook\n   * @param localNotebookItemId unique id for note and its revisions [\"finalReport\", \"xyzabc\", ...]\n   */\n  getLatestNotebookItemAnnotations(workgroupId, localNotebookItemId) {\n    let latestScoreAnnotation = null;\n    let latestCommentAnnotation = null;\n    latestScoreAnnotation = this.getLatestNotebookItemScoreAnnotation(workgroupId, localNotebookItemId);\n    latestCommentAnnotation = this.getLatestNotebookItemCommentAnnotation(workgroupId, localNotebookItemId);\n\n    return {\n      'score': latestScoreAnnotation,\n      'comment': latestCommentAnnotation\n    };\n  };\n\n  /**\n   * Get the latest score annotation for this workgroup and localNotebookItemId, or null if not found\n   * @param workgroupId the workgroup id that did the notebook\n   * @param localNotebookItemId unique id for note and its revisions [\"finalReport\", \"xyzabc\", ...]\n   */\n  getLatestNotebookItemScoreAnnotation(workgroupId, localNotebookItemId) {\n    let annotations = this.getAnnotations();\n    for (let a = annotations.length - 1; a >= 0; a--) {\n      let annotation = annotations[a];\n      if (annotation != null && annotation.type === \"score\" &&\n          annotation.notebookItemId != null &&\n          annotation.localNotebookItemId === localNotebookItemId) {\n        return annotation;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Get the latest comment annotation for this workgroup and localNotebookItemId, or null if not found\n   * @param workgroupId the workgroup id that did the notebook\n   * @param localNotebookItemId unique id for note and its revisions [\"finalReport\", \"xyzabc\", ...]\n   */\n  getLatestNotebookItemCommentAnnotation(workgroupId, localNotebookItemId) {\n    let annotations = this.getAnnotations();\n    for (let a = annotations.length - 1; a >= 0; a--) {\n      let annotation = annotations[a];\n      if (annotation != null && annotation.type === \"comment\" &&\n          annotation.notebookItemId != null &&\n          annotation.localNotebookItemId === localNotebookItemId) {\n        return annotation;\n      }\n    }\n    return null;\n  }\n\n\n  /**\n   * Get the latest score annotation\n   * @param nodeId the node id\n   * @param componentId the component id\n   * @param workgroupId the workgroup id\n   * @param scoreType (optional) the type of score\n   * e.g.\n   * 'autoScore' for auto graded score\n   * 'score' for teacher graded score\n   * 'any' for auto graded score or teacher graded score\n   * @returns the latest score annotation\n   */\n  getLatestScoreAnnotation(nodeId, componentId, workgroupId, scoreType) {\n    let annotation = null;\n    const annotations = this.getAnnotations();\n\n    if (scoreType == null) {\n      scoreType = 'any';\n    }\n\n    for (let a = annotations.length - 1; a >= 0; a--) {\n      const tempAnnotation = annotations[a];\n      if (tempAnnotation != null) {\n        let acceptAnnotation = false;\n        const tempNodeId = tempAnnotation.nodeId;\n        const tempComponentId = tempAnnotation.componentId;\n        const tempToWorkgroupId = tempAnnotation.toWorkgroupId;\n        const tempAnnotationType = tempAnnotation.type;\n\n        if (nodeId == tempNodeId && componentId == tempComponentId &&\n            workgroupId == tempToWorkgroupId) {\n          if (scoreType === 'any' && (tempAnnotationType === 'autoScore' || tempAnnotationType === 'score')) {\n            acceptAnnotation = true;\n          } else if (scoreType === 'autoScore' && tempAnnotationType === 'autoScore') {\n            acceptAnnotation = true;\n          } else if (scoreType === 'score' && tempAnnotationType === 'score') {\n            acceptAnnotation = true;\n          }\n\n          if (acceptAnnotation) {\n            annotation = tempAnnotation;\n            break;\n          }\n        }\n      }\n    }\n    return annotation;\n  }\n\n  isThereAnyScoreAnnotation(nodeId, componentId, periodId) {\n    const annotations = this.getAnnotations();\n    for (const annotation of annotations) {\n      if (annotation.nodeId === nodeId && annotation.componentId === componentId &&\n          (this.UtilService.isMatchingPeriods(annotation.periodId, periodId)) && \n          (annotation.type === 'score' || annotation.type === 'autoScore')) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Get the latest comment annotation\n   * @param nodeId the node id\n   * @param componentId the component id\n   * @param workgroupId the workgroup id\n   * @param commentType (optional) the type of comment\n   * e.g.\n   * 'autoComment' for auto graded comment\n   * 'comment' for teacher graded comment\n   * 'any' for auto graded comment or teacher graded comment\n   * @returns the latest comment annotation\n   */\n  getLatestCommentAnnotation(nodeId, componentId, workgroupId, commentType) {\n    let annotation = null;\n    const annotations = this.getAnnotations();\n\n    if (commentType == null) {\n      commentType = 'any';\n    }\n\n    for (let a = annotations.length - 1; a >= 0; a--) {\n      const tempAnnotation = annotations[a];\n      if (tempAnnotation != null) {\n        let acceptAnnotation = false;\n        const tempNodeId = tempAnnotation.nodeId;\n        const tempComponentId = tempAnnotation.componentId;\n        const tempToWorkgroupId = tempAnnotation.toWorkgroupId;\n        const tempAnnotationType = tempAnnotation.type;\n\n        if (nodeId == tempNodeId && componentId == tempComponentId &&\n            workgroupId == tempToWorkgroupId) {\n          if (commentType === 'any' && (tempAnnotationType === 'autoComment' || tempAnnotationType === 'comment')) {\n            acceptAnnotation = true;\n          } else if (commentType === 'autoComment' && tempAnnotationType === 'autoComment') {\n            acceptAnnotation = true;\n          } else if (commentType === 'comment' && tempAnnotationType === 'comment') {\n            acceptAnnotation = true;\n          }\n\n          if (acceptAnnotation) {\n            annotation = tempAnnotation;\n            break;\n          }\n        }\n      }\n    }\n    return annotation;\n  }\n\n  /**\n   * Get the score value from the score annotation\n   * @param scoreAnnotation a score annotation\n   * @returns the score value e.g. 5\n   */\n  getScoreValueFromScoreAnnotation(scoreAnnotation) {\n    if (scoreAnnotation != null) {\n      const data = scoreAnnotation.data;\n\n      if (data != null) {\n        return data.value;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Get all global annotations that are active and inactive for a specified node and component\n   * @returns all global annotations that are active and inactive for a specified node and component\n   */\n  getAllGlobalAnnotationsByNodeIdAndComponentId(nodeId, componentId) {\n    let allGlobalAnnotations = this.getAllGlobalAnnotations();\n    let globalAnnotationsByNodeIdAndComponentId = allGlobalAnnotations.filter((globalAnnotation) => {\n      return globalAnnotation.nodeId === nodeId && globalAnnotation.componentId === componentId;\n    });\n    return globalAnnotationsByNodeIdAndComponentId;\n  };\n\n  /**\n   * Get all global annotations that are active and inactive\n   * @returns all global annotations that are active and inactive\n   */\n  getAllGlobalAnnotations() {\n    let globalAnnotations = [];\n    for (let annotation of this.annotations) {\n      if (annotation != null && annotation.data != null) {\n        if (annotation.data.isGlobal) {\n          globalAnnotations.push(annotation);\n        }\n      }\n    }\n    return globalAnnotations;\n  };\n\n  /**\n   * Get all global annotations that are active and inactive and groups them by annotation group name\n   * @returns all global annotations that are active and inactive\n   */\n  getAllGlobalAnnotationGroups() {\n    let globalAnnotationGroups = [];\n    for (let annotation of this.annotations) {\n      if (annotation != null && annotation.data != null) {\n        if (annotation.data.isGlobal) {\n          // check if this global annotation can be grouped (has the same annotationGroupName as another that we've seen before)\n          if (annotation.data.annotationGroupName != null && annotation.data.annotationGroupCreatedTime != null) {\n            let sameGroupFound = false;\n            for (let globalAnnotationGroup of globalAnnotationGroups) {\n              if (globalAnnotationGroup.annotationGroupNameAndTime == (annotation.data.annotationGroupName + annotation.data.annotationGroupCreatedTime)) {\n                // push this annotation to the end of the group\n                globalAnnotationGroup.annotations.push(annotation);\n                sameGroupFound = true;\n              }\n            }\n            if (!sameGroupFound) {\n              let annotationGroup = {\n                \"annotationGroupNameAndTime\": (annotation.data.annotationGroupName + annotation.data.annotationGroupCreatedTime),\n                \"annotations\": [annotation]\n              };\n              globalAnnotationGroups.push(annotationGroup);\n            }\n          } else {\n            // each global annotation should have a name, so it shouldn't get here\n            console.error(this.$translate('GLOBAL_ANNOTATION_DOES_NOT_HAVE_A_NAME') + annotation);\n          }\n        }\n      }\n    }\n    return globalAnnotationGroups;\n  };\n\n  /**\n   * Get all global annotations that are active\n   * @returns all global annotations that are active, in a group\n   * [\n   * {\n     *   annotationGroupName:\"score1\",\n     *   annotations:[\n     *   {\n     *     type:autoScore,\n     *     value:1\n     *   },\n     *   {\n     *     type:autoComment,\n     *     value:\"you received a score of 1.\"\n     *   }\n     *   ]\n     * },\n   * {\n     *   annotationGroupName:\"score2\",\n     *   annotations:[...]\n     * }\n   * ]\n   */\n  getActiveGlobalAnnotationGroups() {\n    return this.activeGlobalAnnotationGroups;\n  };\n\n  /**\n   * Calculates the active global annotations and groups them by annotation group name\n   */\n  calculateActiveGlobalAnnotationGroups() {\n    this.activeGlobalAnnotationGroups = [];\n\n    for (let annotation of this.annotations) {\n      if (annotation != null && annotation.data != null) {\n        if (annotation.data.isGlobal && annotation.data.unGlobalizedTimestamp == null) {\n          // check if this global annotation can be grouped (has the same annotationGroupName as another that we've seen before)\n          if (annotation.data.annotationGroupName != null) {\n            let sameGroupFound = false;\n            for (let activeGlobalAnnotationGroup of this.activeGlobalAnnotationGroups) {\n              if (activeGlobalAnnotationGroup.annotationGroupName == (annotation.data.annotationGroupName + '_' + annotation.data.annotationGroupCreatedTime)) {\n                // push this annotation to the end of the group\n                activeGlobalAnnotationGroup.annotations.push(annotation);\n                sameGroupFound = true;\n              }\n            }\n            if (!sameGroupFound) {\n              let annotationGroup = {\n                \"annotationGroupName\": annotation.data.annotationGroupName + '_' + annotation.data.annotationGroupCreatedTime,\n                \"annotations\": [annotation],\n                \"nodeId\": annotation.nodeId,\n                \"componentId\": annotation.componentId,\n                \"serverSaveTime\": annotation.serverSaveTime\n              };\n              this.activeGlobalAnnotationGroups.push(annotationGroup);\n            }\n          } else {\n            // each global annotation should have a name, so it shouldn't get here\n            console.error(his.$translate('GLOBAL_ANNOTATION_DOES_NOT_HAVE_A_NAME') + annotation);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Get all global annotations that are in-active\n   * @returns all global annotations that are in-active\n   * In-active global annotations has data.isGlobal = false and data.unGlobalizedTimestamp is set.\n   */\n  getInActiveGlobalAnnotations() {\n    let inActiveGlobalAnnotations = [];\n    for (let annotation of this.annotations) {\n      if (annotation != null && annotation.data != null) {\n        if (annotation.data.isGlobal && annotation.data.unGlobalizedTimestamp != null) {\n          inActiveGlobalAnnotations.push(annotation);\n        }\n      }\n    }\n    return inActiveGlobalAnnotations;\n  };\n\n  /**\n   * Get the latest teacher score annotation for a student work id\n   * @param studentWorkId the student work id\n   * @return the latest teacher score annotation for the student work\n   */\n  getLatestTeacherScoreAnnotationByStudentWorkId(studentWorkId) {\n    return this.getLatestAnnotationByStudentWorkIdAndType(studentWorkId, 'score');\n  }\n\n  /**\n   * Get the latest teacher comment annotation for a student work id\n   * @param studentWorkId the student work id\n   * @return the latest teacher comment annotation for the student work\n   */\n  getLatestTeacherCommentAnnotationByStudentWorkId(studentWorkId) {\n    return this.getLatestAnnotationByStudentWorkIdAndType(studentWorkId, 'comment');\n  }\n\n  /**\n   * Get the latest auto score annotation for a student work id\n   * @param studentWorkId the student work id\n   * @return the latest auto score annotation for the student work\n   */\n  getLatestAutoScoreAnnotationByStudentWorkId(studentWorkId) {\n    return this.getLatestAnnotationByStudentWorkIdAndType(studentWorkId, 'autoScore');\n  }\n\n  /**\n   * Get the latest auto comment annotation for a student work id\n   * @param studentWorkId the student work id\n   * @return the latest auto comment annotation for the student work\n   */\n  getLatestAutoCommentAnnotationByStudentWorkId(studentWorkId) {\n    return this.getLatestAnnotationByStudentWorkIdAndType(studentWorkId, 'autoComment');\n  }\n\n  /**\n   * Get the latest annotation for the given student work and annotation type\n   * @param studentWorkId the student work id\n   * @param type the type of annotation\n   * @return the latest annotation for the given student work and annotation type\n   */\n  getLatestAnnotationByStudentWorkIdAndType(studentWorkId, type) {\n    for (let a = this.annotations.length - 1; a >= 0; a--) {\n      const annotation = this.annotations[a];\n\n      if (annotation != null) {\n        if (studentWorkId == annotation.studentWorkId && type == annotation.type) {\n          /*\n           * we have found an annotation with the given student work\n           * id and annotation type\n           */\n          return annotation;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Get the annotations for the given student work\n   * @param studentWorkId the student work id\n   * @return array of annotations for the given student work\n   */\n  getAnnotationsByStudentWorkId(studentWorkId) {\n    let annotations = [];\n    for (let annotation of this.annotations) {\n      if (annotation && studentWorkId == annotation.studentWorkId) {\n        annotations.push(annotation);\n      }\n    }\n    return annotations;\n  }\n\n  getAverageAutoScore(nodeId, componentId, periodId = -1, type = null) {\n    let totalScoreSoFar = 0;\n    let annotationsCounted = 0;\n    for (let annotation of this.getAllLatestScoreAnnotations(nodeId, componentId, periodId)) {\n      if (annotation.nodeId === nodeId &&\n          annotation.componentId === componentId &&\n          (periodId === -1 || annotation.periodId === periodId)) {\n        let score = null;\n        if (type != null) {\n          score = this.getSubScore(annotation, type);\n        } else {\n          score = this.getScoreFromAnnotation(annotation);\n        }\n        if (score != null) {\n          totalScoreSoFar += score;\n          annotationsCounted++;\n        }\n      }\n    }\n    return totalScoreSoFar / annotationsCounted;\n  }\n\n  getAllLatestScoreAnnotations(nodeId, componentId, periodId) {\n    const workgroupIdsFound = {};\n    const latestScoreAnnotations = [];\n    for (let a = this.annotations.length - 1; a >= 0; a--) {\n      const annotation = this.annotations[a];\n      const workgroupId = annotation.toWorkgroupId;\n      if (workgroupIdsFound[workgroupId] == null &&\n          nodeId === annotation.nodeId &&\n          componentId === annotation.componentId &&\n          (periodId === -1 || periodId === annotation.periodId) &&\n          ('score' === annotation.type || 'autoScore' === annotation.type)) {\n        workgroupIdsFound[workgroupId] = annotation;\n        latestScoreAnnotations.push(annotation);\n      }\n    }\n    return latestScoreAnnotations;\n  }\n\n  getScoreFromAnnotation(annotation) {\n    return annotation.data.value;\n  }\n\n  getSubScore(annotation, type) {\n    for (let score of annotation.data.scores) {\n      if (score.id === type) {\n        return score.score;\n      }\n    }\n    return null;\n  }\n}\n\nAnnotationService.$inject = [\n  '$filter',\n  '$http',\n  '$q',\n  '$rootScope',\n  'ConfigService',\n  'ProjectService',\n  'UtilService'\n];\n\nexport default AnnotationService;\n"],"file":"annotationService.js"}